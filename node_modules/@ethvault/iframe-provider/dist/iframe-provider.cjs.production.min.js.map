{"version":3,"file":"iframe-provider.cjs.production.min.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/index.ts"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && !check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { EventEmitter } from 'eventemitter3';\n\n// By default post to any origin\nconst DEFAULT_TARGET_ORIGIN = '*';\n// By default timeout is 60 seconds\nconst DEFAULT_TIMEOUT_MILLISECONDS = 60000;\n\nconst JSON_RPC_VERSION = '2.0';\n\n// The interface for the source of the events, typically the window.\nexport interface MinimalEventSourceInterface {\n  addEventListener(\n    eventType: 'message',\n    handler: (message: MessageEvent) => void\n  ): void;\n}\n\n// The interface for the target of our events, typically the parent window.\nexport interface MinimalEventTargetInterface {\n  postMessage(message: any, targetOrigin?: string): void;\n}\n\n/**\n * Options for constructing the iframe ethereum provider.\n */\ninterface IFrameEthereumProviderOptions {\n  // The origin to communicate with. Default '*'\n  targetOrigin?: string;\n  // How long to time out waiting for responses. Default 60 seconds.\n  timeoutMilliseconds?: number;\n\n  // The event source. By default we use the window. This can be mocked for tests, or it can wrap\n  // a different interface, e.g. workers.\n  eventSource?: MinimalEventSourceInterface;\n\n  // The event target. By default we use the window parent. This can be mocked for tests, or it can wrap\n  // a different interface, e.g. workers.\n  eventTarget?: MinimalEventTargetInterface;\n}\n\n/**\n * This is what we store in the state to keep track of pending promises.\n */\ninterface PromiseCompleter<TResult, TErrorData> {\n  // A response was received (either error or result response).\n  resolve(\n    result:\n      | JsonRpcSucessfulResponseMessage<TResult>\n      | JsonRpcErrorResponseMessage<TErrorData>\n  ): void;\n\n  // An error with executing the request was encountered.\n  reject(error: Error): void;\n}\n\ntype MessageId = number | string | null;\n\ninterface JsonRpcRequestMessage<TParams = any> {\n  jsonrpc: '2.0';\n  // Optional in the request.\n  id?: MessageId;\n  method: string;\n  params?: TParams;\n}\n\ninterface BaseJsonRpcResponseMessage {\n  // Required but null if not identified in request\n  id: MessageId;\n  jsonrpc: '2.0';\n}\n\ninterface JsonRpcSucessfulResponseMessage<TResult = any>\n  extends BaseJsonRpcResponseMessage {\n  result: TResult;\n}\n\ninterface JsonRpcError<TData = any> {\n  code: number;\n  message: string;\n  data?: TData;\n}\n\ninterface JsonRpcErrorResponseMessage<TErrorData = any>\n  extends BaseJsonRpcResponseMessage {\n  error: JsonRpcError<TErrorData>;\n}\n\ntype ReceivedMessageType =\n  | JsonRpcRequestMessage\n  | JsonRpcErrorResponseMessage\n  | JsonRpcSucessfulResponseMessage;\n\n/**\n * We return a random number between the 0 and the maximum safe integer so that we always generate a unique identifier,\n * across all communication channels.\n */\nfunction getUniqueId(): number {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n}\n\nexport type IFrameEthereumProviderEventTypes =\n  | 'connect'\n  | 'close'\n  | 'notification'\n  | 'chainChanged'\n  | 'networkChanged'\n  | 'accountsChanged';\n\n/**\n * Export the type information about the different events that are emitted.\n */\nexport interface IFrameEthereumProvider {\n  on(event: 'connect', handler: () => void): this;\n\n  on(event: 'close', handler: (code: number, reason: string) => void): this;\n\n  on(event: 'notification', handler: (result: any) => void): this;\n\n  on(event: 'chainChanged', handler: (chainId: string) => void): this;\n\n  on(event: 'networkChanged', handler: (networkId: string) => void): this;\n\n  on(event: 'accountsChanged', handler: (accounts: string[]) => void): this;\n}\n\n/**\n * Represents an error in an RPC returned from the event source. Always contains a code and a reason. The message\n * is constructed from both.\n */\nexport class RpcError extends Error {\n  public readonly isRpcError: true = true;\n\n  public readonly code: number;\n  public readonly reason: string;\n\n  constructor(code: number, reason: string) {\n    super(`${code}: ${reason}`);\n\n    this.code = code;\n    this.reason = reason;\n  }\n}\n\n/**\n * This is the primary artifact of this library.\n */\nexport class IFrameEthereumProvider extends EventEmitter<\n  IFrameEthereumProviderEventTypes\n> {\n  /**\n   * Differentiate this provider from other providers by providing an isIFrame property that always returns true.\n   */\n  public get isIFrame(): true {\n    return true;\n  }\n\n  /**\n   * Always return this for currentProvider.\n   */\n  public get currentProvider(): IFrameEthereumProvider {\n    return this;\n  }\n\n  private enabled: Promise<string[]> | null = null;\n  private readonly targetOrigin: string;\n  private readonly timeoutMilliseconds: number;\n  private readonly eventSource: MinimalEventSourceInterface;\n  private readonly eventTarget: MinimalEventTargetInterface;\n  private readonly completers: {\n    [id: string]: PromiseCompleter<any, any>;\n  } = {};\n\n  public constructor({\n    targetOrigin = DEFAULT_TARGET_ORIGIN,\n    timeoutMilliseconds = DEFAULT_TIMEOUT_MILLISECONDS,\n    eventSource = window,\n    eventTarget = window.parent,\n  }: IFrameEthereumProviderOptions = {}) {\n    // Call super for `this` to be defined\n    super();\n\n    this.targetOrigin = targetOrigin;\n    this.timeoutMilliseconds = timeoutMilliseconds;\n    this.eventSource = eventSource;\n    this.eventTarget = eventTarget;\n\n    // Listen for messages from the event source.\n    this.eventSource.addEventListener('message', this.handleEventSourceMessage);\n  }\n\n  /**\n   * Helper method that handles transport and request wrapping\n   * @param method method to execute\n   * @param params params to pass the method\n   */\n  private async execute<TParams, TResult, TErrorData>(\n    method: string,\n    params?: TParams\n  ): Promise<\n    | JsonRpcSucessfulResponseMessage<TResult>\n    | JsonRpcErrorResponseMessage<TErrorData>\n  > {\n    const id = getUniqueId();\n    const payload: JsonRpcRequestMessage = {\n      jsonrpc: JSON_RPC_VERSION,\n      id,\n      method,\n      ...(typeof params === 'undefined' ? null : { params }),\n    };\n\n    const promise = new Promise<\n      | JsonRpcSucessfulResponseMessage<TResult>\n      | JsonRpcErrorResponseMessage<TErrorData>\n    >((resolve, reject) => (this.completers[id] = { resolve, reject }));\n\n    // Send the JSON RPC to the event source.\n    this.eventTarget.postMessage(payload, this.targetOrigin);\n\n    // Delete the completer within the timeout and reject the promise.\n    setTimeout(() => {\n      if (this.completers[id]) {\n        this.completers[id].reject(\n          new Error(\n            `RPC ID \"${id}\" timed out after ${this.timeoutMilliseconds} milliseconds`\n          )\n        );\n        delete this.completers[id];\n      }\n    }, this.timeoutMilliseconds);\n\n    return promise;\n  }\n\n  /**\n   * Send the JSON RPC and return the result.\n   * @param method method to send to the parent provider\n   * @param params parameters to send\n   */\n  public async send<TParams = any[], TResult = any>(\n    method: string,\n    params?: TParams\n  ): Promise<TResult> {\n    const response = await this.execute<TParams, TResult, any>(method, params);\n\n    if ('error' in response) {\n      throw new RpcError(response.error.code, response.error.message);\n    } else {\n      return response.result;\n    }\n  }\n\n  /**\n   * Request the parent window to enable access to the user's web3 provider. Return accounts list immediately if already enabled.\n   */\n  public async enable(): Promise<string[]> {\n    if (this.enabled === null) {\n      const promise = (this.enabled = this.send('enable').catch(error => {\n        // Clear this.enabled if it's this promise so we try again next call.\n        // this.enabled might be set from elsewhere if, e.g. the accounts changed event is emitted\n        if (this.enabled === promise) {\n          this.enabled = null;\n        }\n        // Rethrow the error.\n        throw error;\n      }));\n    }\n\n    return this.enabled;\n  }\n\n  /**\n   * Backwards compatibility method for web3.\n   * @param payload payload to send to the provider\n   * @param callback callback to be called when the provider resolves\n   */\n  public async sendAsync(\n    payload: { method: string; params?: any[] },\n    callback: (\n      error: string | null,\n      result: { method: string; params?: any[]; result: any } | any\n    ) => void\n  ): Promise<void> {\n    try {\n      const result = await this.execute(payload.method, payload.params);\n\n      callback(null, result);\n    } catch (error) {\n      callback(error, null);\n    }\n  }\n\n  /**\n   * Handle a message on the event source.\n   * @param event message event that will be processed by the provider\n   */\n  private handleEventSourceMessage = (event: MessageEvent) => {\n    const data = event.data;\n\n    // No data to parse, skip.\n    if (!data) {\n      return;\n    }\n\n    const message = data as ReceivedMessageType;\n\n    // Always expect jsonrpc to be set to '2.0'\n    if (message.jsonrpc !== JSON_RPC_VERSION) {\n      return;\n    }\n\n    // If the message has an ID, it is possibly a response message\n    if (typeof message.id !== 'undefined' && message.id !== null) {\n      const completer = this.completers['' + message.id];\n\n      // True if we haven't timed out and this is a response to a message we sent.\n      if (completer) {\n        // Handle pending promise\n        if ('error' in message || 'result' in message) {\n          completer.resolve(message);\n        } else {\n          completer.reject(\n            new Error('Response from provider did not have error or result key')\n          );\n        }\n\n        delete this.completers[message.id];\n      }\n    }\n\n    // If the method is a request from the parent window, it is likely a subscription.\n    if ('method' in message) {\n      switch (message.method) {\n        case 'notification':\n          this.emitNotification(message.params);\n          break;\n\n        case 'connect':\n          this.emitConnect();\n          break;\n\n        case 'close':\n          this.emitClose(message.params[0], message.params[1]);\n          break;\n\n        case 'chainChanged':\n          this.emitChainChanged(message.params[0]);\n          break;\n\n        case 'networkChanged':\n          this.emitNetworkChanged(message.params[0]);\n          break;\n\n        case 'accountsChanged':\n          this.emitAccountsChanged(message.params[0]);\n          break;\n      }\n    }\n  };\n\n  private emitNotification(result: any) {\n    this.emit('notification', result);\n  }\n\n  private emitConnect() {\n    // If the provider isn't enabled but it emits a connect event, assume that it's enabled and initialize\n    // with an empty list of accounts.\n    if (this.enabled === null) {\n      this.enabled = Promise.resolve([]);\n    }\n    this.emit('connect');\n  }\n\n  private emitClose(code: number, reason: string) {\n    this.emit('close', code, reason);\n  }\n\n  private emitChainChanged(chainId: string) {\n    this.emit('chainChanged', chainId);\n  }\n\n  private emitNetworkChanged(networkId: string) {\n    this.emit('networkChanged', networkId);\n  }\n\n  private emitAccountsChanged(accounts: string[]) {\n    this.enabled = Promise.resolve(accounts);\n    this.emit('accountsChanged', accounts);\n  }\n}\n"],"names":["Symbol","iterator","asyncIterator","DEFAULT_TARGET_ORIGIN","DEFAULT_TIMEOUT_MILLISECONDS","JSON_RPC_VERSION","RpcError","code","reason","Error","targetOrigin","timeoutMilliseconds","eventSource","window","eventTarget","parent","event","data","message","jsonrpc","id","completer","_this6","completers","resolve","reject","method","emitNotification","params","emitConnect","emitClose","emitChainChanged","emitNetworkChanged","emitAccountsChanged","addEventListener","handleEventSourceMessage","execute","this","Math","floor","random","Number","MAX_SAFE_INTEGER","payload","promise","Promise","_this7","postMessage","setTimeout","send","response","error","result","enable","_this9","enabled","sendAsync","callback","body","recover","_this10","e","then","emit","chainId","networkId","accounts","EventEmitter"],"mappings":"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"}