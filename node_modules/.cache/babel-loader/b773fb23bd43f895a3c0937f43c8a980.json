{"ast":null,"code":"import { ethers } from 'ethers';\nimport Web3 from 'web3';\nimport { IFrameEthereumProvider } from '@ethvault/iframe-provider';\nlet provider;\nlet legacyProvider;\nlet signer;\nlet readOnly = false;\nlet requested = false;\nlet address;\n\nfunction getDefaultProvider() {\n  legacyProvider = new Web3(getNetworkProviderUrl(1));\n  return new ethers.getDefaultProvider('homestead', 'any');\n}\n\nfunction getJsonRpcProvider(providerOrUrl) {\n  legacyProvider = new Web3(providerOrUrl);\n  return new ethers.providers.JsonRpcProvider(providerOrUrl, 'any');\n}\n\nfunction getWeb3Provider(providerOrUrl) {\n  legacyProvider = new Web3(providerOrUrl);\n  return new ethers.providers.Web3Provider(providerOrUrl, 'any');\n}\n\nfunction getInfuraProvider(infura) {\n  legacyProvider = new Web3(`https://mainnet.infura.io/v3/${infura}`);\n  return new ethers.providers.InfuraProvider('homestead', infura);\n}\n\nexport async function setupWeb3(_ref) {\n  let {\n    customProvider,\n    reloadOnAccountsChange = false,\n    enforceReadOnly = false,\n    enforceReload = false,\n    infura = false\n  } = _ref;\n\n  if (enforceReload) {\n    provider = null;\n    readOnly = false;\n    address = null;\n  }\n\n  if (enforceReadOnly) {\n    readOnly = true;\n    address = null;\n\n    if (infura) {\n      provider = getInfuraProvider(infura);\n    } else {\n      provider = getDefaultProvider();\n    }\n\n    return {\n      provider,\n      signer: undefined\n    };\n  }\n\n  if (provider) {\n    return {\n      provider,\n      signer\n    };\n  }\n\n  if (customProvider) {\n    if (typeof customProvider === 'string') {\n      // handle raw RPC endpoint URL\n      provider = getJsonRpcProvider(customProvider);\n      signer = provider.getSigner();\n    } else {\n      // handle EIP 1193 provider\n      provider = getWeb3Provider(customProvider);\n    }\n\n    return {\n      provider,\n      signer\n    };\n  } // If the window is in an iframe, return the iframe provider IFF the iframe provider can be enabled\n\n\n  if (window && window.parent && window.self && window.self !== window.parent) {\n    try {\n      const iframeProvider = new IFrameEthereumProvider({\n        targetOrigin: 'https://myethvault.com'\n      });\n      await Promise.race([iframeProvider.enable(), // Race the enable with a promise that rejects after 1 second\n      new Promise((_, reject) => setTimeout(() => reject(new Error('Timed out after 1 second')), 1000))]);\n      window.web3 = iframeProvider;\n      window.ethereum = iframeProvider;\n    } catch (error) {\n      console.error('Failed to create and enable iframe provider', error);\n    }\n  }\n\n  if (window && window.ethereum) {\n    provider = getWeb3Provider(window.ethereum);\n    signer = provider.getSigner();\n\n    if (window.ethereum.on && reloadOnAccountsChange) {\n      address = await signer.getAddress();\n      window.ethereum.on('accountsChanged', async function (accounts) {\n        address = await signer.getAddress();\n\n        if (accounts[0] !== address) {\n          window.location.reload();\n        }\n      });\n    }\n\n    return {\n      provider,\n      signer\n    };\n  } else if (window.web3 && window.web3.currentProvider) {\n    provider = getWeb3Provider(window.web3.currentProvider);\n    const id = (await provider.getNetwork()).chainId;\n    signer = provider.getSigner();\n    return {\n      provider,\n      signer\n    };\n  } else {\n    try {\n      const url = 'http://localhost:8545';\n      await fetch(url);\n      console.log('local node active');\n      provider = getJsonRpcProvider(url);\n    } catch (error) {\n      if (error.readyState === 4 && (error.status === 400 || error.status === 200)) {\n        // the endpoint is active\n        console.log('Success');\n      } else {\n        console.log('No web3 instance injected. Falling back to cloud provider.');\n        readOnly = true;\n        provider = getDefaultProvider();\n        return {\n          provider,\n          signer\n        };\n      }\n    }\n  }\n}\nexport async function getWeb3() {\n  if (!provider) {\n    throw new Error('Ethers has not been instantiated, please call setupWeb3() first');\n  }\n\n  return provider;\n}\nexport async function getWeb3Read() {\n  if (!provider) {\n    throw new Error('Ethers has not been instantiated, please call setupWeb3() first');\n  }\n\n  return provider;\n}\nexport function isReadOnly() {\n  return readOnly;\n}\nexport function getNetworkProviderUrl(id) {\n  switch (id) {\n    case '1':\n      return `https://mainnet.infura.io/v3/90f210707d3c450f847659dc9a3436ea`;\n\n    case '3':\n      return `https://ropsten.infura.io/v3/90f210707d3c450f847659dc9a3436ea`;\n\n    case '4':\n      return `https://rinkeby.infura.io/v3/90f210707d3c450f847659dc9a3436ea`;\n\n    case '5':\n      return `https://goerli.infura.io/v3/90f210707d3c450f847659dc9a3436ea`;\n\n    default:\n      return `https://mainnet.infura.io/v3/90f210707d3c450f847659dc9a3436ea`;\n  }\n}\nexport async function getProvider() {\n  return getWeb3();\n}\nexport async function getSigner() {\n  const provider = await getWeb3();\n\n  try {\n    const signer = provider.getSigner();\n    await signer.getAddress();\n    return signer;\n  } catch (e) {\n    if (window.ethereum) {\n      try {\n        if (requested === true) return provider;\n        await window.ethereum.enable();\n        const signer = await provider.getSigner();\n        await signer.getAddress();\n        return signer;\n      } catch (e) {\n        requested = true;\n        return provider;\n      }\n    } else {\n      return provider;\n    }\n  }\n}\nexport async function getAccount() {\n  const provider = await getWeb3();\n\n  try {\n    const signer = await provider.getSigner();\n    const address = await signer.getAddress();\n    return address;\n  } catch (e) {\n    return '0x0';\n  }\n}\nexport async function getAccounts() {\n  try {\n    const account = await getAccount();\n\n    if (parseInt(account, 16) !== 0) {\n      return [account];\n    } else if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.enable();\n        return accounts;\n      } catch (error) {\n        console.warn('Did not allow app to access dapp browser');\n        throw error;\n      }\n    } else {\n      return [];\n    }\n  } catch (e) {\n    return [];\n  }\n}\nexport async function getNetworkId() {\n  const provider = await getWeb3();\n  const network = await provider.getNetwork();\n  return network.chainId;\n}\nexport async function getNetwork() {\n  const provider = await getWeb3();\n  const network = await provider.getNetwork();\n  return network;\n}\nexport async function getBlock() {\n  let number = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'latest';\n\n  try {\n    const provider = await getWeb3();\n    const blockDetails = await provider.getBlock(number);\n    return {\n      number: blockDetails.number,\n      timestamp: blockDetails.timestamp\n    };\n  } catch (e) {\n    console.log('error getting block details', e);\n    return {\n      number: 0,\n      timestamp: 0\n    };\n  }\n} // This provider is used to pass to dnsprovejs which only supports web3js provider\n\nexport function getLegacyProvider() {\n  return legacyProvider;\n}","map":{"version":3,"sources":["/Users/karel/Documents/eth/my-eth-app/node_modules/@ensdomains/ui/src/web3.js"],"names":["ethers","Web3","IFrameEthereumProvider","provider","legacyProvider","signer","readOnly","requested","address","getDefaultProvider","getNetworkProviderUrl","getJsonRpcProvider","providerOrUrl","providers","JsonRpcProvider","getWeb3Provider","Web3Provider","getInfuraProvider","infura","InfuraProvider","setupWeb3","customProvider","reloadOnAccountsChange","enforceReadOnly","enforceReload","undefined","getSigner","window","parent","self","iframeProvider","targetOrigin","Promise","race","enable","_","reject","setTimeout","Error","web3","ethereum","error","console","on","getAddress","accounts","location","reload","currentProvider","id","getNetwork","chainId","url","fetch","log","readyState","status","getWeb3","getWeb3Read","isReadOnly","getProvider","e","getAccount","getAccounts","account","parseInt","warn","getNetworkId","network","getBlock","number","blockDetails","timestamp","getLegacyProvider"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers'\nimport Web3 from 'web3'\nimport { IFrameEthereumProvider } from '@ethvault/iframe-provider'\n\nlet provider\nlet legacyProvider\nlet signer\nlet readOnly = false\nlet requested = false\nlet address\n\nfunction getDefaultProvider() {\n  legacyProvider = new Web3(getNetworkProviderUrl(1))\n  return new ethers.getDefaultProvider('homestead', 'any')\n}\n\nfunction getJsonRpcProvider(providerOrUrl) {\n  legacyProvider = new Web3(providerOrUrl)\n  return new ethers.providers.JsonRpcProvider(providerOrUrl, 'any')\n}\n\nfunction getWeb3Provider(providerOrUrl) {\n  legacyProvider = new Web3(providerOrUrl)\n  return new ethers.providers.Web3Provider(providerOrUrl, 'any')\n}\n\nfunction getInfuraProvider(infura) {\n  legacyProvider = new Web3(`https://mainnet.infura.io/v3/${infura}`)\n  return new ethers.providers.InfuraProvider('homestead', infura)\n}\n\nexport async function setupWeb3({\n  customProvider,\n  reloadOnAccountsChange = false,\n  enforceReadOnly = false,\n  enforceReload = false,\n  infura = false\n}) {\n  if(enforceReload){\n    provider = null\n    readOnly = false\n    address = null\n  }\n\n  if(enforceReadOnly){\n    readOnly = true\n    address = null\n    if(infura){\n      provider = getInfuraProvider(infura)\n    }else{\n      provider = getDefaultProvider()\n    }\n    return { provider, signer:undefined }\n  }\n\n  if (provider) {\n    return { provider, signer }\n  }\n  if (customProvider) {\n    if (typeof customProvider === 'string') {\n      // handle raw RPC endpoint URL\n      provider = getJsonRpcProvider(customProvider)\n      signer = provider.getSigner()\n    } else {\n      // handle EIP 1193 provider\n      provider = getWeb3Provider(customProvider)\n    }\n    return { provider, signer }\n  }\n\n  // If the window is in an iframe, return the iframe provider IFF the iframe provider can be enabled\n  if (window && window.parent && window.self && window.self !== window.parent) {\n    try {\n      const iframeProvider = new IFrameEthereumProvider({\n        targetOrigin: 'https://myethvault.com'\n      })\n\n      await Promise.race([\n        iframeProvider.enable(),\n        // Race the enable with a promise that rejects after 1 second\n        new Promise((_, reject) =>\n          setTimeout(() => reject(new Error('Timed out after 1 second')), 1000)\n        )\n      ])\n\n      window.web3 = iframeProvider\n      window.ethereum = iframeProvider\n    } catch (error) {\n      console.error('Failed to create and enable iframe provider', error)\n    }\n  }\n\n  if (window && window.ethereum) {\n    provider = getWeb3Provider(window.ethereum)\n    signer = provider.getSigner()\n    if (window.ethereum.on && reloadOnAccountsChange) {\n      address = await signer.getAddress()\n      window.ethereum.on('accountsChanged', async function (accounts) {\n        address = await signer.getAddress()\n        if (accounts[0] !== address) {\n          window.location.reload()\n        }\n      })\n    }\n    return { provider, signer }\n  } else if (window.web3 && window.web3.currentProvider) {\n    provider = getWeb3Provider(window.web3.currentProvider)\n    const id = (await provider.getNetwork()).chainId\n    signer = provider.getSigner()\n    return { provider, signer }\n  } else {\n    try {\n      const url = 'http://localhost:8545'\n      await fetch(url)\n      console.log('local node active')\n      provider = getJsonRpcProvider(url)\n    } catch (error) {\n      if (\n        error.readyState === 4 &&\n        (error.status === 400 || error.status === 200)\n      ) {\n        // the endpoint is active\n        console.log('Success')\n      } else {\n        console.log(\n          'No web3 instance injected. Falling back to cloud provider.'\n        )\n        readOnly = true\n        provider = getDefaultProvider()\n        return { provider, signer }\n      }\n    }\n  }\n}\n\nexport async function getWeb3() {\n  if (!provider) {\n    throw new Error(\n      'Ethers has not been instantiated, please call setupWeb3() first'\n    )\n  }\n  return provider\n}\n\nexport async function getWeb3Read() {\n  if (!provider) {\n    throw new Error(\n      'Ethers has not been instantiated, please call setupWeb3() first'\n    )\n  }\n  return provider\n}\n\nexport function isReadOnly() {\n  return readOnly\n}\n\nexport function getNetworkProviderUrl(id) {\n  switch (id) {\n    case '1':\n      return `https://mainnet.infura.io/v3/90f210707d3c450f847659dc9a3436ea`\n    case '3':\n      return `https://ropsten.infura.io/v3/90f210707d3c450f847659dc9a3436ea`\n    case '4':\n      return `https://rinkeby.infura.io/v3/90f210707d3c450f847659dc9a3436ea`\n    case '5':\n      return `https://goerli.infura.io/v3/90f210707d3c450f847659dc9a3436ea`\n    default:\n      return `https://mainnet.infura.io/v3/90f210707d3c450f847659dc9a3436ea`\n  }\n}\n\nexport async function getProvider() {\n  return getWeb3()\n}\n\nexport async function getSigner() {\n  const provider = await getWeb3()\n  try {\n    const signer = provider.getSigner()\n    await signer.getAddress()\n    return signer\n  } catch (e) {\n    if (window.ethereum) {\n      try {\n        if (requested === true) return provider\n        await window.ethereum.enable()\n        const signer = await provider.getSigner()\n        await signer.getAddress()\n        return signer\n      } catch (e) {\n        requested = true\n        return provider\n      }\n    } else {\n      return provider\n    }\n  }\n}\n\nexport async function getAccount() {\n  const provider = await getWeb3()\n  try {\n    const signer = await provider.getSigner()\n    const address = await signer.getAddress()\n    return address\n  } catch (e) {\n    return '0x0'\n  }\n}\n\nexport async function getAccounts() {\n  try {\n    const account = await getAccount()\n    if (parseInt(account, 16) !== 0) {\n      return [account]\n    } else if (window.ethereum) {\n      try {\n        const accounts = await window.ethereum.enable()\n        return accounts\n      } catch (error) {\n        console.warn('Did not allow app to access dapp browser')\n        throw error\n      }\n    } else {\n      return []\n    }\n  } catch (e) {\n    return []\n  }\n}\n\nexport async function getNetworkId() {\n  const provider = await getWeb3()\n  const network = await provider.getNetwork()\n  return network.chainId\n}\n\nexport async function getNetwork() {\n  const provider = await getWeb3()\n  const network = await provider.getNetwork()\n  return network\n}\n\nexport async function getBlock(number = 'latest') {\n  try {\n    const provider = await getWeb3()\n    const blockDetails = await provider.getBlock(number)\n    return {\n      number: blockDetails.number,\n      timestamp: blockDetails.timestamp\n    }\n  } catch (e) {\n    console.log('error getting block details', e)\n    return {\n      number: 0,\n      timestamp: 0\n    }\n  }\n}\n\n// This provider is used to pass to dnsprovejs which only supports web3js provider\nexport function getLegacyProvider(){\n  return legacyProvider\n}\n"]},"metadata":{},"sourceType":"module"}