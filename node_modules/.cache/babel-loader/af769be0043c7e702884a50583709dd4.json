{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport Web3Modal from \"web3modal\";\n\nrequire('dotenv').config(); // Enter a valid infura key here to avoid being rate limited\n// You can get a key for free at https://infura.io/register\n\n\nconst INFURA_ID = process.env.INFURA_ID;\nconst NETWORK = process.env.NETWORK;\nconsole.log(INFURA_ID);\n\nfunction useWeb3Modal() {\n  _s();\n\n  let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const [provider, setProvider] = useState();\n  const [autoLoaded, setAutoLoaded] = useState(false);\n  const {\n    autoLoad = true,\n    infuraId = INFURA_ID,\n    network = NETWORK\n  } = config; // Web3Modal also supports many other wallets.\n  // You can see other options at https://github.com/Web3Modal/web3modal\n\n  const web3Modal = useMemo(() => {\n    return new Web3Modal({\n      network,\n      cacheProvider: true,\n      providerOptions: {\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            infuraId\n          }\n        }\n      }\n    });\n  }, [infuraId, network]); // Open wallet selection modal.\n\n  const loadWeb3Modal = useCallback(async () => {\n    const newProvider = await web3Modal.connect();\n    setProvider(new Web3Provider(newProvider));\n  }, [web3Modal]);\n  const logoutOfWeb3Modal = useCallback(async function () {\n    web3Modal.clearCachedProvider();\n    window.location.reload();\n  }, [web3Modal]); // If autoLoad is enabled and the the wallet had been loaded before, load it automatically now.\n\n  useEffect(() => {\n    if (autoLoad && !autoLoaded && web3Modal.cachedProvider) {\n      loadWeb3Modal();\n      setAutoLoaded(true);\n    }\n  }, [autoLoad, autoLoaded, loadWeb3Modal, setAutoLoaded, web3Modal.cachedProvider]);\n  return [provider, loadWeb3Modal, logoutOfWeb3Modal];\n}\n\n_s(useWeb3Modal, \"K3jUZcTyZdEqTn83Ynyh21OvMnE=\");\n\nexport default useWeb3Modal;","map":{"version":3,"sources":["/Users/karel/Documents/eth/my-eth-app/src/hooks/useWeb3Modal.ts"],"names":["Web3Provider","WalletConnectProvider","useCallback","useEffect","useMemo","useState","Web3Modal","require","config","INFURA_ID","process","env","NETWORK","console","log","useWeb3Modal","provider","setProvider","autoLoaded","setAutoLoaded","autoLoad","infuraId","network","web3Modal","cacheProvider","providerOptions","walletconnect","package","options","loadWeb3Modal","newProvider","connect","logoutOfWeb3Modal","clearCachedProvider","window","location","reload","cachedProvider"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,0BAA7B;AACA,OAAOC,qBAAP,MAAkC,8BAAlC;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,OAAjC,EAA0CC,QAA1C,QAA0D,OAA1D;AACA,OAAOC,SAAP,MAAsB,WAAtB;;AACAC,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB,G,CACA;AACA;;;AACA,MAAMC,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYF,SAA9B;AACA,MAAMG,OAAO,GAAGF,OAAO,CAACC,GAAR,CAAYC,OAA5B;AACAC,OAAO,CAACC,GAAR,CAAYL,SAAZ;;AAEA,SAASM,YAAT,GAAsM;AAAA;;AAAA,MAAhLP,MAAgL,uEAA7G,EAA6G;AACpM,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,EAAxC;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAEe,IAAAA,QAAQ,GAAG,IAAb;AAAmBC,IAAAA,QAAQ,GAAGZ,SAA9B;AAAyCa,IAAAA,OAAO,GAAGV;AAAnD,MAA+DJ,MAArE,CAHoM,CAKpM;AACA;;AACA,QAAMe,SAAS,GAAGnB,OAAO,CAAC,MAAM;AAC9B,WAAO,IAAIE,SAAJ,CAAc;AACnBgB,MAAAA,OADmB;AAEnBE,MAAAA,aAAa,EAAE,IAFI;AAGnBC,MAAAA,eAAe,EAAE;AACfC,QAAAA,aAAa,EAAE;AACbC,UAAAA,OAAO,EAAE1B,qBADI;AAEb2B,UAAAA,OAAO,EAAE;AACPP,YAAAA;AADO;AAFI;AADA;AAHE,KAAd,CAAP;AAYD,GAbwB,EAatB,CAACA,QAAD,EAAWC,OAAX,CAbsB,CAAzB,CAPoM,CAsBpM;;AACA,QAAMO,aAAa,GAAG3B,WAAW,CAAC,YAAY;AAC5C,UAAM4B,WAAW,GAAG,MAAMP,SAAS,CAACQ,OAAV,EAA1B;AACAd,IAAAA,WAAW,CAAC,IAAIjB,YAAJ,CAAiB8B,WAAjB,CAAD,CAAX;AACD,GAHgC,EAG9B,CAACP,SAAD,CAH8B,CAAjC;AAKA,QAAMS,iBAAiB,GAAG9B,WAAW,CACnC,kBAAiB;AACfqB,IAAAA,SAAS,CAACU,mBAAV;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,GAJkC,EAKnC,CAACb,SAAD,CALmC,CAArC,CA5BoM,CAoCpM;;AACApB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,QAAQ,IAAI,CAACF,UAAb,IAA2BK,SAAS,CAACc,cAAzC,EAAyD;AACvDR,MAAAA,aAAa;AACbV,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GALQ,EAKN,CACDC,QADC,EAEDF,UAFC,EAGDW,aAHC,EAIDV,aAJC,EAKDI,SAAS,CAACc,cALT,CALM,CAAT;AAaA,SAAO,CAACrB,QAAD,EAAWa,aAAX,EAA0BG,iBAA1B,CAAP;AACD;;GAnDQjB,Y;;AAqDT,eAAeA,YAAf","sourcesContent":["import { Web3Provider } from \"@ethersproject/providers\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport Web3Modal from \"web3modal\";\nrequire('dotenv').config()\n// Enter a valid infura key here to avoid being rate limited\n// You can get a key for free at https://infura.io/register\nconst INFURA_ID = process.env.INFURA_ID;\nconst NETWORK = process.env.NETWORK;\nconsole.log(INFURA_ID)\n\nfunction useWeb3Modal(config: {autoLoad?: boolean;infuraId?: string;network?: string;} = {}) : [provider:Web3Provider | undefined,loadWeb3Modal:()=>Promise<void>,logoutOfWeb3Modal:()=>Promise<void>]{\n  const [provider, setProvider] = useState<Web3Provider | undefined>();\n  const [autoLoaded, setAutoLoaded] = useState(false);\n  const { autoLoad = true, infuraId = INFURA_ID, network = NETWORK } = config;\n\n  // Web3Modal also supports many other wallets.\n  // You can see other options at https://github.com/Web3Modal/web3modal\n  const web3Modal = useMemo(() => {\n    return new Web3Modal({\n      network,\n      cacheProvider: true,\n      providerOptions: {\n        walletconnect: {\n          package: WalletConnectProvider,\n          options: {\n            infuraId\n          }\n        }\n      }\n    });\n  }, [infuraId, network]);\n\n  // Open wallet selection modal.\n  const loadWeb3Modal = useCallback(async () => {\n    const newProvider = await web3Modal.connect();\n    setProvider(new Web3Provider(newProvider));\n  }, [web3Modal]);\n\n  const logoutOfWeb3Modal = useCallback(\n    async function() {\n      web3Modal.clearCachedProvider();\n      window.location.reload();\n    },\n    [web3Modal]\n  );\n\n  // If autoLoad is enabled and the the wallet had been loaded before, load it automatically now.\n  useEffect(() => {\n    if (autoLoad && !autoLoaded && web3Modal.cachedProvider) {\n      loadWeb3Modal();\n      setAutoLoaded(true);\n    }\n  }, [\n    autoLoad,\n    autoLoaded,\n    loadWeb3Modal,\n    setAutoLoaded,\n    web3Modal.cachedProvider\n  ]);\n\n  return [provider, loadWeb3Modal, logoutOfWeb3Modal];\n}\n\nexport default useWeb3Modal;\n"]},"metadata":{},"sourceType":"module"}