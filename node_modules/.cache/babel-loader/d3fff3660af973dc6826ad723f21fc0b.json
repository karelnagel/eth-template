{"ast":null,"code":"// @ts-check\n'use strict';\n\nconst {\n  Buffer\n} = require('buffer');\n\nconst {\n  TextEncoder,\n  TextDecoder\n} = require('web-encoding');\n\nconst textDecoder = new TextDecoder();\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\n\nconst decodeText = bytes => textDecoder.decode(bytes);\n\nconst textEncoder = new TextEncoder();\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\n\nconst encodeText = text => textEncoder.encode(text);\n/**\n * @param {ArrayBufferView} bytes\n * @returns {Buffer}\n */\n\n\nconst asBuffer = _ref => {\n  let {\n    buffer,\n    byteLength,\n    byteOffset\n  } = _ref;\n  return Buffer.from(buffer, byteOffset, byteLength);\n};\n\nmodule.exports = {\n  decodeText,\n  encodeText,\n  asBuffer\n};","map":{"version":3,"sources":["/Users/karel/Documents/eth/my-eth-app/node_modules/@ensdomains/content-hash/node_modules/multibase/src/util.js"],"names":["Buffer","require","TextEncoder","TextDecoder","textDecoder","decodeText","bytes","decode","textEncoder","encodeText","text","encode","asBuffer","buffer","byteLength","byteOffset","from","module","exports"],"mappings":"AAAA;AACA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AACA,MAAM;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,IAA+BF,OAAO,CAAC,cAAD,CAA5C;;AAEA,MAAMG,WAAW,GAAG,IAAID,WAAJ,EAApB;AACA;AACA;AACA;AACA;;AACA,MAAME,UAAU,GAAIC,KAAD,IAAWF,WAAW,CAACG,MAAZ,CAAmBD,KAAnB,CAA9B;;AAEA,MAAME,WAAW,GAAG,IAAIN,WAAJ,EAApB;AACA;AACA;AACA;AACA;;AACA,MAAMO,UAAU,GAAIC,IAAD,IAAUF,WAAW,CAACG,MAAZ,CAAmBD,IAAnB,CAA7B;AAEA;AACA;AACA;AACA;;;AACA,MAAME,QAAQ,GAAG;AAAA,MAAC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,UAAV;AAAsBC,IAAAA;AAAtB,GAAD;AAAA,SACff,MAAM,CAACgB,IAAP,CAAYH,MAAZ,EAAoBE,UAApB,EAAgCD,UAAhC,CADe;AAAA,CAAjB;;AAGAG,MAAM,CAACC,OAAP,GAAiB;AAAEb,EAAAA,UAAF;AAAcI,EAAAA,UAAd;AAA0BG,EAAAA;AAA1B,CAAjB","sourcesContent":["// @ts-check\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst { TextEncoder, TextDecoder } = require('web-encoding')\n\nconst textDecoder = new TextDecoder()\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\nconst decodeText = (bytes) => textDecoder.decode(bytes)\n\nconst textEncoder = new TextEncoder()\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nconst encodeText = (text) => textEncoder.encode(text)\n\n/**\n * @param {ArrayBufferView} bytes\n * @returns {Buffer}\n */\nconst asBuffer = ({ buffer, byteLength, byteOffset }) =>\n  Buffer.from(buffer, byteOffset, byteLength)\n\nmodule.exports = { decodeText, encodeText, asBuffer }\n"]},"metadata":{},"sourceType":"script"}