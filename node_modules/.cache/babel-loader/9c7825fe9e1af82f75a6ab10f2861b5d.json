{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DataStructures_1 = require(\"../../utils/DataStructures\");\n\nvar MessageUtils_1 = require(\"../../utils/MessageUtils\");\n\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\n\nvar CategoryLogMessageImpl = function () {\n  function CategoryLogMessageImpl(message, error, categories, date, level, logFormat, ready) {\n    this._resolvedErrorMessage = false;\n    this._errorAsStack = null;\n    this._message = message;\n    this._error = error;\n    this._categories = categories;\n    this._date = date;\n    this._level = level;\n    this._logFormat = logFormat;\n    this._ready = ready;\n  }\n\n  Object.defineProperty(CategoryLogMessageImpl.prototype, \"message\", {\n    get: function () {\n      return this._message;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CategoryLogMessageImpl.prototype, \"error\", {\n    get: function () {\n      return this._error;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CategoryLogMessageImpl.prototype, \"categories\", {\n    get: function () {\n      return this._categories;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CategoryLogMessageImpl.prototype, \"date\", {\n    get: function () {\n      return this._date;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CategoryLogMessageImpl.prototype, \"level\", {\n    get: function () {\n      return this._level;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CategoryLogMessageImpl.prototype, \"logFormat\", {\n    get: function () {\n      return this._logFormat;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CategoryLogMessageImpl.prototype, \"isMessageLogData\", {\n    get: function () {\n      return typeof this._message !== \"string\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CategoryLogMessageImpl.prototype, \"messageAsString\", {\n    get: function () {\n      if (typeof this._message === \"string\") {\n        return this._message;\n      }\n\n      return this._message.msg;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CategoryLogMessageImpl.prototype, \"logData\", {\n    get: function () {\n      var result = null;\n\n      if (typeof this._message !== \"string\") {\n        result = this.message;\n      }\n\n      return result;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CategoryLogMessageImpl.prototype, \"isResolvedErrorMessage\", {\n    get: function () {\n      return this._resolvedErrorMessage;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CategoryLogMessageImpl.prototype, \"errorAsStack\", {\n    get: function () {\n      return this._errorAsStack;\n    },\n    set: function (stack) {\n      this._errorAsStack = stack;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CategoryLogMessageImpl.prototype.isReady = function () {\n    return this._ready;\n  };\n\n  CategoryLogMessageImpl.prototype.setReady = function (value) {\n    this._ready = value;\n  };\n\n  Object.defineProperty(CategoryLogMessageImpl.prototype, \"resolvedErrorMessage\", {\n    get: function () {\n      return this._resolvedErrorMessage;\n    },\n    set: function (value) {\n      this._resolvedErrorMessage = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return CategoryLogMessageImpl;\n}();\n/**\n * Abstract category logger, use as your base class for new type of loggers (it\n * saves you a lot of work) and override doLog(CategoryLogMessage). The message argument\n * provides full access to anything related to the logging event.\n * If you just want the standard line of logging, call: this.createDefaultLogMessage(msg) on\n * this class which will return you the formatted log message as string (e.g. the\n * default loggers all use this).\n */\n\n\nvar AbstractCategoryLogger = function () {\n  function AbstractCategoryLogger(rootCategory, runtimeSettings) {\n    this.allMessages = new DataStructures_1.LinkedList();\n    this.rootCategory = rootCategory;\n    this.runtimeSettings = runtimeSettings;\n  }\n\n  AbstractCategoryLogger.prototype.trace = function (msg) {\n    var categories = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      categories[_i - 1] = arguments[_i];\n    }\n\n    this._log.apply(this, [LoggerOptions_1.LogLevel.Trace, msg, null, false].concat(categories));\n  };\n\n  AbstractCategoryLogger.prototype.debug = function (msg) {\n    var categories = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      categories[_i - 1] = arguments[_i];\n    }\n\n    this._log.apply(this, [LoggerOptions_1.LogLevel.Debug, msg, null, false].concat(categories));\n  };\n\n  AbstractCategoryLogger.prototype.info = function (msg) {\n    var categories = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      categories[_i - 1] = arguments[_i];\n    }\n\n    this._log.apply(this, [LoggerOptions_1.LogLevel.Info, msg, null, false].concat(categories));\n  };\n\n  AbstractCategoryLogger.prototype.warn = function (msg) {\n    var categories = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      categories[_i - 1] = arguments[_i];\n    }\n\n    this._log.apply(this, [LoggerOptions_1.LogLevel.Warn, msg, null, false].concat(categories));\n  };\n\n  AbstractCategoryLogger.prototype.error = function (msg, error) {\n    var categories = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      categories[_i - 2] = arguments[_i];\n    }\n\n    this._log.apply(this, [LoggerOptions_1.LogLevel.Error, msg, error, false].concat(categories));\n  };\n\n  AbstractCategoryLogger.prototype.fatal = function (msg, error) {\n    var categories = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      categories[_i - 2] = arguments[_i];\n    }\n\n    this._log.apply(this, [LoggerOptions_1.LogLevel.Fatal, msg, error, false].concat(categories));\n  };\n\n  AbstractCategoryLogger.prototype.resolved = function (msg, error) {\n    var categories = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      categories[_i - 2] = arguments[_i];\n    }\n\n    this._log.apply(this, [LoggerOptions_1.LogLevel.Error, msg, error, true].concat(categories));\n  };\n\n  AbstractCategoryLogger.prototype.log = function (level, msg, error) {\n    var categories = [];\n\n    for (var _i = 3; _i < arguments.length; _i++) {\n      categories[_i - 3] = arguments[_i];\n    }\n\n    this._log.apply(this, [level, msg, error, false].concat(categories));\n  };\n\n  AbstractCategoryLogger.prototype.getRootCategory = function () {\n    return this.rootCategory;\n  };\n\n  AbstractCategoryLogger.prototype.createDefaultLogMessage = function (msg) {\n    return MessageUtils_1.MessageFormatUtils.renderDefaultMessage(msg, true);\n  };\n  /**\n   * Return optional message formatter. All LoggerTypes (except custom) will see if\n   * they have this, and if so use it to log.\n   * @returns {((message:CategoryLogMessage)=>string)|null}\n   */\n\n\n  AbstractCategoryLogger.prototype._getMessageFormatter = function () {\n    var categorySettings = this.runtimeSettings.getCategorySettings(this.rootCategory); // Should not happen but make ts happy\n\n    if (categorySettings === null) {\n      throw new Error(\"Did not find CategorySettings for rootCategory: \" + this.rootCategory.name);\n    }\n\n    return categorySettings.formatterLogMessage;\n  };\n\n  AbstractCategoryLogger.prototype._log = function (level, msg, error, resolved) {\n    if (error === void 0) {\n      error = null;\n    }\n\n    if (resolved === void 0) {\n      resolved = false;\n    }\n\n    var categories = [];\n\n    for (var _i = 4; _i < arguments.length; _i++) {\n      categories[_i - 4] = arguments[_i];\n    } // this._logInternal(level, () => msg, () => error, resolved, ...categories);\n\n\n    var functionMessage = function () {\n      if (typeof msg === \"function\") {\n        return msg();\n      }\n\n      return msg;\n    };\n\n    var functionError = function () {\n      if (typeof error === \"function\") {\n        return error();\n      }\n\n      return error;\n    };\n\n    this._logInternal.apply(this, [level, functionMessage, functionError, resolved].concat(categories));\n  };\n\n  AbstractCategoryLogger.prototype._logInternal = function (level, msg, error, resolved) {\n    var _this = this;\n\n    var categories = [];\n\n    for (var _i = 4; _i < arguments.length; _i++) {\n      categories[_i - 4] = arguments[_i];\n    }\n\n    var logCategories = [this.rootCategory]; // Log root category by default if none present\n\n    if (typeof categories !== \"undefined\" && categories.length > 0) {\n      logCategories = logCategories.concat(categories.filter(function (c) {\n        return c !== _this.rootCategory;\n      }));\n    }\n\n    var _loop_1 = function (i) {\n      var category = logCategories[i];\n\n      if (category === null) {\n        throw new Error(\"Cannot have a null element within categories, at index=\" + i);\n      }\n\n      var settings = this_1.runtimeSettings.getCategorySettings(category);\n\n      if (settings === null) {\n        throw new Error(\"Category with path: \" + category.getCategoryPath() + \" is not registered with this logger, maybe \" + \"you registered it with a different root logger?\");\n      }\n\n      if (settings.logLevel <= level) {\n        var actualError = error !== null ? error() : null;\n\n        if (actualError === null) {\n          var logMessage = new CategoryLogMessageImpl(msg(), actualError, logCategories, new Date(), level, settings.logFormat, true);\n          logMessage.resolvedErrorMessage = resolved;\n          this_1.allMessages.addTail(logMessage);\n          this_1.processMessages();\n        } else {\n          var logMessage_1 = new CategoryLogMessageImpl(msg(), actualError, logCategories, new Date(), level, settings.logFormat, false);\n          logMessage_1.resolvedErrorMessage = resolved;\n          this_1.allMessages.addTail(logMessage_1);\n          MessageUtils_1.MessageFormatUtils.renderError(actualError).then(function (stack) {\n            logMessage_1.errorAsStack = stack;\n            logMessage_1.setReady(true);\n\n            _this.processMessages();\n          }).catch(function () {\n            logMessage_1.errorAsStack = \"<UNKNOWN> unable to get stack.\";\n            logMessage_1.setReady(true);\n\n            _this.processMessages();\n          });\n        }\n\n        return \"break\";\n      }\n    };\n\n    var this_1 = this; // Get the runtime levels for given categories. If their level is lower than given level, we log.\n    // In addition we pass along which category/categories we log this statement for.\n\n    for (var i = 0; i < logCategories.length; i++) {\n      var state_1 = _loop_1(i);\n\n      if (state_1 === \"break\") break;\n    }\n  };\n\n  AbstractCategoryLogger.prototype.processMessages = function () {\n    // Basically we wait until errors are resolved (those messages\n    // may not be ready).\n    var msgs = this.allMessages;\n\n    if (msgs.getSize() > 0) {\n      do {\n        var msg = msgs.getHead();\n\n        if (msg != null) {\n          if (!msg.isReady()) {\n            break;\n          }\n\n          msgs.removeHead();\n          this.doLog(msg);\n        }\n      } while (msgs.getSize() > 0);\n    }\n  };\n\n  return AbstractCategoryLogger;\n}();\n\nexports.AbstractCategoryLogger = AbstractCategoryLogger;","map":{"version":3,"sources":["../../../../src/logging/log/category/AbstractCategoryLogger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DataStructures_1 = require(\"../../utils/DataStructures\");\nvar MessageUtils_1 = require(\"../../utils/MessageUtils\");\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\nvar CategoryLogMessageImpl = (function () {\n    function CategoryLogMessageImpl(message, error, categories, date, level, logFormat, ready) {\n        this._resolvedErrorMessage = false;\n        this._errorAsStack = null;\n        this._message = message;\n        this._error = error;\n        this._categories = categories;\n        this._date = date;\n        this._level = level;\n        this._logFormat = logFormat;\n        this._ready = ready;\n    }\n    Object.defineProperty(CategoryLogMessageImpl.prototype, \"message\", {\n        get: function () {\n            return this._message;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryLogMessageImpl.prototype, \"error\", {\n        get: function () {\n            return this._error;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryLogMessageImpl.prototype, \"categories\", {\n        get: function () {\n            return this._categories;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryLogMessageImpl.prototype, \"date\", {\n        get: function () {\n            return this._date;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryLogMessageImpl.prototype, \"level\", {\n        get: function () {\n            return this._level;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryLogMessageImpl.prototype, \"logFormat\", {\n        get: function () {\n            return this._logFormat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryLogMessageImpl.prototype, \"isMessageLogData\", {\n        get: function () {\n            return typeof (this._message) !== \"string\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryLogMessageImpl.prototype, \"messageAsString\", {\n        get: function () {\n            if (typeof (this._message) === \"string\") {\n                return this._message;\n            }\n            return this._message.msg;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryLogMessageImpl.prototype, \"logData\", {\n        get: function () {\n            var result = null;\n            if (typeof (this._message) !== \"string\") {\n                result = this.message;\n            }\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryLogMessageImpl.prototype, \"isResolvedErrorMessage\", {\n        get: function () {\n            return this._resolvedErrorMessage;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryLogMessageImpl.prototype, \"errorAsStack\", {\n        get: function () {\n            return this._errorAsStack;\n        },\n        set: function (stack) {\n            this._errorAsStack = stack;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CategoryLogMessageImpl.prototype.isReady = function () {\n        return this._ready;\n    };\n    CategoryLogMessageImpl.prototype.setReady = function (value) {\n        this._ready = value;\n    };\n    Object.defineProperty(CategoryLogMessageImpl.prototype, \"resolvedErrorMessage\", {\n        get: function () {\n            return this._resolvedErrorMessage;\n        },\n        set: function (value) {\n            this._resolvedErrorMessage = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CategoryLogMessageImpl;\n}());\n/**\n * Abstract category logger, use as your base class for new type of loggers (it\n * saves you a lot of work) and override doLog(CategoryLogMessage). The message argument\n * provides full access to anything related to the logging event.\n * If you just want the standard line of logging, call: this.createDefaultLogMessage(msg) on\n * this class which will return you the formatted log message as string (e.g. the\n * default loggers all use this).\n */\nvar AbstractCategoryLogger = (function () {\n    function AbstractCategoryLogger(rootCategory, runtimeSettings) {\n        this.allMessages = new DataStructures_1.LinkedList();\n        this.rootCategory = rootCategory;\n        this.runtimeSettings = runtimeSettings;\n    }\n    AbstractCategoryLogger.prototype.trace = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this._log.apply(this, [LoggerOptions_1.LogLevel.Trace, msg, null, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.debug = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this._log.apply(this, [LoggerOptions_1.LogLevel.Debug, msg, null, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.info = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this._log.apply(this, [LoggerOptions_1.LogLevel.Info, msg, null, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.warn = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this._log.apply(this, [LoggerOptions_1.LogLevel.Warn, msg, null, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.error = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        this._log.apply(this, [LoggerOptions_1.LogLevel.Error, msg, error, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.fatal = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        this._log.apply(this, [LoggerOptions_1.LogLevel.Fatal, msg, error, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.resolved = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        this._log.apply(this, [LoggerOptions_1.LogLevel.Error, msg, error, true].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.log = function (level, msg, error) {\n        var categories = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            categories[_i - 3] = arguments[_i];\n        }\n        this._log.apply(this, [level, msg, error, false].concat(categories));\n    };\n    AbstractCategoryLogger.prototype.getRootCategory = function () {\n        return this.rootCategory;\n    };\n    AbstractCategoryLogger.prototype.createDefaultLogMessage = function (msg) {\n        return MessageUtils_1.MessageFormatUtils.renderDefaultMessage(msg, true);\n    };\n    /**\n     * Return optional message formatter. All LoggerTypes (except custom) will see if\n     * they have this, and if so use it to log.\n     * @returns {((message:CategoryLogMessage)=>string)|null}\n     */\n    AbstractCategoryLogger.prototype._getMessageFormatter = function () {\n        var categorySettings = this.runtimeSettings.getCategorySettings(this.rootCategory);\n        // Should not happen but make ts happy\n        if (categorySettings === null) {\n            throw new Error(\"Did not find CategorySettings for rootCategory: \" + this.rootCategory.name);\n        }\n        return categorySettings.formatterLogMessage;\n    };\n    AbstractCategoryLogger.prototype._log = function (level, msg, error, resolved) {\n        if (error === void 0) { error = null; }\n        if (resolved === void 0) { resolved = false; }\n        var categories = [];\n        for (var _i = 4; _i < arguments.length; _i++) {\n            categories[_i - 4] = arguments[_i];\n        }\n        // this._logInternal(level, () => msg, () => error, resolved, ...categories);\n        var functionMessage = function () {\n            if (typeof msg === \"function\") {\n                return msg();\n            }\n            return msg;\n        };\n        var functionError = function () {\n            if (typeof error === \"function\") {\n                return error();\n            }\n            return error;\n        };\n        this._logInternal.apply(this, [level, functionMessage, functionError, resolved].concat(categories));\n    };\n    AbstractCategoryLogger.prototype._logInternal = function (level, msg, error, resolved) {\n        var _this = this;\n        var categories = [];\n        for (var _i = 4; _i < arguments.length; _i++) {\n            categories[_i - 4] = arguments[_i];\n        }\n        var logCategories = [this.rootCategory];\n        // Log root category by default if none present\n        if (typeof categories !== \"undefined\" && categories.length > 0) {\n            logCategories = logCategories.concat(categories.filter(function (c) { return c !== _this.rootCategory; }));\n        }\n        var _loop_1 = function (i) {\n            var category = logCategories[i];\n            if (category === null) {\n                throw new Error(\"Cannot have a null element within categories, at index=\" + i);\n            }\n            var settings = this_1.runtimeSettings.getCategorySettings(category);\n            if (settings === null) {\n                throw new Error(\"Category with path: \" + category.getCategoryPath() + \" is not registered with this logger, maybe \" +\n                    \"you registered it with a different root logger?\");\n            }\n            if (settings.logLevel <= level) {\n                var actualError = error !== null ? error() : null;\n                if (actualError === null) {\n                    var logMessage = new CategoryLogMessageImpl(msg(), actualError, logCategories, new Date(), level, settings.logFormat, true);\n                    logMessage.resolvedErrorMessage = resolved;\n                    this_1.allMessages.addTail(logMessage);\n                    this_1.processMessages();\n                }\n                else {\n                    var logMessage_1 = new CategoryLogMessageImpl(msg(), actualError, logCategories, new Date(), level, settings.logFormat, false);\n                    logMessage_1.resolvedErrorMessage = resolved;\n                    this_1.allMessages.addTail(logMessage_1);\n                    MessageUtils_1.MessageFormatUtils.renderError(actualError).then(function (stack) {\n                        logMessage_1.errorAsStack = stack;\n                        logMessage_1.setReady(true);\n                        _this.processMessages();\n                    }).catch(function () {\n                        logMessage_1.errorAsStack = \"<UNKNOWN> unable to get stack.\";\n                        logMessage_1.setReady(true);\n                        _this.processMessages();\n                    });\n                }\n                return \"break\";\n            }\n        };\n        var this_1 = this;\n        // Get the runtime levels for given categories. If their level is lower than given level, we log.\n        // In addition we pass along which category/categories we log this statement for.\n        for (var i = 0; i < logCategories.length; i++) {\n            var state_1 = _loop_1(i);\n            if (state_1 === \"break\")\n                break;\n        }\n    };\n    AbstractCategoryLogger.prototype.processMessages = function () {\n        // Basically we wait until errors are resolved (those messages\n        // may not be ready).\n        var msgs = this.allMessages;\n        if (msgs.getSize() > 0) {\n            do {\n                var msg = msgs.getHead();\n                if (msg != null) {\n                    if (!msg.isReady()) {\n                        break;\n                    }\n                    msgs.removeHead();\n                    this.doLog(msg);\n                }\n            } while (msgs.getSize() > 0);\n        }\n    };\n    return AbstractCategoryLogger;\n}());\nexports.AbstractCategoryLogger = AbstractCategoryLogger;\n//# sourceMappingURL=AbstractCategoryLogger.js.map"]},"metadata":{},"sourceType":"script"}