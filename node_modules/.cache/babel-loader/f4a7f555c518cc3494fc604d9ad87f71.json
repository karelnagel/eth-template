{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar LinkedNode = function () {\n  function LinkedNode(value) {\n    this._previous = null;\n    this._next = null;\n    this._value = value;\n  }\n\n  Object.defineProperty(LinkedNode.prototype, \"previous\", {\n    get: function () {\n      return this._previous;\n    },\n    set: function (value) {\n      this._previous = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LinkedNode.prototype, \"next\", {\n    get: function () {\n      return this._next;\n    },\n    set: function (value) {\n      this._next = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LinkedNode.prototype, \"value\", {\n    get: function () {\n      return this._value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return LinkedNode;\n}();\n/**\n * Double linkedlist implementation.\n */\n\n\nvar LinkedList = function () {\n  function LinkedList() {\n    this.head = null;\n    this.size = 0;\n  }\n\n  LinkedList.prototype.addHead = function (value) {\n    if (!this.createHeadIfNeeded(value)) {\n      if (this.head != null) {\n        var nextNode = this.head.next;\n        var newHeadNode = new LinkedNode(value);\n\n        if (nextNode != null) {\n          nextNode.previous = newHeadNode;\n          newHeadNode.next = nextNode;\n        }\n\n        this.head = newHeadNode;\n      } else {\n        throw new Error(\"This should never happen, list implementation broken\");\n      }\n    }\n\n    this.size++;\n  };\n\n  LinkedList.prototype.addTail = function (value) {\n    if (!this.createHeadIfNeeded(value)) {\n      var oldTailNode = this.getTailNode();\n\n      if (oldTailNode != null) {\n        var newTailNode = new LinkedNode(value);\n        oldTailNode.next = newTailNode;\n        newTailNode.previous = oldTailNode;\n      } else {\n        throw new Error(\"List implementation broken\");\n      }\n    }\n\n    this.size++;\n  };\n\n  LinkedList.prototype.clear = function () {\n    this.head = null;\n    this.size = 0;\n  };\n\n  LinkedList.prototype.getHead = function () {\n    if (this.head != null) {\n      return this.head.value;\n    }\n\n    return null;\n  };\n\n  LinkedList.prototype.removeHead = function () {\n    if (this.head != null) {\n      var oldHead = this.head;\n      var value = oldHead.value;\n      this.head = oldHead.next;\n      this.size--;\n      return value;\n    }\n\n    return null;\n  };\n\n  LinkedList.prototype.getTail = function () {\n    var node = this.getTailNode();\n\n    if (node != null) {\n      return node.value;\n    }\n\n    return null;\n  };\n\n  LinkedList.prototype.removeTail = function () {\n    var node = this.getTailNode();\n\n    if (node != null) {\n      if (node === this.head) {\n        this.head = null;\n      } else {\n        var previousNode = node.previous;\n\n        if (previousNode != null) {\n          previousNode.next = null;\n        } else {\n          throw new Error(\"List implementation is broken\");\n        }\n      }\n\n      this.size--;\n      return node.value;\n    }\n\n    return null;\n  };\n\n  LinkedList.prototype.getSize = function () {\n    return this.size;\n  };\n\n  LinkedList.prototype.filter = function (f) {\n    var recurse = function (fn, node, values) {\n      if (fn(node.value)) {\n        values.push(node.value);\n      }\n\n      var nextNode = node.next;\n\n      if (nextNode != null) {\n        recurse(fn, nextNode, values);\n      }\n    };\n\n    var result = [];\n    var currentNode = this.head;\n\n    if (currentNode != null) {\n      recurse(f, currentNode, result);\n    }\n\n    return result;\n  };\n\n  LinkedList.prototype.createHeadIfNeeded = function (value) {\n    if (this.head == null) {\n      this.head = new LinkedNode(value);\n      return true;\n    }\n\n    return false;\n  };\n\n  LinkedList.prototype.getTailNode = function () {\n    if (this.head == null) {\n      return null;\n    }\n\n    var node = this.head;\n\n    while (node.next != null) {\n      node = node.next;\n    }\n\n    return node;\n  };\n\n  return LinkedList;\n}();\n\nexports.LinkedList = LinkedList;\n/**\n * Map implementation keyed by string (always).\n */\n\nvar SimpleMap = function () {\n  function SimpleMap() {\n    this.array = {};\n  }\n\n  SimpleMap.prototype.put = function (key, value) {\n    this.array[key] = value;\n  };\n\n  SimpleMap.prototype.get = function (key) {\n    return this.array[key];\n  };\n\n  SimpleMap.prototype.exists = function (key) {\n    var value = this.array[key];\n    return typeof value !== \"undefined\";\n  };\n\n  SimpleMap.prototype.remove = function (key) {\n    var value = this.array[key];\n\n    if (typeof value !== \"undefined\") {\n      delete this.array[key];\n    }\n\n    return value;\n  };\n\n  SimpleMap.prototype.keys = function () {\n    var keys = [];\n\n    for (var key in this.array) {\n      // To prevent random stuff to appear\n      if (this.array.hasOwnProperty(key)) {\n        keys.push(key);\n      }\n    }\n\n    return keys;\n  };\n\n  SimpleMap.prototype.values = function () {\n    var values = [];\n\n    for (var key in this.array) {\n      // To prevent random stuff to appear\n      if (this.array.hasOwnProperty(key)) {\n        values.push(this.get(key));\n      }\n    }\n\n    return values;\n  };\n\n  SimpleMap.prototype.size = function () {\n    return this.keys().length;\n  };\n\n  SimpleMap.prototype.isEmpty = function () {\n    return this.size() === 0;\n  };\n\n  SimpleMap.prototype.clear = function () {\n    this.array = {};\n  };\n\n  SimpleMap.prototype.forEach = function (cbFunction) {\n    var count = 0;\n\n    for (var key in this.array) {\n      // To prevent random stuff to appear\n      if (this.array.hasOwnProperty(key)) {\n        var value = this.array[key];\n        cbFunction(key, value, count);\n        count++;\n      }\n    }\n  };\n\n  SimpleMap.prototype.forEachValue = function (cbFunction) {\n    var count = 0;\n\n    for (var key in this.array) {\n      // To prevent random stuff to appear\n      if (this.array.hasOwnProperty(key)) {\n        var value = this.array[key];\n        cbFunction(value, count);\n        count++;\n      }\n    }\n  };\n\n  return SimpleMap;\n}();\n\nexports.SimpleMap = SimpleMap;\n/**\n * Tuple to hold two values.\n */\n\nvar TuplePair = function () {\n  function TuplePair(x, y) {\n    this._x = x;\n    this._y = y;\n  }\n\n  Object.defineProperty(TuplePair.prototype, \"x\", {\n    get: function () {\n      return this._x;\n    },\n    set: function (value) {\n      this._x = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(TuplePair.prototype, \"y\", {\n    get: function () {\n      return this._y;\n    },\n    set: function (value) {\n      this._y = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return TuplePair;\n}();\n\nexports.TuplePair = TuplePair;\n/**\n * Utility class to build up a string.\n */\n\nvar StringBuilder = function () {\n  function StringBuilder() {\n    this.data = [];\n  }\n\n  StringBuilder.prototype.append = function (line) {\n    if (line === undefined || line == null) {\n      throw new Error(\"String must be set, cannot append null or undefined\");\n    }\n\n    this.data.push(line);\n    return this;\n  };\n\n  StringBuilder.prototype.appendLine = function (line) {\n    this.data.push(line + \"\\n\");\n    return this;\n  };\n\n  StringBuilder.prototype.isEmpty = function () {\n    return this.data.length === 0;\n  };\n\n  StringBuilder.prototype.clear = function () {\n    this.data = [];\n  };\n\n  StringBuilder.prototype.toString = function (separator) {\n    if (separator === void 0) {\n      separator = \"\";\n    }\n\n    return this.data.join(separator);\n  };\n\n  return StringBuilder;\n}();\n\nexports.StringBuilder = StringBuilder;","map":{"version":3,"sources":["../../../src/logging/utils/DataStructures.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LinkedNode = (function () {\n    function LinkedNode(value) {\n        this._previous = null;\n        this._next = null;\n        this._value = value;\n    }\n    Object.defineProperty(LinkedNode.prototype, \"previous\", {\n        get: function () {\n            return this._previous;\n        },\n        set: function (value) {\n            this._previous = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LinkedNode.prototype, \"next\", {\n        get: function () {\n            return this._next;\n        },\n        set: function (value) {\n            this._next = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LinkedNode.prototype, \"value\", {\n        get: function () {\n            return this._value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LinkedNode;\n}());\n/**\n * Double linkedlist implementation.\n */\nvar LinkedList = (function () {\n    function LinkedList() {\n        this.head = null;\n        this.size = 0;\n    }\n    LinkedList.prototype.addHead = function (value) {\n        if (!this.createHeadIfNeeded(value)) {\n            if (this.head != null) {\n                var nextNode = this.head.next;\n                var newHeadNode = new LinkedNode(value);\n                if (nextNode != null) {\n                    nextNode.previous = newHeadNode;\n                    newHeadNode.next = nextNode;\n                }\n                this.head = newHeadNode;\n            }\n            else {\n                throw new Error(\"This should never happen, list implementation broken\");\n            }\n        }\n        this.size++;\n    };\n    LinkedList.prototype.addTail = function (value) {\n        if (!this.createHeadIfNeeded(value)) {\n            var oldTailNode = this.getTailNode();\n            if (oldTailNode != null) {\n                var newTailNode = new LinkedNode(value);\n                oldTailNode.next = newTailNode;\n                newTailNode.previous = oldTailNode;\n            }\n            else {\n                throw new Error(\"List implementation broken\");\n            }\n        }\n        this.size++;\n    };\n    LinkedList.prototype.clear = function () {\n        this.head = null;\n        this.size = 0;\n    };\n    LinkedList.prototype.getHead = function () {\n        if (this.head != null) {\n            return this.head.value;\n        }\n        return null;\n    };\n    LinkedList.prototype.removeHead = function () {\n        if (this.head != null) {\n            var oldHead = this.head;\n            var value = oldHead.value;\n            this.head = oldHead.next;\n            this.size--;\n            return value;\n        }\n        return null;\n    };\n    LinkedList.prototype.getTail = function () {\n        var node = this.getTailNode();\n        if (node != null) {\n            return node.value;\n        }\n        return null;\n    };\n    LinkedList.prototype.removeTail = function () {\n        var node = this.getTailNode();\n        if (node != null) {\n            if (node === this.head) {\n                this.head = null;\n            }\n            else {\n                var previousNode = node.previous;\n                if (previousNode != null) {\n                    previousNode.next = null;\n                }\n                else {\n                    throw new Error(\"List implementation is broken\");\n                }\n            }\n            this.size--;\n            return node.value;\n        }\n        return null;\n    };\n    LinkedList.prototype.getSize = function () {\n        return this.size;\n    };\n    LinkedList.prototype.filter = function (f) {\n        var recurse = function (fn, node, values) {\n            if (fn(node.value)) {\n                values.push(node.value);\n            }\n            var nextNode = node.next;\n            if (nextNode != null) {\n                recurse(fn, nextNode, values);\n            }\n        };\n        var result = [];\n        var currentNode = this.head;\n        if (currentNode != null) {\n            recurse(f, currentNode, result);\n        }\n        return result;\n    };\n    LinkedList.prototype.createHeadIfNeeded = function (value) {\n        if (this.head == null) {\n            this.head = new LinkedNode(value);\n            return true;\n        }\n        return false;\n    };\n    LinkedList.prototype.getTailNode = function () {\n        if (this.head == null) {\n            return null;\n        }\n        var node = this.head;\n        while (node.next != null) {\n            node = node.next;\n        }\n        return node;\n    };\n    return LinkedList;\n}());\nexports.LinkedList = LinkedList;\n/**\n * Map implementation keyed by string (always).\n */\nvar SimpleMap = (function () {\n    function SimpleMap() {\n        this.array = {};\n    }\n    SimpleMap.prototype.put = function (key, value) {\n        this.array[key] = value;\n    };\n    SimpleMap.prototype.get = function (key) {\n        return this.array[key];\n    };\n    SimpleMap.prototype.exists = function (key) {\n        var value = this.array[key];\n        return (typeof value !== \"undefined\");\n    };\n    SimpleMap.prototype.remove = function (key) {\n        var value = this.array[key];\n        if (typeof value !== \"undefined\") {\n            delete this.array[key];\n        }\n        return value;\n    };\n    SimpleMap.prototype.keys = function () {\n        var keys = [];\n        for (var key in this.array) {\n            // To prevent random stuff to appear\n            if (this.array.hasOwnProperty(key)) {\n                keys.push(key);\n            }\n        }\n        return keys;\n    };\n    SimpleMap.prototype.values = function () {\n        var values = [];\n        for (var key in this.array) {\n            // To prevent random stuff to appear\n            if (this.array.hasOwnProperty(key)) {\n                values.push(this.get(key));\n            }\n        }\n        return values;\n    };\n    SimpleMap.prototype.size = function () {\n        return this.keys().length;\n    };\n    SimpleMap.prototype.isEmpty = function () {\n        return this.size() === 0;\n    };\n    SimpleMap.prototype.clear = function () {\n        this.array = {};\n    };\n    SimpleMap.prototype.forEach = function (cbFunction) {\n        var count = 0;\n        for (var key in this.array) {\n            // To prevent random stuff to appear\n            if (this.array.hasOwnProperty(key)) {\n                var value = this.array[key];\n                cbFunction(key, value, count);\n                count++;\n            }\n        }\n    };\n    SimpleMap.prototype.forEachValue = function (cbFunction) {\n        var count = 0;\n        for (var key in this.array) {\n            // To prevent random stuff to appear\n            if (this.array.hasOwnProperty(key)) {\n                var value = this.array[key];\n                cbFunction(value, count);\n                count++;\n            }\n        }\n    };\n    return SimpleMap;\n}());\nexports.SimpleMap = SimpleMap;\n/**\n * Tuple to hold two values.\n */\nvar TuplePair = (function () {\n    function TuplePair(x, y) {\n        this._x = x;\n        this._y = y;\n    }\n    Object.defineProperty(TuplePair.prototype, \"x\", {\n        get: function () {\n            return this._x;\n        },\n        set: function (value) {\n            this._x = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TuplePair.prototype, \"y\", {\n        get: function () {\n            return this._y;\n        },\n        set: function (value) {\n            this._y = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return TuplePair;\n}());\nexports.TuplePair = TuplePair;\n/**\n * Utility class to build up a string.\n */\nvar StringBuilder = (function () {\n    function StringBuilder() {\n        this.data = [];\n    }\n    StringBuilder.prototype.append = function (line) {\n        if (line === undefined || line == null) {\n            throw new Error(\"String must be set, cannot append null or undefined\");\n        }\n        this.data.push(line);\n        return this;\n    };\n    StringBuilder.prototype.appendLine = function (line) {\n        this.data.push(line + \"\\n\");\n        return this;\n    };\n    StringBuilder.prototype.isEmpty = function () {\n        return this.data.length === 0;\n    };\n    StringBuilder.prototype.clear = function () {\n        this.data = [];\n    };\n    StringBuilder.prototype.toString = function (separator) {\n        if (separator === void 0) { separator = \"\"; }\n        return this.data.join(separator);\n    };\n    return StringBuilder;\n}());\nexports.StringBuilder = StringBuilder;\n//# sourceMappingURL=DataStructures.js.map"]},"metadata":{},"sourceType":"script"}