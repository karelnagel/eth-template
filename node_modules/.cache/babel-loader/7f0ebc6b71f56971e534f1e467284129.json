{"ast":null,"code":"'use strict';\n\nvar eventemitter3 = require('eventemitter3');\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n} // A type of promise-like that resolves synchronously and supports only one observer\n\n\nconst _iteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\")) : \"@@iterator\";\n\nconst _asyncIteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\")) : \"@@asyncIterator\"; // Asynchronously call a function and send errors to recovery continuation\n\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n}\n\nvar DEFAULT_TARGET_ORIGIN = '*'; // By default timeout is 60 seconds\n\nvar DEFAULT_TIMEOUT_MILLISECONDS = 60000;\nvar JSON_RPC_VERSION = '2.0';\n/**\r\n * We return a random number between the 0 and the maximum safe integer so that we always generate a unique identifier,\r\n * across all communication channels.\r\n */\n\nfunction getUniqueId() {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n}\n/**\r\n * Represents an error in an RPC returned from the event source. Always contains a code and a reason. The message\r\n * is constructed from both.\r\n */\n\n\nvar RpcError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(RpcError, _Error);\n\n  function RpcError(code, reason) {\n    var _this5;\n\n    _this5 = _Error.call(this, code + \": \" + reason) || this;\n    _this5.isRpcError = true;\n    _this5.code = code;\n    _this5.reason = reason;\n    return _this5;\n  }\n\n  return RpcError;\n}(_wrapNativeSuper(Error));\n/**\r\n * This is the primary artifact of this library.\r\n */\n\n\nvar IFrameEthereumProvider = /*#__PURE__*/function (_EventEmitter) {\n  _inheritsLoose(IFrameEthereumProvider, _EventEmitter);\n\n  function IFrameEthereumProvider(_temp2) {\n    var _this6;\n\n    var _ref = _temp2 === void 0 ? {} : _temp2,\n        _ref$targetOrigin = _ref.targetOrigin,\n        targetOrigin = _ref$targetOrigin === void 0 ? DEFAULT_TARGET_ORIGIN : _ref$targetOrigin,\n        _ref$timeoutMilliseco = _ref.timeoutMilliseconds,\n        timeoutMilliseconds = _ref$timeoutMilliseco === void 0 ? DEFAULT_TIMEOUT_MILLISECONDS : _ref$timeoutMilliseco,\n        _ref$eventSource = _ref.eventSource,\n        eventSource = _ref$eventSource === void 0 ? window : _ref$eventSource,\n        _ref$eventTarget = _ref.eventTarget,\n        eventTarget = _ref$eventTarget === void 0 ? window.parent : _ref$eventTarget; // Call super for `this` to be defined\n\n\n    _this6 = _EventEmitter.call(this) || this;\n    _this6.enabled = null;\n    _this6.completers = {};\n    /**\r\n     * Handle a message on the event source.\r\n     * @param event message event that will be processed by the provider\r\n     */\n\n    _this6.handleEventSourceMessage = function (event) {\n      var data = event.data; // No data to parse, skip.\n\n      if (!data) {\n        return;\n      }\n\n      var message = data; // Always expect jsonrpc to be set to '2.0'\n\n      if (message.jsonrpc !== JSON_RPC_VERSION) {\n        return;\n      } // If the message has an ID, it is possibly a response message\n\n\n      if (typeof message.id !== 'undefined' && message.id !== null) {\n        var completer = _this6.completers['' + message.id]; // True if we haven't timed out and this is a response to a message we sent.\n\n        if (completer) {\n          // Handle pending promise\n          if ('error' in message || 'result' in message) {\n            completer.resolve(message);\n          } else {\n            completer.reject(new Error('Response from provider did not have error or result key'));\n          }\n\n          delete _this6.completers[message.id];\n        }\n      } // If the method is a request from the parent window, it is likely a subscription.\n\n\n      if ('method' in message) {\n        switch (message.method) {\n          case 'notification':\n            _this6.emitNotification(message.params);\n\n            break;\n\n          case 'connect':\n            _this6.emitConnect();\n\n            break;\n\n          case 'close':\n            _this6.emitClose(message.params[0], message.params[1]);\n\n            break;\n\n          case 'chainChanged':\n            _this6.emitChainChanged(message.params[0]);\n\n            break;\n\n          case 'networkChanged':\n            _this6.emitNetworkChanged(message.params[0]);\n\n            break;\n\n          case 'accountsChanged':\n            _this6.emitAccountsChanged(message.params[0]);\n\n            break;\n        }\n      }\n    };\n\n    _this6.targetOrigin = targetOrigin;\n    _this6.timeoutMilliseconds = timeoutMilliseconds;\n    _this6.eventSource = eventSource;\n    _this6.eventTarget = eventTarget; // Listen for messages from the event source.\n\n    _this6.eventSource.addEventListener('message', _this6.handleEventSourceMessage);\n\n    return _this6;\n  }\n  /**\r\n   * Differentiate this provider from other providers by providing an isIFrame property that always returns true.\r\n   */\n\n\n  var _proto = IFrameEthereumProvider.prototype;\n  /**\r\n   * Helper method that handles transport and request wrapping\r\n   * @param method method to execute\r\n   * @param params params to pass the method\r\n   */\n\n  _proto.execute = function execute(method, params) {\n    try {\n      var _this7 = this;\n\n      var id = getUniqueId();\n\n      var payload = _extends({\n        jsonrpc: JSON_RPC_VERSION,\n        id: id,\n        method: method\n      }, typeof params === 'undefined' ? null : {\n        params: params\n      });\n\n      var promise = new Promise(function (resolve, reject) {\n        return _this7.completers[id] = {\n          resolve: resolve,\n          reject: reject\n        };\n      }); // Send the JSON RPC to the event source.\n\n      _this7.eventTarget.postMessage(payload, _this7.targetOrigin); // Delete the completer within the timeout and reject the promise.\n\n\n      setTimeout(function () {\n        if (_this7.completers[id]) {\n          _this7.completers[id].reject(new Error(\"RPC ID \\\"\" + id + \"\\\" timed out after \" + _this7.timeoutMilliseconds + \" milliseconds\"));\n\n          delete _this7.completers[id];\n        }\n      }, _this7.timeoutMilliseconds);\n      return promise;\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  /**\r\n   * Send the JSON RPC and return the result.\r\n   * @param method method to send to the parent provider\r\n   * @param params parameters to send\r\n   */\n  ;\n\n  _proto.send = function send(method, params) {\n    try {\n      var _this8 = this;\n\n      return Promise.resolve(_this8.execute(method, params)).then(function (response) {\n        if ('error' in response) {\n          throw new RpcError(response.error.code, response.error.message);\n        } else {\n          return response.result;\n        }\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  /**\r\n   * Request the parent window to enable access to the user's web3 provider. Return accounts list immediately if already enabled.\r\n   */\n  ;\n\n  _proto.enable = function enable() {\n    try {\n      var _this9 = this;\n\n      if (_this9.enabled === null) {\n        var promise = _this9.enabled = _this9.send('enable')[\"catch\"](function (error) {\n          // Clear this.enabled if it's this promise so we try again next call.\n          // this.enabled might be set from elsewhere if, e.g. the accounts changed event is emitted\n          if (_this9.enabled === promise) {\n            _this9.enabled = null;\n          } // Rethrow the error.\n\n\n          throw error;\n        });\n      }\n\n      return _this9.enabled;\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  /**\r\n   * Backwards compatibility method for web3.\r\n   * @param payload payload to send to the provider\r\n   * @param callback callback to be called when the provider resolves\r\n   */\n  ;\n\n  _proto.sendAsync = function sendAsync(payload, callback) {\n    try {\n      var _this10 = this;\n\n      var _temp3 = _catch(function () {\n        return Promise.resolve(_this10.execute(payload.method, payload.params)).then(function (result) {\n          callback(null, result);\n        });\n      }, function (error) {\n        callback(error, null);\n      });\n\n      return _temp3 && _temp3.then ? _temp3.then(function () {}) : void 0;\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.emitNotification = function emitNotification(result) {\n    this.emit('notification', result);\n  };\n\n  _proto.emitConnect = function emitConnect() {\n    // If the provider isn't enabled but it emits a connect event, assume that it's enabled and initialize\n    // with an empty list of accounts.\n    if (this.enabled === null) {\n      this.enabled = Promise.resolve([]);\n    }\n\n    this.emit('connect');\n  };\n\n  _proto.emitClose = function emitClose(code, reason) {\n    this.emit('close', code, reason);\n  };\n\n  _proto.emitChainChanged = function emitChainChanged(chainId) {\n    this.emit('chainChanged', chainId);\n  };\n\n  _proto.emitNetworkChanged = function emitNetworkChanged(networkId) {\n    this.emit('networkChanged', networkId);\n  };\n\n  _proto.emitAccountsChanged = function emitAccountsChanged(accounts) {\n    this.enabled = Promise.resolve(accounts);\n    this.emit('accountsChanged', accounts);\n  };\n\n  _createClass(IFrameEthereumProvider, [{\n    key: \"isIFrame\",\n    get: function get() {\n      return true;\n    }\n    /**\r\n     * Always return this for currentProvider.\r\n     */\n\n  }, {\n    key: \"currentProvider\",\n    get: function get() {\n      return this;\n    }\n  }]);\n\n  return IFrameEthereumProvider;\n}(eventemitter3.EventEmitter);\n\nexports.IFrameEthereumProvider = IFrameEthereumProvider;\nexports.RpcError = RpcError;","map":{"version":3,"sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/index.ts"],"names":["DEFAULT_TARGET_ORIGIN","DEFAULT_TIMEOUT_MILLISECONDS","JSON_RPC_VERSION","Math","Number","RpcError","code","IFrameEthereumProvider","EventEmitter","targetOrigin","timeoutMilliseconds","eventSource","window","eventTarget","parent","id","getUniqueId","payload","jsonrpc","method","params","promise","resolve","reject","setTimeout","response","callback","error","data","event","message","completer","emitNotification","emitConnect","Promise","emitClose","emitChainChanged","emitNetworkChanged","emitAccountsChanged"],"mappings":"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","sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && !check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import { EventEmitter } from 'eventemitter3';\n\n// By default post to any origin\nconst DEFAULT_TARGET_ORIGIN = '*';\n// By default timeout is 60 seconds\nconst DEFAULT_TIMEOUT_MILLISECONDS = 60000;\n\nconst JSON_RPC_VERSION = '2.0';\n\n// The interface for the source of the events, typically the window.\nexport interface MinimalEventSourceInterface {\n  addEventListener(\n    eventType: 'message',\n    handler: (message: MessageEvent) => void\n  ): void;\n}\n\n// The interface for the target of our events, typically the parent window.\nexport interface MinimalEventTargetInterface {\n  postMessage(message: any, targetOrigin?: string): void;\n}\n\n/**\n * Options for constructing the iframe ethereum provider.\n */\ninterface IFrameEthereumProviderOptions {\n  // The origin to communicate with. Default '*'\n  targetOrigin?: string;\n  // How long to time out waiting for responses. Default 60 seconds.\n  timeoutMilliseconds?: number;\n\n  // The event source. By default we use the window. This can be mocked for tests, or it can wrap\n  // a different interface, e.g. workers.\n  eventSource?: MinimalEventSourceInterface;\n\n  // The event target. By default we use the window parent. This can be mocked for tests, or it can wrap\n  // a different interface, e.g. workers.\n  eventTarget?: MinimalEventTargetInterface;\n}\n\n/**\n * This is what we store in the state to keep track of pending promises.\n */\ninterface PromiseCompleter<TResult, TErrorData> {\n  // A response was received (either error or result response).\n  resolve(\n    result:\n      | JsonRpcSucessfulResponseMessage<TResult>\n      | JsonRpcErrorResponseMessage<TErrorData>\n  ): void;\n\n  // An error with executing the request was encountered.\n  reject(error: Error): void;\n}\n\ntype MessageId = number | string | null;\n\ninterface JsonRpcRequestMessage<TParams = any> {\n  jsonrpc: '2.0';\n  // Optional in the request.\n  id?: MessageId;\n  method: string;\n  params?: TParams;\n}\n\ninterface BaseJsonRpcResponseMessage {\n  // Required but null if not identified in request\n  id: MessageId;\n  jsonrpc: '2.0';\n}\n\ninterface JsonRpcSucessfulResponseMessage<TResult = any>\n  extends BaseJsonRpcResponseMessage {\n  result: TResult;\n}\n\ninterface JsonRpcError<TData = any> {\n  code: number;\n  message: string;\n  data?: TData;\n}\n\ninterface JsonRpcErrorResponseMessage<TErrorData = any>\n  extends BaseJsonRpcResponseMessage {\n  error: JsonRpcError<TErrorData>;\n}\n\ntype ReceivedMessageType =\n  | JsonRpcRequestMessage\n  | JsonRpcErrorResponseMessage\n  | JsonRpcSucessfulResponseMessage;\n\n/**\n * We return a random number between the 0 and the maximum safe integer so that we always generate a unique identifier,\n * across all communication channels.\n */\nfunction getUniqueId(): number {\n  return Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n}\n\nexport type IFrameEthereumProviderEventTypes =\n  | 'connect'\n  | 'close'\n  | 'notification'\n  | 'chainChanged'\n  | 'networkChanged'\n  | 'accountsChanged';\n\n/**\n * Export the type information about the different events that are emitted.\n */\nexport interface IFrameEthereumProvider {\n  on(event: 'connect', handler: () => void): this;\n\n  on(event: 'close', handler: (code: number, reason: string) => void): this;\n\n  on(event: 'notification', handler: (result: any) => void): this;\n\n  on(event: 'chainChanged', handler: (chainId: string) => void): this;\n\n  on(event: 'networkChanged', handler: (networkId: string) => void): this;\n\n  on(event: 'accountsChanged', handler: (accounts: string[]) => void): this;\n}\n\n/**\n * Represents an error in an RPC returned from the event source. Always contains a code and a reason. The message\n * is constructed from both.\n */\nexport class RpcError extends Error {\n  public readonly isRpcError: true = true;\n\n  public readonly code: number;\n  public readonly reason: string;\n\n  constructor(code: number, reason: string) {\n    super(`${code}: ${reason}`);\n\n    this.code = code;\n    this.reason = reason;\n  }\n}\n\n/**\n * This is the primary artifact of this library.\n */\nexport class IFrameEthereumProvider extends EventEmitter<\n  IFrameEthereumProviderEventTypes\n> {\n  /**\n   * Differentiate this provider from other providers by providing an isIFrame property that always returns true.\n   */\n  public get isIFrame(): true {\n    return true;\n  }\n\n  /**\n   * Always return this for currentProvider.\n   */\n  public get currentProvider(): IFrameEthereumProvider {\n    return this;\n  }\n\n  private enabled: Promise<string[]> | null = null;\n  private readonly targetOrigin: string;\n  private readonly timeoutMilliseconds: number;\n  private readonly eventSource: MinimalEventSourceInterface;\n  private readonly eventTarget: MinimalEventTargetInterface;\n  private readonly completers: {\n    [id: string]: PromiseCompleter<any, any>;\n  } = {};\n\n  public constructor({\n    targetOrigin = DEFAULT_TARGET_ORIGIN,\n    timeoutMilliseconds = DEFAULT_TIMEOUT_MILLISECONDS,\n    eventSource = window,\n    eventTarget = window.parent,\n  }: IFrameEthereumProviderOptions = {}) {\n    // Call super for `this` to be defined\n    super();\n\n    this.targetOrigin = targetOrigin;\n    this.timeoutMilliseconds = timeoutMilliseconds;\n    this.eventSource = eventSource;\n    this.eventTarget = eventTarget;\n\n    // Listen for messages from the event source.\n    this.eventSource.addEventListener('message', this.handleEventSourceMessage);\n  }\n\n  /**\n   * Helper method that handles transport and request wrapping\n   * @param method method to execute\n   * @param params params to pass the method\n   */\n  private async execute<TParams, TResult, TErrorData>(\n    method: string,\n    params?: TParams\n  ): Promise<\n    | JsonRpcSucessfulResponseMessage<TResult>\n    | JsonRpcErrorResponseMessage<TErrorData>\n  > {\n    const id = getUniqueId();\n    const payload: JsonRpcRequestMessage = {\n      jsonrpc: JSON_RPC_VERSION,\n      id,\n      method,\n      ...(typeof params === 'undefined' ? null : { params }),\n    };\n\n    const promise = new Promise<\n      | JsonRpcSucessfulResponseMessage<TResult>\n      | JsonRpcErrorResponseMessage<TErrorData>\n    >((resolve, reject) => (this.completers[id] = { resolve, reject }));\n\n    // Send the JSON RPC to the event source.\n    this.eventTarget.postMessage(payload, this.targetOrigin);\n\n    // Delete the completer within the timeout and reject the promise.\n    setTimeout(() => {\n      if (this.completers[id]) {\n        this.completers[id].reject(\n          new Error(\n            `RPC ID \"${id}\" timed out after ${this.timeoutMilliseconds} milliseconds`\n          )\n        );\n        delete this.completers[id];\n      }\n    }, this.timeoutMilliseconds);\n\n    return promise;\n  }\n\n  /**\n   * Send the JSON RPC and return the result.\n   * @param method method to send to the parent provider\n   * @param params parameters to send\n   */\n  public async send<TParams = any[], TResult = any>(\n    method: string,\n    params?: TParams\n  ): Promise<TResult> {\n    const response = await this.execute<TParams, TResult, any>(method, params);\n\n    if ('error' in response) {\n      throw new RpcError(response.error.code, response.error.message);\n    } else {\n      return response.result;\n    }\n  }\n\n  /**\n   * Request the parent window to enable access to the user's web3 provider. Return accounts list immediately if already enabled.\n   */\n  public async enable(): Promise<string[]> {\n    if (this.enabled === null) {\n      const promise = (this.enabled = this.send('enable').catch(error => {\n        // Clear this.enabled if it's this promise so we try again next call.\n        // this.enabled might be set from elsewhere if, e.g. the accounts changed event is emitted\n        if (this.enabled === promise) {\n          this.enabled = null;\n        }\n        // Rethrow the error.\n        throw error;\n      }));\n    }\n\n    return this.enabled;\n  }\n\n  /**\n   * Backwards compatibility method for web3.\n   * @param payload payload to send to the provider\n   * @param callback callback to be called when the provider resolves\n   */\n  public async sendAsync(\n    payload: { method: string; params?: any[] },\n    callback: (\n      error: string | null,\n      result: { method: string; params?: any[]; result: any } | any\n    ) => void\n  ): Promise<void> {\n    try {\n      const result = await this.execute(payload.method, payload.params);\n\n      callback(null, result);\n    } catch (error) {\n      callback(error, null);\n    }\n  }\n\n  /**\n   * Handle a message on the event source.\n   * @param event message event that will be processed by the provider\n   */\n  private handleEventSourceMessage = (event: MessageEvent) => {\n    const data = event.data;\n\n    // No data to parse, skip.\n    if (!data) {\n      return;\n    }\n\n    const message = data as ReceivedMessageType;\n\n    // Always expect jsonrpc to be set to '2.0'\n    if (message.jsonrpc !== JSON_RPC_VERSION) {\n      return;\n    }\n\n    // If the message has an ID, it is possibly a response message\n    if (typeof message.id !== 'undefined' && message.id !== null) {\n      const completer = this.completers['' + message.id];\n\n      // True if we haven't timed out and this is a response to a message we sent.\n      if (completer) {\n        // Handle pending promise\n        if ('error' in message || 'result' in message) {\n          completer.resolve(message);\n        } else {\n          completer.reject(\n            new Error('Response from provider did not have error or result key')\n          );\n        }\n\n        delete this.completers[message.id];\n      }\n    }\n\n    // If the method is a request from the parent window, it is likely a subscription.\n    if ('method' in message) {\n      switch (message.method) {\n        case 'notification':\n          this.emitNotification(message.params);\n          break;\n\n        case 'connect':\n          this.emitConnect();\n          break;\n\n        case 'close':\n          this.emitClose(message.params[0], message.params[1]);\n          break;\n\n        case 'chainChanged':\n          this.emitChainChanged(message.params[0]);\n          break;\n\n        case 'networkChanged':\n          this.emitNetworkChanged(message.params[0]);\n          break;\n\n        case 'accountsChanged':\n          this.emitAccountsChanged(message.params[0]);\n          break;\n      }\n    }\n  };\n\n  private emitNotification(result: any) {\n    this.emit('notification', result);\n  }\n\n  private emitConnect() {\n    // If the provider isn't enabled but it emits a connect event, assume that it's enabled and initialize\n    // with an empty list of accounts.\n    if (this.enabled === null) {\n      this.enabled = Promise.resolve([]);\n    }\n    this.emit('connect');\n  }\n\n  private emitClose(code: number, reason: string) {\n    this.emit('close', code, reason);\n  }\n\n  private emitChainChanged(chainId: string) {\n    this.emit('chainChanged', chainId);\n  }\n\n  private emitNetworkChanged(networkId: string) {\n    this.emit('networkChanged', networkId);\n  }\n\n  private emitAccountsChanged(accounts: string[]) {\n    this.enabled = Promise.resolve(accounts);\n    this.emit('accountsChanged', accounts);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}