{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar LoggerOptions_1 = require(\"../log/LoggerOptions\");\n\nvar LFService_1 = require(\"../log/standard/LFService\");\n\nvar DataStructures_1 = require(\"../utils/DataStructures\");\n\nvar LoggerControlImpl = function () {\n  function LoggerControlImpl() {}\n\n  LoggerControlImpl.prototype.help = function () {\n    /* tslint:disable:no-console */\n    console.log(LoggerControlImpl._help);\n    /* tslint:enable:no-console */\n  };\n\n  LoggerControlImpl.prototype.listFactories = function () {\n    var rtSettingsFactories = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\n\n    var result = new DataStructures_1.StringBuilder();\n    result.appendLine(\"Registered LoggerFactories (index / name)\");\n\n    for (var i = 0; i < rtSettingsFactories.length; i++) {\n      var rtSettingsFactory = rtSettingsFactories[i];\n      result.append(\"  \" + i).append(\": \" + rtSettingsFactory.getName() + \"\\n\");\n    }\n    /* tslint:disable:no-console */\n\n\n    console.log(result.toString());\n    /* tslint:enable:no-console */\n  };\n\n  LoggerControlImpl.prototype.showSettings = function (id) {\n    if (id === void 0) {\n      id = \"all\";\n    }\n\n    var result = [];\n\n    if (id === \"all\") {\n      var idx_1 = 0;\n\n      LoggerControlImpl._getRuntimeSettingsLoggerFactories().forEach(function (item) {\n        result.push(new DataStructures_1.TuplePair(idx_1++, item));\n      });\n    } else {\n      var settings = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\n\n      if (id >= 0 && id < settings.length) {\n        result.push(new DataStructures_1.TuplePair(id, settings[id]));\n      } else {\n        throw new Error(\"Requested number: \" + id + \" was not found.\");\n      }\n    }\n\n    for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {\n      var setting = result_1[_i];\n      /* tslint:disable:no-console */\n\n      console.log(\"  LoggerFactory: \" + setting.y.getName() + \" (id=\" + setting.x + \")\");\n      var logGroupRuntimeSettings = setting.y.getLogGroupRuntimeSettings();\n\n      for (var g = 0; g < logGroupRuntimeSettings.length; g++) {\n        var groupSetting = logGroupRuntimeSettings[g];\n        console.log(\"     LogGroup: (id=\" + g + \")\");\n        console.log(\"       RegExp: \" + groupSetting.logGroupRule.regExp.source);\n        console.log(\"       Level: \" + LoggerOptions_1.LogLevel[groupSetting.level].toString());\n        console.log(\"       LoggerType: \" + LoggerOptions_1.LoggerType[groupSetting.loggerType].toString());\n      }\n      /* tslint:enable:no-console */\n\n    }\n  };\n\n  LoggerControlImpl.prototype.reset = function (idFactory) {\n    if (idFactory === void 0) {\n      idFactory = \"all\";\n    }\n\n    var loggerFactoriesSettings = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\n\n    var result = [];\n\n    if (idFactory === \"all\") {\n      result = loggerFactoriesSettings;\n    } else {\n      if (idFactory >= 0 && idFactory < loggerFactoriesSettings.length) {\n        result.push(loggerFactoriesSettings[idFactory]);\n      }\n    }\n\n    result.forEach(function (setting) {\n      /* tslint:disable:no-console */\n      console.log(\"Reset all settings for factory \" + idFactory);\n      /* tslint:enable:no-console */\n\n      var control = new LoggerFactoryControlImpl(setting);\n      control.reset();\n    });\n  };\n\n  LoggerControlImpl.prototype.getLoggerFactoryControl = function (idFactory) {\n    var loggerFactoriesSettings = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\n\n    if (idFactory >= 0 && idFactory < loggerFactoriesSettings.length) {\n      return new LoggerFactoryControlImpl(loggerFactoriesSettings[idFactory]);\n    }\n\n    throw new Error(\"idFactory is invalid (less than 0) or non existing id.\");\n  };\n\n  LoggerControlImpl._getRuntimeSettingsLoggerFactories = function () {\n    return LoggerControlImpl._getSettings().getRuntimeSettingsForLoggerFactories();\n  };\n\n  LoggerControlImpl._getSettings = function () {\n    return LFService_1.LFService.getRuntimeSettings();\n  };\n\n  LoggerControlImpl._help = \"\\n  help(): void\\n    ** Shows this help.\\n\\n  listFactories(): void\\n    ** List all registered LoggerFactories with associated log groups with respective ids (ids can be used to target a factory and/or group).\\n\\n  showSettings(idFactory: number | \\\"all\\\"): void\\n    ** Show log group settings for idFactory (use listFactories to find id for a LoggerFactory). If idFactory is \\\"all\\\" shows all factories.\\n\\n  getLoggerFactoryControl(idFactory: number): LoggerFactoryControl\\n    ** Return LoggerFactoryControl when found for given idFactory or throws Error if invalid or null, get the id by using listFactories()\\n\\n  reset(idFactory: number | \\\"all\\\"): void\\n    ** Resets given factory or all factories back to original values.\\n\";\n  return LoggerControlImpl;\n}();\n\nexports.LoggerControlImpl = LoggerControlImpl;\n\nvar LoggerFactoryControlImpl = function () {\n  function LoggerFactoryControlImpl(settings) {\n    this._settings = settings;\n  }\n\n  LoggerFactoryControlImpl.prototype.help = function () {\n    /* tslint:disable:no-console */\n    console.log(LoggerFactoryControlImpl._help);\n    /* tslint:enable:no-console */\n  };\n\n  LoggerFactoryControlImpl.prototype.example = function () {\n    /* tslint:disable:no-console */\n    console.log(LoggerFactoryControlImpl._example);\n    /* tslint:enable:no-console */\n  };\n\n  LoggerFactoryControlImpl.prototype.showSettings = function (id) {\n    if (id === void 0) {\n      id = \"all\";\n    }\n\n    var result = new DataStructures_1.StringBuilder();\n\n    var logGroupRuntimeSettings = this._settings.getLogGroupRuntimeSettings();\n\n    result.appendLine(\"Registered LogGroups (index / expression)\");\n\n    for (var i = 0; i < logGroupRuntimeSettings.length; i++) {\n      var logGroupRuntimeSetting = logGroupRuntimeSettings[i];\n      result.appendLine(\"  \" + i + \": \" + logGroupRuntimeSetting.logGroupRule.regExp.source + \", logLevel=\" + LoggerOptions_1.LogLevel[logGroupRuntimeSetting.level].toString() + \", showTimestamp=\" + logGroupRuntimeSetting.logFormat.showTimeStamp + \", showLoggerName=\" + logGroupRuntimeSetting.logFormat.showLoggerName + \", format=\" + LoggerOptions_1.DateFormatEnum[logGroupRuntimeSetting.logFormat.dateFormat.formatEnum].toString());\n    }\n    /* tslint:disable:no-console */\n\n\n    console.log(result.toString());\n    /* tslint:enable:no-console */\n  };\n\n  LoggerFactoryControlImpl.prototype.change = function (settings) {\n    var logGroupRuntimeSettings = this._getLogGroupRunTimeSettingsFor(settings.group);\n\n    var logLevel = null;\n    var formatEnum = null;\n    var showLoggerName = null;\n    var showTimestamp = null;\n    var result = null;\n\n    var addResult = function (value) {\n      if (result !== null) {\n        result += \", \";\n      }\n\n      if (result === null) {\n        result = value;\n      } else {\n        result += value;\n      }\n    };\n\n    if (typeof settings.logLevel === \"string\") {\n      logLevel = LoggerOptions_1.LogLevel.fromString(settings.logLevel);\n      addResult(\"logLevel=\" + settings.logLevel);\n    }\n\n    if (typeof settings.logFormat === \"string\") {\n      formatEnum = LoggerOptions_1.DateFormatEnum.fromString(settings.logFormat);\n      addResult(\"logFormat=\" + settings.logFormat);\n    }\n\n    if (typeof settings.showLoggerName === \"boolean\") {\n      showLoggerName = settings.showLoggerName;\n      addResult(\"showLoggerName=\" + settings.showLoggerName);\n    }\n\n    if (typeof settings.showTimestamp === \"boolean\") {\n      showTimestamp = settings.showTimestamp;\n      addResult(\"showTimestamp=\" + settings.showTimestamp);\n    }\n\n    logGroupRuntimeSettings.forEach(function (s) {\n      if (logLevel !== null) {\n        s.level = logLevel;\n      }\n\n      if (formatEnum !== null) {\n        s.logFormat.dateFormat.formatEnum = formatEnum;\n      }\n\n      if (showTimestamp !== null) {\n        s.logFormat.showTimeStamp = showTimestamp;\n      }\n\n      if (showLoggerName !== null) {\n        s.logFormat.showLoggerName = showLoggerName;\n      }\n    });\n    /* tslint:disable:no-console */\n\n    console.log(\"Applied changes: \" + result + \" to log groups '\" + settings.group + \"'.\");\n    /* tslint:enable:no-console */\n  };\n\n  LoggerFactoryControlImpl.prototype.reset = function (idGroup) {\n    if (idGroup === void 0) {\n      idGroup = \"all\";\n    }\n\n    var settings = this._getLogGroupRunTimeSettingsFor(idGroup);\n\n    for (var _i = 0, settings_1 = settings; _i < settings_1.length; _i++) {\n      var setting = settings_1[_i];\n      setting.level = setting.logGroupRule.level;\n      setting.logFormat.showTimeStamp = setting.logGroupRule.logFormat.showTimeStamp;\n      setting.logFormat.showLoggerName = setting.logGroupRule.logFormat.showLoggerName;\n      setting.logFormat.dateFormat.formatEnum = setting.logGroupRule.logFormat.dateFormat.formatEnum;\n    }\n    /* tslint:disable:no-console */\n\n\n    console.log(\"Reset all settings for group \" + idGroup);\n    /* tslint:enable:no-console */\n  };\n\n  LoggerFactoryControlImpl.prototype._getLogGroupRunTimeSettingsFor = function (idGroup) {\n    var settings = [];\n\n    if (idGroup === \"all\") {\n      settings = this._settings.getLogGroupRuntimeSettings();\n    } else {\n      this._checkIndex(idGroup);\n\n      settings.push(this._settings.getLogGroupRuntimeSettings()[idGroup]);\n    }\n\n    return settings;\n  };\n\n  LoggerFactoryControlImpl.prototype._checkIndex = function (index) {\n    if (index < 0 || index >= this._settings.getLogGroupRuntimeSettings().length) {\n      throw new Error(\"Invalid index, use listLogGroups to find out a valid one.\");\n    }\n  };\n\n  LoggerFactoryControlImpl._help = \"\\n  help(): void\\n    ** Shows this help.\\n\\n  example(): void\\n    ** Shows an example of usage.\\n\\n  showSettings(id: number | \\\"all\\\"): void\\n    ** Prints settings for given group id, \\\"all\\\" for all group.\\n\\n  change(settings: LogGroupControlSettings): void\\n    ** Changes the current settings for one or all log groups.\\n    **\\n       LogGroupControlSettings, properties of object:\\n         group: number | \\\"all\\\"\\n           ** Apply to specific group, or \\\"all\\\".\\n           ** Required\\n\\n         logLevel: \\\"Fatal\\\" | \\\"Error\\\" | \\\"Warn\\\" | \\\"Info\\\" | \\\"Debug\\\" | \\\"Trace\\\" | undefined\\n           ** Set log level, undefined will not change the setting.\\n           ** Optional\\n\\n         logFormat: \\\"Default\\\" | \\\"YearMonthDayTime\\\" | \\\"YearDayMonthWithFullTime\\\" | \\\"YearDayMonthTime\\\" | undefined\\n           ** Set the log format, undefined will not change the setting.\\n           ** Optional\\n\\n         showTimestamp: boolean | undefined\\n           ** Whether to show timestamp, undefined will not change the setting.\\n           ** Optional\\n\\n         showLoggerName: boolean | undefined\\n           ** Whether to show the logger name, undefined will not change the setting.\\n           ** Optional\\n\\n  reset(id: number | \\\"all\\\"): void\\n    ** Resets everything to original values, for one specific or for all groups.\\n\\n  help():\\n    ** Shows this help.\\n\";\n  LoggerFactoryControlImpl._example = \"\\n  Examples:\\n    change({group: \\\"all\\\", logLevel: \\\"Info\\\"})\\n      ** Change loglevel to Info for all groups.\\n\\n    change({group: 1, recursive:false, logLevel: \\\"Warn\\\"})\\n      ** Change logLevel for group 1 to Warn.\\n\\n    change({group: \\\"all\\\", logLevel: \\\"Debug\\\", logFormat: \\\"YearDayMonthTime\\\", showTimestamp:false, showLoggerName:false})\\n      ** Change loglevel to Debug for all groups, apply format, do not show timestamp and logger names.\\n\";\n  return LoggerFactoryControlImpl;\n}();","map":{"version":3,"sources":["../../../src/logging/control/LogGroupControl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LoggerOptions_1 = require(\"../log/LoggerOptions\");\nvar LFService_1 = require(\"../log/standard/LFService\");\nvar DataStructures_1 = require(\"../utils/DataStructures\");\nvar LoggerControlImpl = (function () {\n    function LoggerControlImpl() {\n    }\n    LoggerControlImpl.prototype.help = function () {\n        /* tslint:disable:no-console */\n        console.log(LoggerControlImpl._help);\n        /* tslint:enable:no-console */\n    };\n    LoggerControlImpl.prototype.listFactories = function () {\n        var rtSettingsFactories = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\n        var result = new DataStructures_1.StringBuilder();\n        result.appendLine(\"Registered LoggerFactories (index / name)\");\n        for (var i = 0; i < rtSettingsFactories.length; i++) {\n            var rtSettingsFactory = rtSettingsFactories[i];\n            result.append(\"  \" + i).append(\": \" + rtSettingsFactory.getName() + \"\\n\");\n        }\n        /* tslint:disable:no-console */\n        console.log(result.toString());\n        /* tslint:enable:no-console */\n    };\n    LoggerControlImpl.prototype.showSettings = function (id) {\n        if (id === void 0) { id = \"all\"; }\n        var result = [];\n        if (id === \"all\") {\n            var idx_1 = 0;\n            LoggerControlImpl._getRuntimeSettingsLoggerFactories().forEach(function (item) {\n                result.push(new DataStructures_1.TuplePair(idx_1++, item));\n            });\n        }\n        else {\n            var settings = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\n            if (id >= 0 && id < settings.length) {\n                result.push(new DataStructures_1.TuplePair(id, settings[id]));\n            }\n            else {\n                throw new Error(\"Requested number: \" + id + \" was not found.\");\n            }\n        }\n        for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {\n            var setting = result_1[_i];\n            /* tslint:disable:no-console */\n            console.log(\"  LoggerFactory: \" + setting.y.getName() + \" (id=\" + setting.x + \")\");\n            var logGroupRuntimeSettings = setting.y.getLogGroupRuntimeSettings();\n            for (var g = 0; g < logGroupRuntimeSettings.length; g++) {\n                var groupSetting = logGroupRuntimeSettings[g];\n                console.log(\"     LogGroup: (id=\" + g + \")\");\n                console.log(\"       RegExp: \" + groupSetting.logGroupRule.regExp.source);\n                console.log(\"       Level: \" + LoggerOptions_1.LogLevel[groupSetting.level].toString());\n                console.log(\"       LoggerType: \" + LoggerOptions_1.LoggerType[groupSetting.loggerType].toString());\n            }\n            /* tslint:enable:no-console */\n        }\n    };\n    LoggerControlImpl.prototype.reset = function (idFactory) {\n        if (idFactory === void 0) { idFactory = \"all\"; }\n        var loggerFactoriesSettings = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\n        var result = [];\n        if (idFactory === \"all\") {\n            result = loggerFactoriesSettings;\n        }\n        else {\n            if (idFactory >= 0 && idFactory < loggerFactoriesSettings.length) {\n                result.push(loggerFactoriesSettings[idFactory]);\n            }\n        }\n        result.forEach(function (setting) {\n            /* tslint:disable:no-console */\n            console.log(\"Reset all settings for factory \" + idFactory);\n            /* tslint:enable:no-console */\n            var control = new LoggerFactoryControlImpl(setting);\n            control.reset();\n        });\n    };\n    LoggerControlImpl.prototype.getLoggerFactoryControl = function (idFactory) {\n        var loggerFactoriesSettings = LoggerControlImpl._getRuntimeSettingsLoggerFactories();\n        if (idFactory >= 0 && idFactory < loggerFactoriesSettings.length) {\n            return new LoggerFactoryControlImpl(loggerFactoriesSettings[idFactory]);\n        }\n        throw new Error(\"idFactory is invalid (less than 0) or non existing id.\");\n    };\n    LoggerControlImpl._getRuntimeSettingsLoggerFactories = function () {\n        return LoggerControlImpl._getSettings().getRuntimeSettingsForLoggerFactories();\n    };\n    LoggerControlImpl._getSettings = function () {\n        return LFService_1.LFService.getRuntimeSettings();\n    };\n    LoggerControlImpl._help = \"\\n  help(): void\\n    ** Shows this help.\\n\\n  listFactories(): void\\n    ** List all registered LoggerFactories with associated log groups with respective ids (ids can be used to target a factory and/or group).\\n\\n  showSettings(idFactory: number | \\\"all\\\"): void\\n    ** Show log group settings for idFactory (use listFactories to find id for a LoggerFactory). If idFactory is \\\"all\\\" shows all factories.\\n\\n  getLoggerFactoryControl(idFactory: number): LoggerFactoryControl\\n    ** Return LoggerFactoryControl when found for given idFactory or throws Error if invalid or null, get the id by using listFactories()\\n\\n  reset(idFactory: number | \\\"all\\\"): void\\n    ** Resets given factory or all factories back to original values.\\n\";\n    return LoggerControlImpl;\n}());\nexports.LoggerControlImpl = LoggerControlImpl;\nvar LoggerFactoryControlImpl = (function () {\n    function LoggerFactoryControlImpl(settings) {\n        this._settings = settings;\n    }\n    LoggerFactoryControlImpl.prototype.help = function () {\n        /* tslint:disable:no-console */\n        console.log(LoggerFactoryControlImpl._help);\n        /* tslint:enable:no-console */\n    };\n    LoggerFactoryControlImpl.prototype.example = function () {\n        /* tslint:disable:no-console */\n        console.log(LoggerFactoryControlImpl._example);\n        /* tslint:enable:no-console */\n    };\n    LoggerFactoryControlImpl.prototype.showSettings = function (id) {\n        if (id === void 0) { id = \"all\"; }\n        var result = new DataStructures_1.StringBuilder();\n        var logGroupRuntimeSettings = this._settings.getLogGroupRuntimeSettings();\n        result.appendLine(\"Registered LogGroups (index / expression)\");\n        for (var i = 0; i < logGroupRuntimeSettings.length; i++) {\n            var logGroupRuntimeSetting = logGroupRuntimeSettings[i];\n            result.appendLine(\"  \" + i + \": \" + logGroupRuntimeSetting.logGroupRule.regExp.source + \", logLevel=\" +\n                LoggerOptions_1.LogLevel[logGroupRuntimeSetting.level].toString() + \", showTimestamp=\" + logGroupRuntimeSetting.logFormat.showTimeStamp +\n                \", showLoggerName=\" + logGroupRuntimeSetting.logFormat.showLoggerName +\n                \", format=\" + LoggerOptions_1.DateFormatEnum[logGroupRuntimeSetting.logFormat.dateFormat.formatEnum].toString());\n        }\n        /* tslint:disable:no-console */\n        console.log(result.toString());\n        /* tslint:enable:no-console */\n    };\n    LoggerFactoryControlImpl.prototype.change = function (settings) {\n        var logGroupRuntimeSettings = this._getLogGroupRunTimeSettingsFor(settings.group);\n        var logLevel = null;\n        var formatEnum = null;\n        var showLoggerName = null;\n        var showTimestamp = null;\n        var result = null;\n        var addResult = function (value) {\n            if (result !== null) {\n                result += \", \";\n            }\n            if (result === null) {\n                result = value;\n            }\n            else {\n                result += value;\n            }\n        };\n        if (typeof settings.logLevel === \"string\") {\n            logLevel = LoggerOptions_1.LogLevel.fromString(settings.logLevel);\n            addResult(\"logLevel=\" + settings.logLevel);\n        }\n        if (typeof settings.logFormat === \"string\") {\n            formatEnum = LoggerOptions_1.DateFormatEnum.fromString(settings.logFormat);\n            addResult(\"logFormat=\" + settings.logFormat);\n        }\n        if (typeof settings.showLoggerName === \"boolean\") {\n            showLoggerName = settings.showLoggerName;\n            addResult(\"showLoggerName=\" + settings.showLoggerName);\n        }\n        if (typeof settings.showTimestamp === \"boolean\") {\n            showTimestamp = settings.showTimestamp;\n            addResult(\"showTimestamp=\" + settings.showTimestamp);\n        }\n        logGroupRuntimeSettings.forEach(function (s) {\n            if (logLevel !== null) {\n                s.level = logLevel;\n            }\n            if (formatEnum !== null) {\n                s.logFormat.dateFormat.formatEnum = formatEnum;\n            }\n            if (showTimestamp !== null) {\n                s.logFormat.showTimeStamp = showTimestamp;\n            }\n            if (showLoggerName !== null) {\n                s.logFormat.showLoggerName = showLoggerName;\n            }\n        });\n        /* tslint:disable:no-console */\n        console.log(\"Applied changes: \" + result + \" to log groups '\" + settings.group + \"'.\");\n        /* tslint:enable:no-console */\n    };\n    LoggerFactoryControlImpl.prototype.reset = function (idGroup) {\n        if (idGroup === void 0) { idGroup = \"all\"; }\n        var settings = this._getLogGroupRunTimeSettingsFor(idGroup);\n        for (var _i = 0, settings_1 = settings; _i < settings_1.length; _i++) {\n            var setting = settings_1[_i];\n            setting.level = setting.logGroupRule.level;\n            setting.logFormat.showTimeStamp = setting.logGroupRule.logFormat.showTimeStamp;\n            setting.logFormat.showLoggerName = setting.logGroupRule.logFormat.showLoggerName;\n            setting.logFormat.dateFormat.formatEnum = setting.logGroupRule.logFormat.dateFormat.formatEnum;\n        }\n        /* tslint:disable:no-console */\n        console.log(\"Reset all settings for group \" + idGroup);\n        /* tslint:enable:no-console */\n    };\n    LoggerFactoryControlImpl.prototype._getLogGroupRunTimeSettingsFor = function (idGroup) {\n        var settings = [];\n        if (idGroup === \"all\") {\n            settings = this._settings.getLogGroupRuntimeSettings();\n        }\n        else {\n            this._checkIndex(idGroup);\n            settings.push(this._settings.getLogGroupRuntimeSettings()[idGroup]);\n        }\n        return settings;\n    };\n    LoggerFactoryControlImpl.prototype._checkIndex = function (index) {\n        if (index < 0 || index >= this._settings.getLogGroupRuntimeSettings().length) {\n            throw new Error(\"Invalid index, use listLogGroups to find out a valid one.\");\n        }\n    };\n    LoggerFactoryControlImpl._help = \"\\n  help(): void\\n    ** Shows this help.\\n\\n  example(): void\\n    ** Shows an example of usage.\\n\\n  showSettings(id: number | \\\"all\\\"): void\\n    ** Prints settings for given group id, \\\"all\\\" for all group.\\n\\n  change(settings: LogGroupControlSettings): void\\n    ** Changes the current settings for one or all log groups.\\n    **\\n       LogGroupControlSettings, properties of object:\\n         group: number | \\\"all\\\"\\n           ** Apply to specific group, or \\\"all\\\".\\n           ** Required\\n\\n         logLevel: \\\"Fatal\\\" | \\\"Error\\\" | \\\"Warn\\\" | \\\"Info\\\" | \\\"Debug\\\" | \\\"Trace\\\" | undefined\\n           ** Set log level, undefined will not change the setting.\\n           ** Optional\\n\\n         logFormat: \\\"Default\\\" | \\\"YearMonthDayTime\\\" | \\\"YearDayMonthWithFullTime\\\" | \\\"YearDayMonthTime\\\" | undefined\\n           ** Set the log format, undefined will not change the setting.\\n           ** Optional\\n\\n         showTimestamp: boolean | undefined\\n           ** Whether to show timestamp, undefined will not change the setting.\\n           ** Optional\\n\\n         showLoggerName: boolean | undefined\\n           ** Whether to show the logger name, undefined will not change the setting.\\n           ** Optional\\n\\n  reset(id: number | \\\"all\\\"): void\\n    ** Resets everything to original values, for one specific or for all groups.\\n\\n  help():\\n    ** Shows this help.\\n\";\n    LoggerFactoryControlImpl._example = \"\\n  Examples:\\n    change({group: \\\"all\\\", logLevel: \\\"Info\\\"})\\n      ** Change loglevel to Info for all groups.\\n\\n    change({group: 1, recursive:false, logLevel: \\\"Warn\\\"})\\n      ** Change logLevel for group 1 to Warn.\\n\\n    change({group: \\\"all\\\", logLevel: \\\"Debug\\\", logFormat: \\\"YearDayMonthTime\\\", showTimestamp:false, showLoggerName:false})\\n      ** Change loglevel to Debug for all groups, apply format, do not show timestamp and logger names.\\n\";\n    return LoggerFactoryControlImpl;\n}());\n//# sourceMappingURL=LogGroupControl.js.map"]},"metadata":{},"sourceType":"script"}