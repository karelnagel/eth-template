{"ast":null,"code":"import { getProvider, setupWeb3, getNetworkId, getNetwork } from './web3';\nimport { ENS } from './ens.js';\nimport { setupRegistrar } from './registrar';\nexport { utils, ethers } from 'ethers';\nexport async function setupENS() {\n  let {\n    customProvider,\n    ensAddress,\n    reloadOnAccountsChange,\n    enforceReadOnly,\n    enforceReload,\n    infura\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    provider\n  } = await setupWeb3({\n    customProvider,\n    reloadOnAccountsChange,\n    enforceReadOnly,\n    enforceReload,\n    infura\n  });\n  const networkId = await getNetworkId();\n  const ens = new ENS({\n    provider,\n    networkId,\n    registryAddress: ensAddress\n  });\n  const registrar = await setupRegistrar(ens.registryAddress);\n  const network = await getNetwork();\n  return {\n    ens,\n    registrar,\n    provider: customProvider,\n    network,\n    providerObject: provider\n  };\n}\nexport * from './ens';\nexport * from './registrar';\nexport * from './web3';\nexport * from './constants/interfaces';\nexport * from './utils';\nexport * from './contracts';","map":{"version":3,"sources":["/Users/karel/Documents/eth/my-eth-app/node_modules/@ensdomains/ui/src/index.js"],"names":["getProvider","setupWeb3","getNetworkId","getNetwork","ENS","setupRegistrar","utils","ethers","setupENS","customProvider","ensAddress","reloadOnAccountsChange","enforceReadOnly","enforceReload","infura","provider","networkId","ens","registryAddress","registrar","network","providerObject"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,YAAjC,EAA+CC,UAA/C,QAAiE,QAAjE;AACA,SAASC,GAAT,QAAoB,UAApB;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,QAA9B;AAEA,OAAO,eAAeC,QAAf,GAOC;AAAA,MAPuB;AAC7BC,IAAAA,cAD6B;AAE7BC,IAAAA,UAF6B;AAG7BC,IAAAA,sBAH6B;AAI7BC,IAAAA,eAJ6B;AAK7BC,IAAAA,aAL6B;AAM7BC,IAAAA;AAN6B,GAOvB,uEAAJ,EAAI;AACN,QAAM;AAAEC,IAAAA;AAAF,MAAe,MAAMd,SAAS,CAAC;AACnCQ,IAAAA,cADmC;AAEnCE,IAAAA,sBAFmC;AAGnCC,IAAAA,eAHmC;AAInCC,IAAAA,aAJmC;AAKnCC,IAAAA;AALmC,GAAD,CAApC;AAOA,QAAME,SAAS,GAAG,MAAMd,YAAY,EAApC;AACA,QAAMe,GAAG,GAAG,IAAIb,GAAJ,CAAQ;AAAEW,IAAAA,QAAF;AAAYC,IAAAA,SAAZ;AAAuBE,IAAAA,eAAe,EAAER;AAAxC,GAAR,CAAZ;AACA,QAAMS,SAAS,GAAG,MAAMd,cAAc,CAACY,GAAG,CAACC,eAAL,CAAtC;AACA,QAAME,OAAO,GAAG,MAAMjB,UAAU,EAAhC;AACA,SAAO;AAAEc,IAAAA,GAAF;AAAOE,IAAAA,SAAP;AAAkBJ,IAAAA,QAAQ,EAACN,cAA3B;AAA2CW,IAAAA,OAA3C;AAAoDC,IAAAA,cAAc,EAAEN;AAApE,GAAP;AACD;AAED,cAAc,OAAd;AACA,cAAc,aAAd;AACA,cAAc,QAAd;AACA,cAAc,wBAAd;AACA,cAAc,SAAd;AACA,cAAc,aAAd","sourcesContent":["import { getProvider, setupWeb3, getNetworkId, getNetwork } from './web3'\nimport { ENS } from './ens.js'\nimport { setupRegistrar } from './registrar'\nexport { utils, ethers } from 'ethers'\n\nexport async function setupENS({\n  customProvider,\n  ensAddress,\n  reloadOnAccountsChange,\n  enforceReadOnly,\n  enforceReload,\n  infura\n} = {}) {\n  const { provider } = await setupWeb3({\n    customProvider,\n    reloadOnAccountsChange,\n    enforceReadOnly,\n    enforceReload,\n    infura\n  })\n  const networkId = await getNetworkId()\n  const ens = new ENS({ provider, networkId, registryAddress: ensAddress })\n  const registrar = await setupRegistrar(ens.registryAddress)\n  const network = await getNetwork()\n  return { ens, registrar, provider:customProvider, network, providerObject: provider }\n}\n\nexport * from './ens'\nexport * from './registrar'\nexport * from './web3'\nexport * from './constants/interfaces'\nexport * from './utils'\nexport * from './contracts'\n"]},"metadata":{},"sourceType":"module"}