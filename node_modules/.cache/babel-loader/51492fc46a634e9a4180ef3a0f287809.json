{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar CategoryService_1 = require(\"./CategoryService\");\n/**\n * Categorized service for logging, where logging is bound to categories which\n * can log horizontally through specific application logic (services, group(s) of components etc).\n * For the standard way of logging like most frameworks do these days, use LFService instead.\n * If you want fine grained control to divide sections of your application in\n * logical units to enable/disable logging for, this is the service you want to use instead.\n * Also for this type a browser plugin will be available.\n */\n\n\nvar CategoryServiceFactory = function () {\n  function CategoryServiceFactory() {// Private constructor.\n  }\n  /**\n   * Return a CategoryLogger for given ROOT category (thus has no parent).\n   * You can only retrieve loggers for their root, when logging\n   * you specify to log for what (child)categories.\n   * @param root Category root (has no parent)\n   * @returns {CategoryLogger}\n   */\n\n\n  CategoryServiceFactory.getLogger = function (root) {\n    return CategoryService_1.CategoryServiceImpl.getInstance().getLogger(root);\n  };\n  /**\n   * Clears everything, any registered (root)categories and loggers\n   * are discarded. Resets to default configuration.\n   */\n\n\n  CategoryServiceFactory.clear = function () {\n    return CategoryService_1.CategoryServiceImpl.getInstance().clear();\n  };\n  /**\n   * Set the default configuration. New root loggers created get this\n   * applied. If you want to reset all current loggers to have this\n   * applied as well, pass in reset=true (the default is false). All\n   * categories runtimesettings will be reset then as well.\n   * @param config The new default configuration\n   * @param reset If true, will reset *all* runtimesettings for all loggers/categories to these. Default is true.\n   */\n\n\n  CategoryServiceFactory.setDefaultConfiguration = function (config, reset) {\n    if (reset === void 0) {\n      reset = true;\n    }\n\n    CategoryService_1.CategoryServiceImpl.getInstance().setDefaultConfiguration(config, reset);\n  };\n  /**\n   * Set new configuration settings for a category (and possibly its child categories)\n   * @param config Config\n   * @param category Category\n   * @param applyChildren True to apply to child categories, defaults to false.\n   */\n\n\n  CategoryServiceFactory.setConfigurationCategory = function (config, category, applyChildren) {\n    if (applyChildren === void 0) {\n      applyChildren = false;\n    }\n\n    CategoryService_1.CategoryServiceImpl.getInstance().setConfigurationCategory(config, category, applyChildren);\n  };\n\n  return CategoryServiceFactory;\n}();\n\nexports.CategoryServiceFactory = CategoryServiceFactory;","map":{"version":3,"sources":["../../../../src/logging/log/category/CategoryServiceFactory.ts"],"names":[],"mappings":";;;;;;AAIA,IAAA,iBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;AAEA;;;;;;;AAOG;;;AACH,IAAA,sBAAA,GAAA,YAAA;AAEE,WAAA,sBAAA,GAAA,CACE;AACD;AAED;;;;;;AAMG;;;AACW,EAAA,sBAAA,CAAA,SAAA,GAAd,UAAwB,IAAxB,EAAsC;AACpC,WAAO,iBAAA,CAAA,mBAAA,CAAoB,WAApB,GAAkC,SAAlC,CAA4C,IAA5C,CAAP;AACD,GAFa;AAId;;;AAGG;;;AACW,EAAA,sBAAA,CAAA,KAAA,GAAd,YAAA;AACE,WAAO,iBAAA,CAAA,mBAAA,CAAoB,WAApB,GAAkC,KAAlC,EAAP;AACD,GAFa;AAId;;;;;;;AAOG;;;AACW,EAAA,sBAAA,CAAA,uBAAA,GAAd,UAAsC,MAAtC,EAAqE,KAArE,EAA0F;AAArB,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAA,IAAA;AAAqB;;AACxF,IAAA,iBAAA,CAAA,mBAAA,CAAoB,WAApB,GAAkC,uBAAlC,CAA0D,MAA1D,EAAkE,KAAlE;AACD,GAFa;AAId;;;;;AAKG;;;AACW,EAAA,sBAAA,CAAA,wBAAA,GAAd,UAAuC,MAAvC,EAAsE,QAAtE,EAA0F,aAA1F,EAAwH;AAA9B,QAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,aAAA,GAAA,KAAA;AAA8B;;AACtH,IAAA,iBAAA,CAAA,mBAAA,CAAoB,WAApB,GAAkC,wBAAlC,CAA2D,MAA3D,EAAmE,QAAnE,EAA6E,aAA7E;AACD,GAFa;;AAGhB,SAAA,sBAAA;AAAC,CA9CD,EAAA;;AAAa,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CategoryService_1 = require(\"./CategoryService\");\n/**\n * Categorized service for logging, where logging is bound to categories which\n * can log horizontally through specific application logic (services, group(s) of components etc).\n * For the standard way of logging like most frameworks do these days, use LFService instead.\n * If you want fine grained control to divide sections of your application in\n * logical units to enable/disable logging for, this is the service you want to use instead.\n * Also for this type a browser plugin will be available.\n */\nvar CategoryServiceFactory = (function () {\n    function CategoryServiceFactory() {\n        // Private constructor.\n    }\n    /**\n     * Return a CategoryLogger for given ROOT category (thus has no parent).\n     * You can only retrieve loggers for their root, when logging\n     * you specify to log for what (child)categories.\n     * @param root Category root (has no parent)\n     * @returns {CategoryLogger}\n     */\n    CategoryServiceFactory.getLogger = function (root) {\n        return CategoryService_1.CategoryServiceImpl.getInstance().getLogger(root);\n    };\n    /**\n     * Clears everything, any registered (root)categories and loggers\n     * are discarded. Resets to default configuration.\n     */\n    CategoryServiceFactory.clear = function () {\n        return CategoryService_1.CategoryServiceImpl.getInstance().clear();\n    };\n    /**\n     * Set the default configuration. New root loggers created get this\n     * applied. If you want to reset all current loggers to have this\n     * applied as well, pass in reset=true (the default is false). All\n     * categories runtimesettings will be reset then as well.\n     * @param config The new default configuration\n     * @param reset If true, will reset *all* runtimesettings for all loggers/categories to these. Default is true.\n     */\n    CategoryServiceFactory.setDefaultConfiguration = function (config, reset) {\n        if (reset === void 0) { reset = true; }\n        CategoryService_1.CategoryServiceImpl.getInstance().setDefaultConfiguration(config, reset);\n    };\n    /**\n     * Set new configuration settings for a category (and possibly its child categories)\n     * @param config Config\n     * @param category Category\n     * @param applyChildren True to apply to child categories, defaults to false.\n     */\n    CategoryServiceFactory.setConfigurationCategory = function (config, category, applyChildren) {\n        if (applyChildren === void 0) { applyChildren = false; }\n        CategoryService_1.CategoryServiceImpl.getInstance().setConfigurationCategory(config, category, applyChildren);\n    };\n    return CategoryServiceFactory;\n}());\nexports.CategoryServiceFactory = CategoryServiceFactory;\n//# sourceMappingURL=CategoryServiceFactory.js.map"]},"metadata":{},"sourceType":"script"}