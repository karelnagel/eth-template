{"ast":null,"code":"const alphabet = '13456789abcdefghijkmnopqrstuwxyz';\n/**\r\n * Encode provided Uint8Array using the Nano-specific Base-32 implementeation.\r\n * @param {Uint8Array} view Input buffer formatted as a Uint8Array\r\n * @returns {string}\r\n */\n\nfunction encode(view) {\n  if (view.constructor !== Uint8Array) {\n    throw new Error('View must be a Uint8Array!');\n  }\n\n  const length = view.length;\n  const leftover = length * 8 % 5;\n  const offset = leftover === 0 ? 0 : 5 - leftover;\n  let value = 0;\n  let output = '';\n  let bits = 0;\n\n  for (var i = 0; i < length; i++) {\n    value = value << 8 | view[i];\n    bits += 8;\n\n    while (bits >= 5) {\n      output += alphabet[value >>> bits + offset - 5 & 31];\n      bits -= 5;\n    }\n  }\n\n  if (bits > 0) {\n    output += alphabet[value << 5 - (bits + offset) & 31];\n  }\n\n  return output;\n}\n\nfunction readChar(char) {\n  var idx = alphabet.indexOf(char);\n\n  if (idx === -1) {\n    throw new Error('Invalid character found: ' + char);\n  }\n\n  return idx;\n}\n/**\r\n * Decodes a Nano-implementation Base32 encoded string into a Uint8Array\r\n * @param {string} input A Nano-Base32 encoded string\r\n * @returns {Uint8Array}\r\n */\n\n\nfunction decode(input) {\n  if (typeof input !== 'string') {\n    throw new Error('Input must be a string!');\n  }\n\n  var length = input.length;\n  const leftover = length * 5 % 8;\n  const offset = leftover === 0 ? 0 : 8 - leftover;\n  var bits = 0;\n  var value = 0;\n  var index = 0;\n  var output = new Uint8Array(Math.ceil(length * 5 / 8));\n\n  for (var i = 0; i < length; i++) {\n    value = value << 5 | readChar(input[i]);\n    bits += 5;\n\n    if (bits >= 8) {\n      output[index++] = value >>> bits + offset - 8 & 255;\n      bits -= 8;\n    }\n  }\n\n  if (bits > 0) {\n    output[index++] = value << bits + offset - 8 & 255;\n  }\n\n  if (leftover !== 0) {\n    output = output.slice(1);\n  }\n\n  return output;\n}\n\nmodule.exports = {\n  encode,\n  decode\n};","map":{"version":3,"sources":["/Users/karel/Documents/eth/my-eth-app/node_modules/nano-base32/index.js"],"names":["alphabet","encode","view","constructor","Uint8Array","Error","length","leftover","offset","value","output","bits","i","readChar","char","idx","indexOf","decode","input","index","Math","ceil","slice","module","exports"],"mappings":"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","sourcesContent":["const alphabet = '13456789abcdefghijkmnopqrstuwxyz'\r\n\r\n/**\r\n * Encode provided Uint8Array using the Nano-specific Base-32 implementeation.\r\n * @param {Uint8Array} view Input buffer formatted as a Uint8Array\r\n * @returns {string}\r\n */\r\nfunction encode (view) {\r\n  if (view.constructor !== Uint8Array) {\r\n    throw new Error('View must be a Uint8Array!')\r\n  }\r\n  const length = view.length\r\n  const leftover = (length * 8) % 5\r\n  const offset = leftover === 0 ? 0 : 5 - leftover\r\n\r\n  let value = 0\r\n  let output = ''\r\n  let bits = 0\r\n\r\n  for (var i = 0; i < length; i++) {\r\n    value = (value << 8) | view[i]\r\n    bits += 8\r\n\r\n    while (bits >= 5) {\r\n      output += alphabet[(value >>> (bits + offset - 5)) & 31]\r\n      bits -= 5\r\n    }\r\n  }\r\n\r\n  if (bits > 0) {\r\n    output += alphabet[(value << (5 - (bits + offset))) & 31]\r\n  }\r\n\r\n  return output\r\n}\r\n\r\nfunction readChar (char) {\r\n  var idx = alphabet.indexOf(char)\r\n\r\n  if (idx === -1) {\r\n    throw new Error('Invalid character found: ' + char)\r\n  }\r\n\r\n  return idx\r\n}\r\n\r\n/**\r\n * Decodes a Nano-implementation Base32 encoded string into a Uint8Array\r\n * @param {string} input A Nano-Base32 encoded string\r\n * @returns {Uint8Array}\r\n */\r\nfunction decode (input) {\r\n  if (typeof input !== 'string') {\r\n    throw new Error('Input must be a string!')\r\n  }\r\n  var length = input.length\r\n  const leftover = (length * 5) % 8\r\n  const offset = leftover === 0 ? 0 : 8 - leftover\r\n\r\n  var bits = 0\r\n  var value = 0\r\n\r\n  var index = 0\r\n  var output = new Uint8Array(Math.ceil(length * 5 / 8))\r\n\r\n  for (var i = 0; i < length; i++) {\r\n    value = (value << 5) | readChar(input[i])\r\n    bits += 5\r\n\r\n    if (bits >= 8) {\r\n      output[index++] = (value >>> (bits + offset - 8)) & 255\r\n      bits -= 8\r\n    }\r\n  }\r\n  if (bits > 0) {\r\n    output[index++] = (value << (bits + offset - 8)) & 255\r\n  }\r\n\r\n  if (leftover !== 0) {\r\n    output = output.slice(1)\r\n  }\r\n  return output\r\n}\r\n\r\nmodule.exports = {\r\n  encode,\r\n  decode\r\n}\r\n"]},"metadata":{},"sourceType":"script"}