{"ast":null,"code":"import { DNSProver } from '@ensdomains/dnsprovejs';\nimport { Oracle as OldOracle } from '@ensdomains/dnssecoraclejs-017';\nimport { Oracle as NewOracle } from '@ensdomains/dnssecoraclejs';\nimport packet from 'dns-packet';\nimport { getProvider } from './web3';\n\nclass Claim {\n  constructor(_ref) {\n    let {\n      oracle,\n      registrar,\n      isFound,\n      result,\n      textDomain,\n      encodedName\n    } = _ref;\n    this.oracle = oracle;\n    this.registrar = registrar;\n    this.result = result;\n    this.isFound = isFound;\n    this.textDomain = textDomain;\n    this.encodedName = encodedName;\n  }\n\n  async getProofData() {\n    return await this.oracle.getProofData(this.result);\n  }\n  /**\n   * returns `Oracle <https://dnsprovejs.readthedocs.io/en/latest/libraries.html#oracle>`_ object\n   */\n\n\n  getOracle() {\n    return this.oracle;\n  }\n  /**\n   * returns `DnsResult <https://dnsprovejs.readthedocs.io/en/latest/libraries.html#dnsresult>`_ object\n   */\n\n\n  getResult() {\n    return this.result;\n  }\n  /**\n   * returns owner ETH address from the DNS record.\n   */\n\n\n  getOwner() {\n    if (this.result && this.result.answer) {\n      return this.result.answer.records[0].data.toString().split('=')[1];\n    } else {\n      return null;\n    }\n  }\n\n}\n\nclass DNSRegistrar {\n  constructor(provider, oracleAddress) {\n    let isOld = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.provider = provider;\n    this.oracleAddress = oracleAddress;\n    this.isOld = isOld;\n\n    if (isOld) {\n      this.OracleClass = OldOracle;\n    } else {\n      this.OracleClass = NewOracle;\n    }\n  }\n  /**\n   * returns a claim object which allows you to claim\n   * the ownership of a given name on ENS by submitting the proof\n   * into DNSSEC oracle as well as claiming the name via the registrar\n   * @param {string} name - name of the domain you want to claim\n   */\n\n\n  async claim(name) {\n    const encodedName = '0x' + packet.name.encode(name).toString('hex');\n    const textDomain = '_ens.' + name;\n    const prover = DNSProver.create(\"https://cloudflare-dns.com/dns-query\");\n    const provider = await getProvider();\n    return new Claim({\n      oracle: new this.OracleClass(this.oracleAddress, provider),\n      result: await prover.queryWithProof('TXT', textDomain),\n      isFound: true,\n      registrar: this.registrar,\n      textDomain: textDomain,\n      encodedName: encodedName\n    });\n  }\n\n}\n\nexport default DNSRegistrar;","map":{"version":3,"sources":["/Users/karel/Documents/eth/my-eth-app/node_modules/@ensdomains/ui/src/dnsregistrar.js"],"names":["DNSProver","Oracle","OldOracle","NewOracle","packet","getProvider","Claim","constructor","oracle","registrar","isFound","result","textDomain","encodedName","getProofData","getOracle","getResult","getOwner","answer","records","data","toString","split","DNSRegistrar","provider","oracleAddress","isOld","OracleClass","claim","name","encode","prover","create","queryWithProof"],"mappings":"AAAA,SAASA,SAAT,QAA0B,wBAA1B;AACA,SAASC,MAAM,IAAIC,SAAnB,QAAoC,gCAApC;AACA,SAASD,MAAM,IAAIE,SAAnB,QAAoC,4BAApC;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,SAASC,WAAT,QAA4B,QAA5B;;AAEA,MAAMC,KAAN,CAAY;AACVC,EAAAA,WAAW,OAAkE;AAAA,QAAjE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,SAAV;AAAqBC,MAAAA,OAArB;AAA8BC,MAAAA,MAA9B;AAAsCC,MAAAA,UAAtC;AAAkDC,MAAAA;AAAlD,KAAiE;AAC3E,SAAKL,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKE,MAAL,GAAcA,MAAd;AACA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKE,UAAL,GAAkBA,UAAlB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACD;;AAEiB,QAAZC,YAAY,GAAE;AAClB,WAAO,MAAM,KAAKN,MAAL,CAAYM,YAAZ,CAAyB,KAAKH,MAA9B,CAAb;AACD;AAED;AACF;AACA;;;AACEI,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKP,MAAZ;AACD;AAED;AACF;AACA;;;AACEQ,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKL,MAAZ;AACD;AAED;AACF;AACA;;;AACEM,EAAAA,QAAQ,GAAG;AACT,QAAG,KAAKN,MAAL,IAAe,KAAKA,MAAL,CAAYO,MAA9B,EAAqC;AACnC,aAAO,KAAKP,MAAL,CAAYO,MAAZ,CAAmBC,OAAnB,CAA2B,CAA3B,EAA8BC,IAA9B,CAAmCC,QAAnC,GACNC,KADM,CACA,GADA,EACK,CADL,CAAP;AAED,KAHD,MAGK;AACH,aAAO,IAAP;AACD;AACF;;AAtCS;;AAyCZ,MAAMC,YAAN,CAAmB;AACjBhB,EAAAA,WAAW,CAACiB,QAAD,EAAWC,aAAX,EAAuC;AAAA,QAAbC,KAAa,uEAAP,KAAO;AAChD,SAAKF,QAAL,GAAgBA,QAAhB;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACA,SAAKC,KAAL,GAAaA,KAAb;;AACA,QAAGA,KAAH,EAAS;AACP,WAAKC,WAAL,GAAmBzB,SAAnB;AACD,KAFD,MAEK;AACH,WAAKyB,WAAL,GAAmBxB,SAAnB;AACD;AACF;AACD;AACF;AACA;AACA;AACA;AACA;;;AACa,QAALyB,KAAK,CAACC,IAAD,EAAO;AAChB,UAAMhB,WAAW,GAAG,OAAOT,MAAM,CAACyB,IAAP,CAAYC,MAAZ,CAAmBD,IAAnB,EAAyBR,QAAzB,CAAkC,KAAlC,CAA3B;AACA,UAAMT,UAAU,GAAG,UAAUiB,IAA7B;AACA,UAAME,MAAM,GAAG/B,SAAS,CAACgC,MAAV,CAAiB,sCAAjB,CAAf;AACA,UAAMR,QAAQ,GAAG,MAAMnB,WAAW,EAAlC;AACA,WAAO,IAAIC,KAAJ,CAAU;AACfE,MAAAA,MAAM,EAAE,IAAI,KAAKmB,WAAT,CAAqB,KAAKF,aAA1B,EAAyCD,QAAzC,CADO;AAEfb,MAAAA,MAAM,EAAG,MAAMoB,MAAM,CAACE,cAAP,CAAsB,KAAtB,EAA6BrB,UAA7B,CAFA;AAGfF,MAAAA,OAAO,EAAC,IAHO;AAIfD,MAAAA,SAAS,EAAE,KAAKA,SAJD;AAKfG,MAAAA,UAAU,EAAEA,UALG;AAMfC,MAAAA,WAAW,EAAEA;AANE,KAAV,CAAP;AAQD;;AA9BgB;;AAgCnB,eAAeU,YAAf","sourcesContent":["import { DNSProver } from '@ensdomains/dnsprovejs'\nimport { Oracle as OldOracle } from '@ensdomains/dnssecoraclejs-017'\nimport { Oracle as NewOracle } from '@ensdomains/dnssecoraclejs'\nimport packet from 'dns-packet'\nimport { getProvider } from './web3'\n\nclass Claim {\n  constructor({ oracle, registrar, isFound, result, textDomain, encodedName }) {\n    this.oracle = oracle;\n    this.registrar = registrar;\n    this.result = result;\n    this.isFound = isFound;\n    this.textDomain = textDomain;\n    this.encodedName = encodedName;\n  }\n\n  async getProofData(){\n    return await this.oracle.getProofData(this.result);\n  }\n\n  /**\n   * returns `Oracle <https://dnsprovejs.readthedocs.io/en/latest/libraries.html#oracle>`_ object\n   */\n  getOracle() {\n    return this.oracle;\n  }\n\n  /**\n   * returns `DnsResult <https://dnsprovejs.readthedocs.io/en/latest/libraries.html#dnsresult>`_ object\n   */\n  getResult() {\n    return this.result;\n  }\n\n  /**\n   * returns owner ETH address from the DNS record.\n   */\n  getOwner() {\n    if(this.result && this.result.answer){\n      return this.result.answer.records[0].data.toString()\n      .split('=')[1];\n    }else{\n      return null\n    }\n  }\n}\n\nclass DNSRegistrar {\n  constructor(provider, oracleAddress, isOld=false) {\n    this.provider = provider\n    this.oracleAddress = oracleAddress\n    this.isOld = isOld\n    if(isOld){\n      this.OracleClass = OldOracle\n    }else{\n      this.OracleClass = NewOracle\n    }\n  }\n  /**\n   * returns a claim object which allows you to claim\n   * the ownership of a given name on ENS by submitting the proof\n   * into DNSSEC oracle as well as claiming the name via the registrar\n   * @param {string} name - name of the domain you want to claim\n   */\n  async claim(name) {\n    const encodedName = '0x' + packet.name.encode(name).toString('hex');\n    const textDomain = '_ens.' + name;\n    const prover = DNSProver.create(\"https://cloudflare-dns.com/dns-query\")\n    const provider = await getProvider()\n    return new Claim({\n      oracle: new this.OracleClass(this.oracleAddress, provider),\n      result: (await prover.queryWithProof('TXT', textDomain)),\n      isFound:true,\n      registrar: this.registrar,\n      textDomain: textDomain,\n      encodedName: encodedName\n    });\n  }\n}\nexport default DNSRegistrar\n"]},"metadata":{},"sourceType":"module"}