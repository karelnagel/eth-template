{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar DataStructures_1 = require(\"../../utils/DataStructures\");\n\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\n\nvar CategoryConsoleLoggerImpl_1 = require(\"./CategoryConsoleLoggerImpl\");\n\nvar CategoryDelegateLoggerImpl_1 = require(\"./CategoryDelegateLoggerImpl\");\n\nvar CategoryExtensionLoggerImpl_1 = require(\"./CategoryExtensionLoggerImpl\");\n\nvar CategoryMessageBufferImpl_1 = require(\"./CategoryMessageBufferImpl\");\n\nvar ExtensionHelper_1 = require(\"../../extension/ExtensionHelper\");\n\nvar CategoryRuntimeSettings_1 = require(\"./CategoryRuntimeSettings\");\n\nvar CategoryConfiguration_1 = require(\"./CategoryConfiguration\");\n/**\n * The service (only available as singleton) for all category related stuff as\n * retrieving, registering a logger. You should normally NOT use this,\n * instead use CategoryServiceFactory which is meant for end users.\n */\n\n\nvar CategoryServiceImpl = function () {\n  function CategoryServiceImpl() {\n    this._defaultConfig = new CategoryConfiguration_1.CategoryConfiguration();\n    this._mapState = new DataStructures_1.SimpleMap(); // Private constructor\n\n    ExtensionHelper_1.ExtensionHelper.register();\n  }\n\n  CategoryServiceImpl.getInstance = function () {\n    // Load on-demand, to assure webpack ordering of module usage doesn't screw things over\n    // for us when we accidentally change the order.\n    if (CategoryServiceImpl._INSTANCE === null) {\n      CategoryServiceImpl._INSTANCE = new CategoryServiceImpl();\n    }\n\n    return CategoryServiceImpl._INSTANCE;\n  };\n\n  CategoryServiceImpl.prototype.getLogger = function (category) {\n    return this.createOrGetCategoryState(category).logger;\n  };\n  /**\n   * Clears everything, including a default configuration you may have set.\n   * After this you need to re-register your categories etc.\n   */\n\n\n  CategoryServiceImpl.prototype.clear = function () {\n    this._mapState.clear();\n\n    this.setDefaultConfiguration(new CategoryConfiguration_1.CategoryConfiguration());\n  };\n\n  CategoryServiceImpl.prototype.getCategorySettings = function (category) {\n    return this.createOrGetCategoryState(category).currentRuntimeSettings;\n  };\n\n  CategoryServiceImpl.prototype.getOriginalCategorySettings = function (category) {\n    return this.createOrGetCategoryState(category).originalRuntimeSettings;\n  };\n  /**\n   * Set the default configuration. New root loggers created get this\n   * applied. If you want to reset all current loggers to have this\n   * applied as well, pass in reset=true (the default is false). All\n   * categories will be reset then as well.\n   * @param config New config\n   * @param reset Defaults to true. Set to true to reset all loggers and current runtimesettings.\n   */\n\n\n  CategoryServiceImpl.prototype.setDefaultConfiguration = function (config, reset) {\n    if (reset === void 0) {\n      reset = true;\n    }\n\n    this._defaultConfig = config;\n\n    if (reset) {\n      this._mapState.forEachValue(function (state) {\n        state.updateSettings(config);\n      });\n    }\n  };\n  /**\n   * Set new configuration settings for a category (and possibly its child categories)\n   * @param config Config\n   * @param category Category\n   * @param applyChildren True to apply to child categories, defaults to false.\n   */\n\n\n  CategoryServiceImpl.prototype.setConfigurationCategory = function (config, category, applyChildren) {\n    var _this = this;\n\n    if (applyChildren === void 0) {\n      applyChildren = false;\n    }\n\n    this.createOrGetCategoryState(category).updateSettings(config); // Apply the settings to children recursive if requested\n\n    if (applyChildren) {\n      category.children.forEach(function (child) {\n        // False flag, a child cannot reset a rootlogger\n        _this.setConfigurationCategory(config, child, applyChildren);\n      });\n    }\n  };\n\n  CategoryServiceImpl.prototype.registerCategory = function (category) {\n    if (category === null || typeof category === \"undefined\") {\n      throw new Error(\"Category CANNOT be null/undefined\");\n    }\n\n    if (this._mapState.exists(CategoryServiceImpl.getCategoryKey(category))) {\n      throw new Error(\"Cannot add this root category with name: \" + category.name + \", it already exists (same name in hierarchy).\");\n    }\n\n    this.createOrGetCategoryState(category);\n  };\n  /**\n   * Used to enable integration with chrome extension. Do not use manually, the\n   * extension and the logger framework deal with this.\n   */\n\n\n  CategoryServiceImpl.prototype.enableExtensionIntegration = function () {\n    var _this = this;\n\n    this._mapState.forEachValue(function (state) {\n      return state.enableForExtension(_this);\n    });\n  };\n  /**\n   * Return all root categories currently registered.\n   */\n\n\n  CategoryServiceImpl.prototype.getRootCategories = function () {\n    return this._mapState.values().filter(function (state) {\n      return state.category.parent == null;\n    }).map(function (state) {\n      return state.category;\n    });\n  };\n  /**\n   * Return Category by id\n   * @param id The id of the category to find\n   * @returns {Category} or null if not found\n   */\n\n\n  CategoryServiceImpl.prototype.getCategoryById = function (id) {\n    var result = this._mapState.values().filter(function (state) {\n      return state.category.id === id;\n    }).map(function (state) {\n      return state.category;\n    });\n\n    if (result.length === 1) {\n      return result[0];\n    }\n\n    return null;\n  };\n\n  CategoryServiceImpl.prototype.createOrGetCategoryState = function (category) {\n    var key = CategoryServiceImpl.getCategoryKey(category);\n\n    var state = this._mapState.get(key);\n\n    if (typeof state !== \"undefined\") {\n      return state;\n    }\n\n    var newState = this.createState(category);\n\n    this._mapState.put(key, newState);\n\n    return newState;\n  };\n\n  CategoryServiceImpl.prototype.createState = function (category) {\n    var _this = this;\n\n    return new CategoryState(category, function () {\n      return _this._defaultConfig;\n    }, function (config, cat) {\n      return _this.createLogger(config, cat);\n    });\n  };\n\n  CategoryServiceImpl.prototype.createLogger = function (config, category) {\n    // Default is always a console logger\n    switch (config.loggerType) {\n      case LoggerOptions_1.LoggerType.Console:\n        return new CategoryConsoleLoggerImpl_1.CategoryConsoleLoggerImpl(category, this);\n\n      case LoggerOptions_1.LoggerType.MessageBuffer:\n        return new CategoryMessageBufferImpl_1.CategoryMessageBufferLoggerImpl(category, this);\n\n      case LoggerOptions_1.LoggerType.Custom:\n        if (config.callBackLogger === null) {\n          throw new Error(\"Cannot create custom logger, custom callback is null\");\n        } else {\n          return config.callBackLogger(category, this);\n        }\n\n      default:\n        throw new Error(\"Cannot create a Logger for LoggerType: \" + config.loggerType);\n    }\n  };\n\n  CategoryServiceImpl.getCategoryKey = function (category) {\n    return category.getCategoryPath();\n  }; // Singleton category service, used by CategoryServiceFactory as well as Categories.\n  // Loaded on demand. Do NOT change as webpack may pack things in wrong order otherwise.\n\n\n  CategoryServiceImpl._INSTANCE = null;\n  return CategoryServiceImpl;\n}();\n\nexports.CategoryServiceImpl = CategoryServiceImpl;\n\nvar CategoryState = function () {\n  function CategoryState(category, defaultConfig, createLogger) {\n    this._category = category;\n    this._lazyState = new LazyState(category, defaultConfig, createLogger);\n  }\n\n  Object.defineProperty(CategoryState.prototype, \"category\", {\n    get: function () {\n      return this._category;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CategoryState.prototype, \"logger\", {\n    get: function () {\n      return this._lazyState.getLogger();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CategoryState.prototype, \"originalRuntimeSettings\", {\n    get: function () {\n      return this._lazyState.getOriginalRuntimeSettings();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CategoryState.prototype, \"currentRuntimeSettings\", {\n    get: function () {\n      return this._lazyState.getCurrentRuntimeSettings();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CategoryState.prototype.enableForExtension = function (runtimeSettings) {\n    this._lazyState.enableForExtension(runtimeSettings);\n  };\n\n  CategoryState.prototype.updateSettings = function (config) {\n    this._lazyState.updateSettings(config);\n  };\n\n  return CategoryState;\n}();\n\nvar LazyState = function () {\n  function LazyState(category, defaultConfig, createLogger) {\n    this._category = category;\n    this._defaultConfig = defaultConfig;\n    this._createLogger = createLogger;\n  }\n\n  LazyState.prototype.isLoaded = function () {\n    return typeof this._logger !== \"undefined\";\n  };\n\n  LazyState.prototype.getLogger = function () {\n    this.loadLoggerOnDemand();\n    return this._delegateLogger;\n  };\n\n  LazyState.prototype.getOriginalRuntimeSettings = function () {\n    this.loadLoggerOnDemand();\n    return this._originalRuntimeSettings;\n  };\n\n  LazyState.prototype.getCurrentRuntimeSettings = function () {\n    this.loadLoggerOnDemand();\n    return this._currentRuntimeSettings;\n  };\n\n  LazyState.prototype.enableForExtension = function (runtimeSettings) {\n    this.loadLoggerOnDemand();\n\n    if (!(this._wrappedLogger instanceof CategoryExtensionLoggerImpl_1.CategoryExtensionLoggerImpl)) {\n      /* tslint:disable no-console */\n      console.log(\"Reconfiguring logger for extension for category: \" + this._category.name);\n      /* tslint:enable no-console */\n\n      this._wrappedLogger = new CategoryExtensionLoggerImpl_1.CategoryExtensionLoggerImpl(this._category, runtimeSettings);\n      this._delegateLogger.delegate = this._wrappedLogger;\n    }\n  };\n\n  LazyState.prototype.updateSettings = function (config) {\n    if (this.isLoaded()) {\n      this._currentRuntimeSettings.logLevel = config.logLevel;\n      this._currentRuntimeSettings.loggerType = config.loggerType;\n      this._currentRuntimeSettings.logFormat = config.logFormat;\n      this._currentRuntimeSettings.callBackLogger = config.callBackLogger;\n      this._currentRuntimeSettings.formatterLogMessage = config.formatterLogMessage; // Replace the real logger, it may have changed.\n\n      this._logger = this._createLogger(config, this._category);\n\n      if (!(this._wrappedLogger instanceof CategoryExtensionLoggerImpl_1.CategoryExtensionLoggerImpl)) {\n        this._wrappedLogger = this._logger;\n      }\n\n      this._delegateLogger.delegate = this._wrappedLogger;\n    } else {\n      // Set this config, it may be for the category specific, the default is therefore not good enough.\n      this._defaultConfig = function () {\n        return config;\n      };\n    }\n  };\n\n  LazyState.prototype.loadLoggerOnDemand = function () {\n    if (!this.isLoaded()) {\n      this._logger = this._createLogger(this._defaultConfig(), this._category);\n      this._wrappedLogger = this._logger;\n      this._delegateLogger = new CategoryDelegateLoggerImpl_1.CategoryDelegateLoggerImpl(this._wrappedLogger);\n      this._originalRuntimeSettings = this.initNewSettings();\n      this._currentRuntimeSettings = this.initNewSettings();\n    }\n  };\n\n  LazyState.prototype.initNewSettings = function () {\n    var defSettings = this._defaultConfig().copy();\n\n    return new CategoryRuntimeSettings_1.CategoryRuntimeSettings(this._category, defSettings.logLevel, defSettings.loggerType, defSettings.logFormat, defSettings.callBackLogger, defSettings.formatterLogMessage);\n  };\n\n  return LazyState;\n}();","map":{"version":3,"sources":["../../../../src/logging/log/category/CategoryService.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar DataStructures_1 = require(\"../../utils/DataStructures\");\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\nvar CategoryConsoleLoggerImpl_1 = require(\"./CategoryConsoleLoggerImpl\");\nvar CategoryDelegateLoggerImpl_1 = require(\"./CategoryDelegateLoggerImpl\");\nvar CategoryExtensionLoggerImpl_1 = require(\"./CategoryExtensionLoggerImpl\");\nvar CategoryMessageBufferImpl_1 = require(\"./CategoryMessageBufferImpl\");\nvar ExtensionHelper_1 = require(\"../../extension/ExtensionHelper\");\nvar CategoryRuntimeSettings_1 = require(\"./CategoryRuntimeSettings\");\nvar CategoryConfiguration_1 = require(\"./CategoryConfiguration\");\n/**\n * The service (only available as singleton) for all category related stuff as\n * retrieving, registering a logger. You should normally NOT use this,\n * instead use CategoryServiceFactory which is meant for end users.\n */\nvar CategoryServiceImpl = (function () {\n    function CategoryServiceImpl() {\n        this._defaultConfig = new CategoryConfiguration_1.CategoryConfiguration();\n        this._mapState = new DataStructures_1.SimpleMap();\n        // Private constructor\n        ExtensionHelper_1.ExtensionHelper.register();\n    }\n    CategoryServiceImpl.getInstance = function () {\n        // Load on-demand, to assure webpack ordering of module usage doesn't screw things over\n        // for us when we accidentally change the order.\n        if (CategoryServiceImpl._INSTANCE === null) {\n            CategoryServiceImpl._INSTANCE = new CategoryServiceImpl();\n        }\n        return CategoryServiceImpl._INSTANCE;\n    };\n    CategoryServiceImpl.prototype.getLogger = function (category) {\n        return this.createOrGetCategoryState(category).logger;\n    };\n    /**\n     * Clears everything, including a default configuration you may have set.\n     * After this you need to re-register your categories etc.\n     */\n    CategoryServiceImpl.prototype.clear = function () {\n        this._mapState.clear();\n        this.setDefaultConfiguration(new CategoryConfiguration_1.CategoryConfiguration());\n    };\n    CategoryServiceImpl.prototype.getCategorySettings = function (category) {\n        return this.createOrGetCategoryState(category).currentRuntimeSettings;\n    };\n    CategoryServiceImpl.prototype.getOriginalCategorySettings = function (category) {\n        return this.createOrGetCategoryState(category).originalRuntimeSettings;\n    };\n    /**\n     * Set the default configuration. New root loggers created get this\n     * applied. If you want to reset all current loggers to have this\n     * applied as well, pass in reset=true (the default is false). All\n     * categories will be reset then as well.\n     * @param config New config\n     * @param reset Defaults to true. Set to true to reset all loggers and current runtimesettings.\n     */\n    CategoryServiceImpl.prototype.setDefaultConfiguration = function (config, reset) {\n        if (reset === void 0) { reset = true; }\n        this._defaultConfig = config;\n        if (reset) {\n            this._mapState.forEachValue(function (state) {\n                state.updateSettings(config);\n            });\n        }\n    };\n    /**\n     * Set new configuration settings for a category (and possibly its child categories)\n     * @param config Config\n     * @param category Category\n     * @param applyChildren True to apply to child categories, defaults to false.\n     */\n    CategoryServiceImpl.prototype.setConfigurationCategory = function (config, category, applyChildren) {\n        var _this = this;\n        if (applyChildren === void 0) { applyChildren = false; }\n        this.createOrGetCategoryState(category).updateSettings(config);\n        // Apply the settings to children recursive if requested\n        if (applyChildren) {\n            category.children.forEach(function (child) {\n                // False flag, a child cannot reset a rootlogger\n                _this.setConfigurationCategory(config, child, applyChildren);\n            });\n        }\n    };\n    CategoryServiceImpl.prototype.registerCategory = function (category) {\n        if (category === null || typeof category === \"undefined\") {\n            throw new Error(\"Category CANNOT be null/undefined\");\n        }\n        if (this._mapState.exists(CategoryServiceImpl.getCategoryKey(category))) {\n            throw new Error(\"Cannot add this root category with name: \" + category.name + \", it already exists (same name in hierarchy).\");\n        }\n        this.createOrGetCategoryState(category);\n    };\n    /**\n     * Used to enable integration with chrome extension. Do not use manually, the\n     * extension and the logger framework deal with this.\n     */\n    CategoryServiceImpl.prototype.enableExtensionIntegration = function () {\n        var _this = this;\n        this._mapState.forEachValue(function (state) { return state.enableForExtension(_this); });\n    };\n    /**\n     * Return all root categories currently registered.\n     */\n    CategoryServiceImpl.prototype.getRootCategories = function () {\n        return this._mapState.values().filter(function (state) { return state.category.parent == null; }).map(function (state) { return state.category; });\n    };\n    /**\n     * Return Category by id\n     * @param id The id of the category to find\n     * @returns {Category} or null if not found\n     */\n    CategoryServiceImpl.prototype.getCategoryById = function (id) {\n        var result = this._mapState.values().filter(function (state) { return state.category.id === id; }).map(function (state) { return state.category; });\n        if (result.length === 1) {\n            return result[0];\n        }\n        return null;\n    };\n    CategoryServiceImpl.prototype.createOrGetCategoryState = function (category) {\n        var key = CategoryServiceImpl.getCategoryKey(category);\n        var state = this._mapState.get(key);\n        if (typeof state !== \"undefined\") {\n            return state;\n        }\n        var newState = this.createState(category);\n        this._mapState.put(key, newState);\n        return newState;\n    };\n    CategoryServiceImpl.prototype.createState = function (category) {\n        var _this = this;\n        return new CategoryState(category, function () { return _this._defaultConfig; }, function (config, cat) { return _this.createLogger(config, cat); });\n    };\n    CategoryServiceImpl.prototype.createLogger = function (config, category) {\n        // Default is always a console logger\n        switch (config.loggerType) {\n            case LoggerOptions_1.LoggerType.Console:\n                return new CategoryConsoleLoggerImpl_1.CategoryConsoleLoggerImpl(category, this);\n            case LoggerOptions_1.LoggerType.MessageBuffer:\n                return new CategoryMessageBufferImpl_1.CategoryMessageBufferLoggerImpl(category, this);\n            case LoggerOptions_1.LoggerType.Custom:\n                if (config.callBackLogger === null) {\n                    throw new Error(\"Cannot create custom logger, custom callback is null\");\n                }\n                else {\n                    return config.callBackLogger(category, this);\n                }\n            default:\n                throw new Error(\"Cannot create a Logger for LoggerType: \" + config.loggerType);\n        }\n    };\n    CategoryServiceImpl.getCategoryKey = function (category) {\n        return category.getCategoryPath();\n    };\n    // Singleton category service, used by CategoryServiceFactory as well as Categories.\n    // Loaded on demand. Do NOT change as webpack may pack things in wrong order otherwise.\n    CategoryServiceImpl._INSTANCE = null;\n    return CategoryServiceImpl;\n}());\nexports.CategoryServiceImpl = CategoryServiceImpl;\nvar CategoryState = (function () {\n    function CategoryState(category, defaultConfig, createLogger) {\n        this._category = category;\n        this._lazyState = new LazyState(category, defaultConfig, createLogger);\n    }\n    Object.defineProperty(CategoryState.prototype, \"category\", {\n        get: function () {\n            return this._category;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryState.prototype, \"logger\", {\n        get: function () {\n            return this._lazyState.getLogger();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryState.prototype, \"originalRuntimeSettings\", {\n        get: function () {\n            return this._lazyState.getOriginalRuntimeSettings();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryState.prototype, \"currentRuntimeSettings\", {\n        get: function () {\n            return this._lazyState.getCurrentRuntimeSettings();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CategoryState.prototype.enableForExtension = function (runtimeSettings) {\n        this._lazyState.enableForExtension(runtimeSettings);\n    };\n    CategoryState.prototype.updateSettings = function (config) {\n        this._lazyState.updateSettings(config);\n    };\n    return CategoryState;\n}());\nvar LazyState = (function () {\n    function LazyState(category, defaultConfig, createLogger) {\n        this._category = category;\n        this._defaultConfig = defaultConfig;\n        this._createLogger = createLogger;\n    }\n    LazyState.prototype.isLoaded = function () {\n        return (typeof this._logger !== \"undefined\");\n    };\n    LazyState.prototype.getLogger = function () {\n        this.loadLoggerOnDemand();\n        return this._delegateLogger;\n    };\n    LazyState.prototype.getOriginalRuntimeSettings = function () {\n        this.loadLoggerOnDemand();\n        return this._originalRuntimeSettings;\n    };\n    LazyState.prototype.getCurrentRuntimeSettings = function () {\n        this.loadLoggerOnDemand();\n        return this._currentRuntimeSettings;\n    };\n    LazyState.prototype.enableForExtension = function (runtimeSettings) {\n        this.loadLoggerOnDemand();\n        if (!(this._wrappedLogger instanceof CategoryExtensionLoggerImpl_1.CategoryExtensionLoggerImpl)) {\n            /* tslint:disable no-console */\n            console.log(\"Reconfiguring logger for extension for category: \" + this._category.name);\n            /* tslint:enable no-console */\n            this._wrappedLogger = new CategoryExtensionLoggerImpl_1.CategoryExtensionLoggerImpl(this._category, runtimeSettings);\n            this._delegateLogger.delegate = this._wrappedLogger;\n        }\n    };\n    LazyState.prototype.updateSettings = function (config) {\n        if (this.isLoaded()) {\n            this._currentRuntimeSettings.logLevel = config.logLevel;\n            this._currentRuntimeSettings.loggerType = config.loggerType;\n            this._currentRuntimeSettings.logFormat = config.logFormat;\n            this._currentRuntimeSettings.callBackLogger = config.callBackLogger;\n            this._currentRuntimeSettings.formatterLogMessage = config.formatterLogMessage;\n            // Replace the real logger, it may have changed.\n            this._logger = this._createLogger(config, this._category);\n            if (!(this._wrappedLogger instanceof CategoryExtensionLoggerImpl_1.CategoryExtensionLoggerImpl)) {\n                this._wrappedLogger = this._logger;\n            }\n            this._delegateLogger.delegate = this._wrappedLogger;\n        }\n        else {\n            // Set this config, it may be for the category specific, the default is therefore not good enough.\n            this._defaultConfig = function () { return config; };\n        }\n    };\n    LazyState.prototype.loadLoggerOnDemand = function () {\n        if (!this.isLoaded()) {\n            this._logger = this._createLogger(this._defaultConfig(), this._category);\n            this._wrappedLogger = this._logger;\n            this._delegateLogger = new CategoryDelegateLoggerImpl_1.CategoryDelegateLoggerImpl(this._wrappedLogger);\n            this._originalRuntimeSettings = this.initNewSettings();\n            this._currentRuntimeSettings = this.initNewSettings();\n        }\n    };\n    LazyState.prototype.initNewSettings = function () {\n        var defSettings = this._defaultConfig().copy();\n        return new CategoryRuntimeSettings_1.CategoryRuntimeSettings(this._category, defSettings.logLevel, defSettings.loggerType, defSettings.logFormat, defSettings.callBackLogger, defSettings.formatterLogMessage);\n    };\n    return LazyState;\n}());\n//# sourceMappingURL=CategoryService.js.map"]},"metadata":{},"sourceType":"script"}