{"ast":null,"code":"const fs = require('fs');\n\nconst path = require('path');\n\nconst os = require('os');\n\nfunction log(message) {\n  console.log(`[dotenv][DEBUG] ${message}`);\n}\n\nconst NEWLINE = '\\n';\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^#]*)?(\\s*|\\s*#.*)?$/;\nconst RE_NEWLINES = /\\\\n/g;\nconst NEWLINES_MATCH = /\\r\\n|\\n|\\r/; // Parses src into an Object\n\nfunction parse(src, options) {\n  const debug = Boolean(options && options.debug);\n  const obj = {}; // convert Buffers before splitting into lines and processing\n\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL); // matched?\n\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]; // default undefined or missing values to empty string\n\n      let val = keyValueArr[2] || '';\n      const end = val.length - 1;\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"';\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"; // if single or double quoted, remove quotes\n\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end); // if double quoted, expand newlines\n\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE);\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim();\n      }\n\n      obj[key] = val;\n    } else if (debug) {\n      const trimmedLine = line.trim(); // ignore empty and commented lines\n\n      if (trimmedLine.length && trimmedLine[0] !== '#') {\n        log(`Failed to match key and value when parsing line ${idx + 1}: ${line}`);\n      }\n    }\n  });\n  return obj;\n}\n\nfunction resolveHome(envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath;\n} // Populates process.env from .env file\n\n\nfunction config(options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env');\n  let encoding = 'utf8';\n  const debug = Boolean(options && options.debug);\n  const override = Boolean(options && options.override);\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = resolveHome(options.path);\n    }\n\n    if (options.encoding != null) {\n      encoding = options.encoding;\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, {\n      encoding\n    }), {\n      debug\n    });\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key];\n      } else {\n        if (override === true) {\n          process.env[key] = parsed[key];\n        }\n\n        if (debug) {\n          if (override === true) {\n            log(`\"${key}\" is already defined in \\`process.env\\` and WAS overwritten`);\n          } else {\n            log(`\"${key}\" is already defined in \\`process.env\\` and was NOT overwritten`);\n          }\n        }\n      }\n    });\n    return {\n      parsed\n    };\n  } catch (e) {\n    if (debug) {\n      log(`Failed to load ${dotenvPath} ${e.message}`);\n    }\n\n    return {\n      error: e\n    };\n  }\n}\n\nmodule.exports.config = config;\nmodule.exports.parse = parse;","map":{"version":3,"sources":["/Users/karel/Documents/eth/my-eth-app/node_modules/dotenv/lib/main.js"],"names":["fs","require","path","os","log","message","console","NEWLINE","RE_INI_KEY_VAL","RE_NEWLINES","NEWLINES_MATCH","parse","src","options","debug","Boolean","obj","toString","split","forEach","line","idx","keyValueArr","match","key","val","end","length","isDoubleQuoted","isSingleQuoted","substring","replace","trim","trimmedLine","resolveHome","envPath","join","homedir","slice","config","dotenvPath","resolve","process","cwd","encoding","override","parsed","readFileSync","Object","keys","prototype","hasOwnProperty","call","env","e","error","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\n\nfunction log (message) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nconst NEWLINE = '\\n'\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(\"[^\"]*\"|'[^']*'|[^#]*)?(\\s*|\\s*#.*)?$/\nconst RE_NEWLINES = /\\\\n/g\nconst NEWLINES_MATCH = /\\r\\n|\\n|\\r/\n\n// Parses src into an Object\nfunction parse (src, options) {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split(NEWLINES_MATCH).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n      // default undefined or missing values to empty string\n      let val = (keyValueArr[2] || '')\n      const end = val.length - 1\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\n\n      // if single or double quoted, remove quotes\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end)\n\n        // if double quoted, expand newlines\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE)\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim()\n      }\n\n      obj[key] = val\n    } else if (debug) {\n      const trimmedLine = line.trim()\n\n      // ignore empty and commented lines\n      if (trimmedLine.length && trimmedLine[0] !== '#') {\n        log(`Failed to match key and value when parsing line ${idx + 1}: ${line}`)\n      }\n    }\n  })\n\n  return obj\n}\n\nfunction resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!Object.prototype.hasOwnProperty.call(process.env, key)) {\n        process.env[key] = parsed[key]\n      } else {\n        if (override === true) {\n          process.env[key] = parsed[key]\n        }\n\n        if (debug) {\n          if (override === true) {\n            log(`\"${key}\" is already defined in \\`process.env\\` and WAS overwritten`)\n          } else {\n            log(`\"${key}\" is already defined in \\`process.env\\` and was NOT overwritten`)\n          }\n        }\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    if (debug) {\n      log(`Failed to load ${dotenvPath} ${e.message}`)\n    }\n\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.parse = parse\n"]},"metadata":{},"sourceType":"script"}