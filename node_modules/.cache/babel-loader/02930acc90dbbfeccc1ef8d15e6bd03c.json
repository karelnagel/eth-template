{"ast":null,"code":"const sha3 = require('js-sha3').keccak_256;\n\nimport { normalize } from '@ensdomains/eth-ens-namehash';\nexport function encodeLabelhash(hash) {\n  if (!hash.startsWith('0x')) {\n    throw new Error('Expected label hash to start with 0x');\n  }\n\n  if (hash.length !== 66) {\n    throw new Error('Expected label hash to have a length of 66');\n  }\n\n  return `[${hash.slice(2)}]`;\n}\nexport function decodeLabelhash(hash) {\n  if (!(hash.startsWith('[') && hash.endsWith(']'))) {\n    throw Error('Expected encoded labelhash to start and end with square brackets');\n  }\n\n  if (hash.length !== 66) {\n    throw Error('Expected encoded labelhash to have a length of 66');\n  }\n\n  return `${hash.slice(1, -1)}`;\n}\nexport function isEncodedLabelhash(hash) {\n  return hash.startsWith('[') && hash.endsWith(']') && hash.length === 66;\n}\nexport function isDecrypted(name) {\n  const nameArray = name.split('.');\n  const decrypted = nameArray.reduce((acc, label) => {\n    if (acc === false) return false;\n    return isEncodedLabelhash(label) ? false : true;\n  }, true);\n  return decrypted;\n}\nexport function labelhash(unnormalisedLabelOrLabelhash) {\n  if (unnormalisedLabelOrLabelhash === '[root]') {\n    return '';\n  }\n\n  return isEncodedLabelhash(unnormalisedLabelOrLabelhash) ? '0x' + decodeLabelhash(unnormalisedLabelOrLabelhash) : '0x' + sha3(normalize(unnormalisedLabelOrLabelhash));\n}","map":{"version":3,"sources":["/Users/karel/Documents/eth/my-eth-app/node_modules/@ensdomains/ui/src/utils/labelhash.js"],"names":["sha3","require","keccak_256","normalize","encodeLabelhash","hash","startsWith","Error","length","slice","decodeLabelhash","endsWith","isEncodedLabelhash","isDecrypted","name","nameArray","split","decrypted","reduce","acc","label","labelhash","unnormalisedLabelOrLabelhash"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAD,CAAP,CAAmBC,UAAhC;;AACA,SAASC,SAAT,QAA0B,8BAA1B;AAEA,OAAO,SAASC,eAAT,CAAyBC,IAAzB,EAA+B;AACpC,MAAI,CAACA,IAAI,CAACC,UAAL,CAAgB,IAAhB,CAAL,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,MAAIF,IAAI,CAACG,MAAL,KAAgB,EAApB,EAAwB;AACtB,UAAM,IAAID,KAAJ,CAAU,4CAAV,CAAN;AACD;;AAED,SAAQ,IAAGF,IAAI,CAACI,KAAL,CAAW,CAAX,CAAc,GAAzB;AACD;AAED,OAAO,SAASC,eAAT,CAAyBL,IAAzB,EAA+B;AACpC,MAAI,EAAEA,IAAI,CAACC,UAAL,CAAgB,GAAhB,KAAwBD,IAAI,CAACM,QAAL,CAAc,GAAd,CAA1B,CAAJ,EAAmD;AACjD,UAAMJ,KAAK,CACT,kEADS,CAAX;AAGD;;AAED,MAAIF,IAAI,CAACG,MAAL,KAAgB,EAApB,EAAwB;AACtB,UAAMD,KAAK,CAAC,mDAAD,CAAX;AACD;;AAED,SAAQ,GAAEF,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAkB,EAA5B;AACD;AAED,OAAO,SAASG,kBAAT,CAA4BP,IAA5B,EAAkC;AACvC,SAAOA,IAAI,CAACC,UAAL,CAAgB,GAAhB,KAAwBD,IAAI,CAACM,QAAL,CAAc,GAAd,CAAxB,IAA8CN,IAAI,CAACG,MAAL,KAAgB,EAArE;AACD;AAED,OAAO,SAASK,WAAT,CAAqBC,IAArB,EAA2B;AAChC,QAAMC,SAAS,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAlB;AACA,QAAMC,SAAS,GAAGF,SAAS,CAACG,MAAV,CAAiB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACjD,QAAID,GAAG,KAAK,KAAZ,EAAmB,OAAO,KAAP;AACnB,WAAOP,kBAAkB,CAACQ,KAAD,CAAlB,GAA4B,KAA5B,GAAoC,IAA3C;AACD,GAHiB,EAGf,IAHe,CAAlB;AAKA,SAAOH,SAAP;AACD;AAED,OAAO,SAASI,SAAT,CAAmBC,4BAAnB,EAAiD;AACtD,MAAGA,4BAA4B,KAAK,QAApC,EAA6C;AAC3C,WAAO,EAAP;AACD;;AACD,SAAOV,kBAAkB,CAACU,4BAAD,CAAlB,GACH,OAAOZ,eAAe,CAACY,4BAAD,CADnB,GAEH,OAAOtB,IAAI,CAACG,SAAS,CAACmB,4BAAD,CAAV,CAFf;AAGD","sourcesContent":["const sha3 = require('js-sha3').keccak_256\nimport { normalize } from '@ensdomains/eth-ens-namehash'\n\nexport function encodeLabelhash(hash) {\n  if (!hash.startsWith('0x')) {\n    throw new Error('Expected label hash to start with 0x')\n  }\n\n  if (hash.length !== 66) {\n    throw new Error('Expected label hash to have a length of 66')\n  }\n\n  return `[${hash.slice(2)}]`\n}\n\nexport function decodeLabelhash(hash) {\n  if (!(hash.startsWith('[') && hash.endsWith(']'))) {\n    throw Error(\n      'Expected encoded labelhash to start and end with square brackets'\n    )\n  }\n\n  if (hash.length !== 66) {\n    throw Error('Expected encoded labelhash to have a length of 66')\n  }\n\n  return `${hash.slice(1, -1)}`\n}\n\nexport function isEncodedLabelhash(hash) {\n  return hash.startsWith('[') && hash.endsWith(']') && hash.length === 66\n}\n\nexport function isDecrypted(name) {\n  const nameArray = name.split('.')\n  const decrypted = nameArray.reduce((acc, label) => {\n    if (acc === false) return false\n    return isEncodedLabelhash(label) ? false : true\n  }, true)\n\n  return decrypted\n}\n\nexport function labelhash(unnormalisedLabelOrLabelhash) {\n  if(unnormalisedLabelOrLabelhash === '[root]'){\n    return ''\n  }\n  return isEncodedLabelhash(unnormalisedLabelOrLabelhash)\n    ? '0x' + decodeLabelhash(unnormalisedLabelOrLabelhash)\n    : '0x' + sha3(normalize(unnormalisedLabelOrLabelhash))\n}\n"]},"metadata":{},"sourceType":"module"}