{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar CategoryService_1 = require(\"../log/category/CategoryService\");\n\nvar LoggerOptions_1 = require(\"../log/LoggerOptions\");\n\nvar DataStructures_1 = require(\"../utils/DataStructures\");\n/**\n * Implementation class for CategoryServiceControl.\n */\n\n\nvar CategoryServiceControlImpl = function () {\n  function CategoryServiceControlImpl() {}\n\n  CategoryServiceControlImpl.prototype.help = function () {\n    /* tslint:disable:no-console */\n    console.log(CategoryServiceControlImpl._help);\n    /* tslint:enable:no-console */\n  };\n\n  CategoryServiceControlImpl.prototype.example = function () {\n    /* tslint:disable:no-console */\n    console.log(CategoryServiceControlImpl._example);\n    /* tslint:enable:no-console */\n  };\n\n  CategoryServiceControlImpl.prototype.showSettings = function (id) {\n    if (id === void 0) {\n      id = \"all\";\n    }\n\n    var result = new DataStructures_1.StringBuilder();\n\n    var service = CategoryServiceControlImpl._getCategoryService();\n\n    var categories = CategoryServiceControlImpl._getCategories(id);\n\n    categories.forEach(function (category) {\n      CategoryServiceControlImpl._processCategory(service, category, result, 0);\n    });\n    /* tslint:disable:no-console */\n\n    console.log(result.toString());\n    /* tslint:enable:no-console */\n  };\n\n  CategoryServiceControlImpl.prototype.change = function (settings) {\n    var service = CategoryServiceControlImpl._getCategoryService();\n\n    var categories = CategoryServiceControlImpl._getCategories(settings.category);\n\n    var logLevel = null;\n    var formatEnum = null;\n    var showCategoryName = null;\n    var showTimestamp = null;\n    var result = null;\n\n    var addResult = function (value) {\n      if (result !== null) {\n        result += \", \";\n      }\n\n      if (result === null) {\n        result = value;\n      } else {\n        result += value;\n      }\n    };\n\n    addResult(\"recursive=\" + settings.recursive);\n\n    if (typeof settings.logLevel === \"string\") {\n      logLevel = LoggerOptions_1.LogLevel.fromString(settings.logLevel);\n      addResult(\"logLevel=\" + settings.logLevel);\n    }\n\n    if (typeof settings.logFormat === \"string\") {\n      formatEnum = LoggerOptions_1.DateFormatEnum.fromString(settings.logFormat);\n      addResult(\"logFormat=\" + settings.logFormat);\n    }\n\n    if (typeof settings.showCategoryName === \"boolean\") {\n      showCategoryName = settings.showCategoryName;\n      addResult(\"showCategoryName=\" + settings.showCategoryName);\n    }\n\n    if (typeof settings.showTimestamp === \"boolean\") {\n      showTimestamp = settings.showTimestamp;\n      addResult(\"showTimestamp=\" + settings.showTimestamp);\n    }\n\n    var applyChanges = function (cat) {\n      var categorySettings = service.getCategorySettings(cat); // Should not happen but make tslint happy\n\n      if (categorySettings !== null) {\n        if (logLevel !== null) {\n          categorySettings.logLevel = logLevel;\n        }\n\n        if (formatEnum !== null) {\n          categorySettings.logFormat.dateFormat.formatEnum = formatEnum;\n        }\n\n        if (showTimestamp !== null) {\n          categorySettings.logFormat.showTimeStamp = showTimestamp;\n        }\n\n        if (showCategoryName !== null) {\n          categorySettings.logFormat.showCategoryName = showCategoryName;\n        }\n      }\n    };\n\n    categories.forEach(function (cat) {\n      return CategoryServiceControlImpl._applyToCategory(cat, settings.recursive, applyChanges);\n    });\n    /* tslint:disable:no-console */\n\n    console.log(\"Applied changes: \" + result + \" to categories '\" + settings.category + \"'.\");\n    /* tslint:enable:no-console */\n  };\n\n  CategoryServiceControlImpl.prototype.reset = function (id) {\n    if (id === void 0) {\n      id = \"all\";\n    }\n\n    var service = CategoryServiceControlImpl._getCategoryService();\n\n    var categories = CategoryServiceControlImpl._getCategories(id);\n\n    var applyChanges = function (cat) {\n      var categorySettings = service.getCategorySettings(cat);\n      var original = service.getOriginalCategorySettings(cat); // Should not happen but make tslint happy\n\n      if (categorySettings !== null && original !== null) {\n        categorySettings.logLevel = original.logLevel;\n        categorySettings.logFormat.dateFormat.formatEnum = original.logFormat.dateFormat.formatEnum;\n        categorySettings.logFormat.showTimeStamp = original.logFormat.showTimeStamp;\n        categorySettings.logFormat.showCategoryName = original.logFormat.showCategoryName;\n      }\n    };\n\n    categories.forEach(function (cat) {\n      return CategoryServiceControlImpl._applyToCategory(cat, true, applyChanges);\n    });\n    /* tslint:disable:no-console */\n\n    console.log(\"Applied reset to category: \" + id + \".\");\n    /* tslint:enable:no-console */\n  };\n\n  CategoryServiceControlImpl._processCategory = function (service, category, result, indent) {\n    var settings = service.getCategorySettings(category);\n\n    if (settings !== null) {\n      result.append(\"  \" + category.id + \": \");\n\n      if (indent > 0) {\n        for (var i = 0; i < indent; i++) {\n          result.append(\"  \");\n        }\n      }\n\n      result.append(category.name + \" (\" + LoggerOptions_1.LogLevel[settings.logLevel].toString() + \"@\" + LoggerOptions_1.LoggerType[settings.loggerType].toString() + \")\\n\");\n\n      if (category.children.length > 0) {\n        category.children.forEach(function (child) {\n          CategoryServiceControlImpl._processCategory(service, child, result, indent + 1);\n        });\n      }\n    }\n  };\n\n  CategoryServiceControlImpl._applyToCategory = function (category, recursive, apply) {\n    apply(category);\n\n    if (recursive) {\n      category.children.forEach(function (child) {\n        CategoryServiceControlImpl._applyToCategory(child, recursive, apply);\n      });\n    }\n  };\n\n  CategoryServiceControlImpl._getCategoryService = function () {\n    return CategoryService_1.CategoryServiceImpl.getInstance();\n  };\n\n  CategoryServiceControlImpl._getCategories = function (idCategory) {\n    var service = CategoryServiceControlImpl._getCategoryService();\n\n    var categories = [];\n\n    if (idCategory === \"all\") {\n      categories = service.getRootCategories();\n    } else {\n      var category = service.getCategoryById(idCategory);\n\n      if (category === null) {\n        throw new Error(\"Failed to find category with id \" + idCategory);\n      }\n\n      categories.push(category);\n    }\n\n    return categories;\n  };\n\n  CategoryServiceControlImpl._help = \"\\n  help(): void\\n    ** Shows this help.\\n\\n  example(): void\\n    ** Shows an example on how to use this.\\n\\n  showSettings(id: number | \\\"all\\\" = \\\"all\\\"): void\\n    ** Shows settings for a specific category, or for all. The id of categories can be found by calling this method without parameter.\\n\\n  change(settings: CategoryServiceControlSettings): void\\n    ** Changes the current settings for one or all categories.\\n    **\\n       CategoryServiceControlSettings, properties of object:\\n         category: number | \\\"all\\\"\\n           ** Apply to specific category, or \\\"all\\\".\\n           ** Required\\n\\n         recursive: boolean\\n           ** Apply to child categories (true) or not.\\n           ** Required\\n\\n         logLevel: \\\"Fatal\\\" | \\\"Error\\\" | \\\"Warn\\\" | \\\"Info\\\" | \\\"Debug\\\" | \\\"Trace\\\" | undefined\\n           ** Set log level, undefined will not change the setting.\\n           ** Optional\\n\\n         logFormat: \\\"Default\\\" | \\\"YearMonthDayTime\\\" | \\\"YearDayMonthWithFullTime\\\" | \\\"YearDayMonthTime\\\" | undefined\\n           ** Set the log format, undefined will not change the setting.\\n           ** Optional\\n\\n         showTimestamp: boolean | undefined\\n           ** Whether to show timestamp, undefined will not change the setting.\\n           ** Optional\\n\\n         showCategoryName: boolean | undefined\\n           ** Whether to show the category name, undefined will not change the setting.\\n           ** Optional\\n\\n   reset(id: number | \\\"all\\\"): void\\n     ** Resets everything to original values, for one specific or for all categories.\\n\";\n  CategoryServiceControlImpl._example = \"\\n  Examples:\\n    change({category: \\\"all\\\", recursive:true, logLevel: \\\"Info\\\"})\\n      ** Change loglevel to Info for all categories, apply to child categories as well.\\n\\n    change({category: 1, recursive:false, logLevel: \\\"Warn\\\"})\\n      ** Change logLevel for category 1, do not recurse.\\n\\n    change({category: \\\"all\\\", recursive:true, logLevel: \\\"Debug\\\", logFormat: \\\"YearDayMonthTime\\\", showTimestamp:false, showCategoryName:false})\\n      ** Change loglevel to Debug for all categories, apply format, do not show timestamp and category names - recursively to child categories.\\n\\n\";\n  return CategoryServiceControlImpl;\n}();\n\nexports.CategoryServiceControlImpl = CategoryServiceControlImpl;","map":{"version":3,"sources":["../../../src/logging/control/CategoryServiceControl.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CategoryService_1 = require(\"../log/category/CategoryService\");\nvar LoggerOptions_1 = require(\"../log/LoggerOptions\");\nvar DataStructures_1 = require(\"../utils/DataStructures\");\n/**\n * Implementation class for CategoryServiceControl.\n */\nvar CategoryServiceControlImpl = (function () {\n    function CategoryServiceControlImpl() {\n    }\n    CategoryServiceControlImpl.prototype.help = function () {\n        /* tslint:disable:no-console */\n        console.log(CategoryServiceControlImpl._help);\n        /* tslint:enable:no-console */\n    };\n    CategoryServiceControlImpl.prototype.example = function () {\n        /* tslint:disable:no-console */\n        console.log(CategoryServiceControlImpl._example);\n        /* tslint:enable:no-console */\n    };\n    CategoryServiceControlImpl.prototype.showSettings = function (id) {\n        if (id === void 0) { id = \"all\"; }\n        var result = new DataStructures_1.StringBuilder();\n        var service = CategoryServiceControlImpl._getCategoryService();\n        var categories = CategoryServiceControlImpl._getCategories(id);\n        categories.forEach(function (category) {\n            CategoryServiceControlImpl._processCategory(service, category, result, 0);\n        });\n        /* tslint:disable:no-console */\n        console.log(result.toString());\n        /* tslint:enable:no-console */\n    };\n    CategoryServiceControlImpl.prototype.change = function (settings) {\n        var service = CategoryServiceControlImpl._getCategoryService();\n        var categories = CategoryServiceControlImpl._getCategories(settings.category);\n        var logLevel = null;\n        var formatEnum = null;\n        var showCategoryName = null;\n        var showTimestamp = null;\n        var result = null;\n        var addResult = function (value) {\n            if (result !== null) {\n                result += \", \";\n            }\n            if (result === null) {\n                result = value;\n            }\n            else {\n                result += value;\n            }\n        };\n        addResult(\"recursive=\" + settings.recursive);\n        if (typeof settings.logLevel === \"string\") {\n            logLevel = LoggerOptions_1.LogLevel.fromString(settings.logLevel);\n            addResult(\"logLevel=\" + settings.logLevel);\n        }\n        if (typeof settings.logFormat === \"string\") {\n            formatEnum = LoggerOptions_1.DateFormatEnum.fromString(settings.logFormat);\n            addResult(\"logFormat=\" + settings.logFormat);\n        }\n        if (typeof settings.showCategoryName === \"boolean\") {\n            showCategoryName = settings.showCategoryName;\n            addResult(\"showCategoryName=\" + settings.showCategoryName);\n        }\n        if (typeof settings.showTimestamp === \"boolean\") {\n            showTimestamp = settings.showTimestamp;\n            addResult(\"showTimestamp=\" + settings.showTimestamp);\n        }\n        var applyChanges = function (cat) {\n            var categorySettings = service.getCategorySettings(cat);\n            // Should not happen but make tslint happy\n            if (categorySettings !== null) {\n                if (logLevel !== null) {\n                    categorySettings.logLevel = logLevel;\n                }\n                if (formatEnum !== null) {\n                    categorySettings.logFormat.dateFormat.formatEnum = formatEnum;\n                }\n                if (showTimestamp !== null) {\n                    categorySettings.logFormat.showTimeStamp = showTimestamp;\n                }\n                if (showCategoryName !== null) {\n                    categorySettings.logFormat.showCategoryName = showCategoryName;\n                }\n            }\n        };\n        categories.forEach(function (cat) { return CategoryServiceControlImpl._applyToCategory(cat, settings.recursive, applyChanges); });\n        /* tslint:disable:no-console */\n        console.log(\"Applied changes: \" + result + \" to categories '\" + settings.category + \"'.\");\n        /* tslint:enable:no-console */\n    };\n    CategoryServiceControlImpl.prototype.reset = function (id) {\n        if (id === void 0) { id = \"all\"; }\n        var service = CategoryServiceControlImpl._getCategoryService();\n        var categories = CategoryServiceControlImpl._getCategories(id);\n        var applyChanges = function (cat) {\n            var categorySettings = service.getCategorySettings(cat);\n            var original = service.getOriginalCategorySettings(cat);\n            // Should not happen but make tslint happy\n            if (categorySettings !== null && original !== null) {\n                categorySettings.logLevel = original.logLevel;\n                categorySettings.logFormat.dateFormat.formatEnum = original.logFormat.dateFormat.formatEnum;\n                categorySettings.logFormat.showTimeStamp = original.logFormat.showTimeStamp;\n                categorySettings.logFormat.showCategoryName = original.logFormat.showCategoryName;\n            }\n        };\n        categories.forEach(function (cat) { return CategoryServiceControlImpl._applyToCategory(cat, true, applyChanges); });\n        /* tslint:disable:no-console */\n        console.log(\"Applied reset to category: \" + id + \".\");\n        /* tslint:enable:no-console */\n    };\n    CategoryServiceControlImpl._processCategory = function (service, category, result, indent) {\n        var settings = service.getCategorySettings(category);\n        if (settings !== null) {\n            result.append(\"  \" + category.id + \": \");\n            if (indent > 0) {\n                for (var i = 0; i < indent; i++) {\n                    result.append(\"  \");\n                }\n            }\n            result.append(category.name + \" (\" + LoggerOptions_1.LogLevel[settings.logLevel].toString() + \"@\" + LoggerOptions_1.LoggerType[settings.loggerType].toString() + \")\\n\");\n            if (category.children.length > 0) {\n                category.children.forEach(function (child) {\n                    CategoryServiceControlImpl._processCategory(service, child, result, indent + 1);\n                });\n            }\n        }\n    };\n    CategoryServiceControlImpl._applyToCategory = function (category, recursive, apply) {\n        apply(category);\n        if (recursive) {\n            category.children.forEach(function (child) {\n                CategoryServiceControlImpl._applyToCategory(child, recursive, apply);\n            });\n        }\n    };\n    CategoryServiceControlImpl._getCategoryService = function () {\n        return CategoryService_1.CategoryServiceImpl.getInstance();\n    };\n    CategoryServiceControlImpl._getCategories = function (idCategory) {\n        var service = CategoryServiceControlImpl._getCategoryService();\n        var categories = [];\n        if (idCategory === \"all\") {\n            categories = service.getRootCategories();\n        }\n        else {\n            var category = service.getCategoryById(idCategory);\n            if (category === null) {\n                throw new Error(\"Failed to find category with id \" + idCategory);\n            }\n            categories.push(category);\n        }\n        return categories;\n    };\n    CategoryServiceControlImpl._help = \"\\n  help(): void\\n    ** Shows this help.\\n\\n  example(): void\\n    ** Shows an example on how to use this.\\n\\n  showSettings(id: number | \\\"all\\\" = \\\"all\\\"): void\\n    ** Shows settings for a specific category, or for all. The id of categories can be found by calling this method without parameter.\\n\\n  change(settings: CategoryServiceControlSettings): void\\n    ** Changes the current settings for one or all categories.\\n    **\\n       CategoryServiceControlSettings, properties of object:\\n         category: number | \\\"all\\\"\\n           ** Apply to specific category, or \\\"all\\\".\\n           ** Required\\n\\n         recursive: boolean\\n           ** Apply to child categories (true) or not.\\n           ** Required\\n\\n         logLevel: \\\"Fatal\\\" | \\\"Error\\\" | \\\"Warn\\\" | \\\"Info\\\" | \\\"Debug\\\" | \\\"Trace\\\" | undefined\\n           ** Set log level, undefined will not change the setting.\\n           ** Optional\\n\\n         logFormat: \\\"Default\\\" | \\\"YearMonthDayTime\\\" | \\\"YearDayMonthWithFullTime\\\" | \\\"YearDayMonthTime\\\" | undefined\\n           ** Set the log format, undefined will not change the setting.\\n           ** Optional\\n\\n         showTimestamp: boolean | undefined\\n           ** Whether to show timestamp, undefined will not change the setting.\\n           ** Optional\\n\\n         showCategoryName: boolean | undefined\\n           ** Whether to show the category name, undefined will not change the setting.\\n           ** Optional\\n\\n   reset(id: number | \\\"all\\\"): void\\n     ** Resets everything to original values, for one specific or for all categories.\\n\";\n    CategoryServiceControlImpl._example = \"\\n  Examples:\\n    change({category: \\\"all\\\", recursive:true, logLevel: \\\"Info\\\"})\\n      ** Change loglevel to Info for all categories, apply to child categories as well.\\n\\n    change({category: 1, recursive:false, logLevel: \\\"Warn\\\"})\\n      ** Change logLevel for category 1, do not recurse.\\n\\n    change({category: \\\"all\\\", recursive:true, logLevel: \\\"Debug\\\", logFormat: \\\"YearDayMonthTime\\\", showTimestamp:false, showCategoryName:false})\\n      ** Change loglevel to Debug for all categories, apply format, do not show timestamp and category names - recursively to child categories.\\n\\n\";\n    return CategoryServiceControlImpl;\n}());\nexports.CategoryServiceControlImpl = CategoryServiceControlImpl;\n//# sourceMappingURL=CategoryServiceControl.js.map"]},"metadata":{},"sourceType":"script"}