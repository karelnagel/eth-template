{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar AbstractLogger_1 = require(\"./AbstractLogger\");\n\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\n/**\n * Simple logger, that logs to the console. If the console is unavailable will throw exception.\n */\n\n\nvar ConsoleLoggerImpl = function (_super) {\n  __extends(ConsoleLoggerImpl, _super);\n\n  function ConsoleLoggerImpl(name, logGroupRuntimeSettings) {\n    return _super.call(this, name, logGroupRuntimeSettings) || this;\n  }\n\n  ConsoleLoggerImpl.prototype.doLog = function (message) {\n    if (console !== undefined) {\n      var logged = false;\n      var logLevel = message.level;\n\n      var messageFormatter = this._getMessageFormatter();\n\n      var msg = void 0;\n\n      if (messageFormatter === null) {\n        msg = this.createDefaultLogMessage(message);\n      } else {\n        msg = messageFormatter(message);\n      }\n      /* tslint:disable:no-console */\n\n\n      switch (logLevel) {\n        case LoggerOptions_1.LogLevel.Trace:\n          // Do not try trace we don't want a stack\n          break;\n\n        case LoggerOptions_1.LogLevel.Debug:\n          // Don't try, too much differences of consoles.\n          break;\n\n        case LoggerOptions_1.LogLevel.Info:\n          if (console.info) {\n            console.info(msg);\n            logged = true;\n          }\n\n          break;\n\n        case LoggerOptions_1.LogLevel.Warn:\n          if (console.warn) {\n            console.warn(msg);\n            logged = true;\n          }\n\n          break;\n\n        case LoggerOptions_1.LogLevel.Error:\n        case LoggerOptions_1.LogLevel.Fatal:\n          if (console.error) {\n            console.error(msg);\n            logged = true;\n          }\n\n          break;\n\n        default:\n          throw new Error(\"Log level not supported: \" + logLevel);\n      }\n\n      if (!logged) {\n        console.log(msg);\n      }\n      /* tslint:enable:no-console */\n\n    } else {\n      throw new Error(\"Console is not defined, cannot log msg: \" + message.message);\n    }\n  };\n\n  return ConsoleLoggerImpl;\n}(AbstractLogger_1.AbstractLogger);\n\nexports.ConsoleLoggerImpl = ConsoleLoggerImpl;","map":{"version":3,"sources":["../../../../src/logging/log/standard/ConsoleLoggerImpl.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;AAGA;;AAEG;;;AACH,IAAA,iBAAA,GAAA,UAAA,MAAA,EAAA;AAAuC,EAAA,SAAA,CAAA,iBAAA,EAAA,MAAA,CAAA;;AAErC,WAAA,iBAAA,CAAY,IAAZ,EAA0B,uBAA1B,EAA0E;WACxE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,IAAN,EAAY,uBAAZ,KAAoC,I;AACrC;;AAES,EAAA,iBAAA,CAAA,SAAA,CAAA,KAAA,GAAV,UAAgB,OAAhB,EAAmC;AACjC,QAAI,OAAO,KAAK,SAAhB,EAA2B;AACzB,UAAI,MAAM,GAAG,KAAb;AACA,UAAM,QAAQ,GAAG,OAAO,CAAC,KAAzB;;AAEA,UAAM,gBAAgB,GAAG,KAAK,oBAAL,EAAzB;;AACA,UAAI,GAAG,GAAA,KAAA,CAAP;;AACA,UAAI,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B,QAAA,GAAG,GAAG,KAAK,uBAAL,CAA6B,OAA7B,CAAN;AACD,OAFD,MAGK;AACH,QAAA,GAAG,GAAG,gBAAgB,CAAC,OAAD,CAAtB;AACD;AAED;;;AACA,cAAQ,QAAR;AACE,aAAK,eAAA,CAAA,QAAA,CAAS,KAAd;AACE;AACA;;AACF,aAAK,eAAA,CAAA,QAAA,CAAS,KAAd;AACE;AACA;;AACF,aAAK,eAAA,CAAA,QAAA,CAAS,IAAd;AACE,cAAI,OAAO,CAAC,IAAZ,EAAkB;AAChB,YAAA,OAAO,CAAC,IAAR,CAAa,GAAb;AACA,YAAA,MAAM,GAAG,IAAT;AACD;;AACD;;AACF,aAAK,eAAA,CAAA,QAAA,CAAS,IAAd;AACE,cAAI,OAAO,CAAC,IAAZ,EAAkB;AAChB,YAAA,OAAO,CAAC,IAAR,CAAa,GAAb;AACA,YAAA,MAAM,GAAG,IAAT;AACD;;AACD;;AACF,aAAK,eAAA,CAAA,QAAA,CAAS,KAAd;AACA,aAAK,eAAA,CAAA,QAAA,CAAS,KAAd;AACE,cAAI,OAAO,CAAC,KAAZ,EAAmB;AACjB,YAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACA,YAAA,MAAM,GAAG,IAAT;AACD;;AACD;;AACF;AACE,gBAAM,IAAI,KAAJ,CAAU,8BAA8B,QAAxC,CAAN;AA3BJ;;AA6BA,UAAI,CAAC,MAAL,EAAa;AACX,QAAA,OAAO,CAAC,GAAR,CAAY,GAAZ;AACD;AACD;;AACD,KA/CD,MAgDK;AACH,YAAM,IAAI,KAAJ,CAAU,6CAA6C,OAAO,CAAC,OAA/D,CAAN;AACD;AACF,GApDS;;AAqDZ,SAAA,iBAAA;AAAC,CA3DD,CAAuC,gBAAA,CAAA,cAAvC,CAAA;;AAAa,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar AbstractLogger_1 = require(\"./AbstractLogger\");\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\n/**\n * Simple logger, that logs to the console. If the console is unavailable will throw exception.\n */\nvar ConsoleLoggerImpl = (function (_super) {\n    __extends(ConsoleLoggerImpl, _super);\n    function ConsoleLoggerImpl(name, logGroupRuntimeSettings) {\n        return _super.call(this, name, logGroupRuntimeSettings) || this;\n    }\n    ConsoleLoggerImpl.prototype.doLog = function (message) {\n        if (console !== undefined) {\n            var logged = false;\n            var logLevel = message.level;\n            var messageFormatter = this._getMessageFormatter();\n            var msg = void 0;\n            if (messageFormatter === null) {\n                msg = this.createDefaultLogMessage(message);\n            }\n            else {\n                msg = messageFormatter(message);\n            }\n            /* tslint:disable:no-console */\n            switch (logLevel) {\n                case LoggerOptions_1.LogLevel.Trace:\n                    // Do not try trace we don't want a stack\n                    break;\n                case LoggerOptions_1.LogLevel.Debug:\n                    // Don't try, too much differences of consoles.\n                    break;\n                case LoggerOptions_1.LogLevel.Info:\n                    if (console.info) {\n                        console.info(msg);\n                        logged = true;\n                    }\n                    break;\n                case LoggerOptions_1.LogLevel.Warn:\n                    if (console.warn) {\n                        console.warn(msg);\n                        logged = true;\n                    }\n                    break;\n                case LoggerOptions_1.LogLevel.Error:\n                case LoggerOptions_1.LogLevel.Fatal:\n                    if (console.error) {\n                        console.error(msg);\n                        logged = true;\n                    }\n                    break;\n                default:\n                    throw new Error(\"Log level not supported: \" + logLevel);\n            }\n            if (!logged) {\n                console.log(msg);\n            }\n            /* tslint:enable:no-console */\n        }\n        else {\n            throw new Error(\"Console is not defined, cannot log msg: \" + message.message);\n        }\n    };\n    return ConsoleLoggerImpl;\n}(AbstractLogger_1.AbstractLogger));\nexports.ConsoleLoggerImpl = ConsoleLoggerImpl;\n//# sourceMappingURL=ConsoleLoggerImpl.js.map"]},"metadata":{},"sourceType":"script"}