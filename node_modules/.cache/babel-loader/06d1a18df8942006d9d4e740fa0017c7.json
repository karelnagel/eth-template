{"ast":null,"code":"import contentHash from '@ensdomains/content-hash';\nimport { utils } from 'ethers';\nconst supportedCodecs = ['ipns-ns', 'ipfs-ns', 'swarm-ns', 'onion', 'onion3', 'skynet-ns', 'arweave-ns'];\n\nfunction matchProtocol(text) {\n  return text.match(/^(ipfs|sia|ipns|bzz|onion|onion3|arweave):\\/\\/(.*)/) || text.match(/\\/(ipfs)\\/(.*)/) || text.match(/\\/(ipns)\\/(.*)/);\n}\n\nexport function decodeContenthash(encoded) {\n  let decoded, protocolType, error;\n\n  if (!encoded || encoded === '0x') {\n    return {};\n  }\n\n  if (encoded.error) {\n    return {\n      protocolType: null,\n      decoded: encoded.error\n    };\n  } else if (encoded === false) {\n    return {\n      protocolType: null,\n      decoded: 'invalid value'\n    };\n  }\n\n  if (encoded) {\n    try {\n      decoded = contentHash.decode(encoded);\n      const codec = contentHash.getCodec(encoded);\n\n      if (codec === 'ipfs-ns') {\n        protocolType = 'ipfs';\n      } else if (codec === 'ipns-ns') {\n        protocolType = 'ipns';\n      } else if (codec === 'swarm-ns') {\n        protocolType = 'bzz';\n      } else if (codec === 'onion') {\n        protocolType = 'onion';\n      } else if (codec === 'onion3') {\n        protocolType = 'onion3';\n      } else if (codec === 'skynet-ns') {\n        protocolType = 'sia';\n      } else if (codec === 'arweave-ns') {\n        protocolType = 'arweave';\n      } else {\n        decoded = encoded;\n      }\n    } catch (e) {\n      error = e.message;\n    }\n  }\n\n  return {\n    protocolType,\n    decoded,\n    error\n  };\n}\nexport function validateContent(encoded) {\n  return contentHash.isHashOfType(encoded, contentHash.Types.ipfs) || contentHash.isHashOfType(encoded, contentHash.Types.swarm);\n}\nexport function isValidContenthash(encoded) {\n  try {\n    const codec = contentHash.getCodec(encoded);\n    return utils.isHexString(encoded) && supportedCodecs.includes(codec);\n  } catch (e) {\n    console.log(e);\n  }\n}\nexport function getProtocolType(encoded) {\n  let protocolType, decoded;\n\n  try {\n    let matched = matchProtocol(encoded);\n\n    if (matched) {\n      protocolType = matched[1];\n      decoded = matched[2];\n    }\n\n    return {\n      protocolType,\n      decoded\n    };\n  } catch (e) {\n    console.log(e);\n  }\n}\nexport function encodeContenthash(text) {\n  let content, contentType;\n  let encoded = false;\n  let error;\n\n  if (!!text) {\n    let matched = matchProtocol(text);\n\n    if (matched) {\n      contentType = matched[1];\n      content = matched[2];\n    }\n\n    try {\n      if (contentType === 'ipfs') {\n        if (content.length >= 4) {\n          encoded = '0x' + contentHash.encode('ipfs-ns', content);\n        }\n      } else if (contentType === 'ipns') {\n        encoded = '0x' + contentHash.encode('ipns-ns', content);\n      } else if (contentType === 'bzz') {\n        if (content.length >= 4) {\n          encoded = '0x' + contentHash.fromSwarm(content);\n        }\n      } else if (contentType === 'onion') {\n        if (content.length == 16) {\n          encoded = '0x' + contentHash.encode('onion', content);\n        }\n      } else if (contentType === 'onion3') {\n        if (content.length == 56) {\n          encoded = '0x' + contentHash.encode('onion3', content);\n        }\n      } else if (contentType === 'sia') {\n        if (content.length == 46) {\n          encoded = '0x' + contentHash.encode('skynet-ns', content);\n        }\n      } else if (contentType === 'arweave') {\n        if (content.length == 43) {\n          encoded = '0x' + contentHash.encode('arweave-ns', content);\n        }\n      } else {\n        console.warn('Unsupported protocol or invalid value', {\n          contentType,\n          text\n        });\n      }\n    } catch (err) {\n      const errorMessage = 'Error encoding content hash';\n      console.warn(errorMessage, {\n        text,\n        encoded\n      });\n      error = errorMessage; //throw 'Error encoding content hash'\n    }\n  }\n\n  return {\n    encoded,\n    error\n  };\n}","map":{"version":3,"sources":["/Users/karel/Documents/eth/my-eth-app/node_modules/@ensdomains/ui/src/utils/contents.js"],"names":["contentHash","utils","supportedCodecs","matchProtocol","text","match","decodeContenthash","encoded","decoded","protocolType","error","decode","codec","getCodec","e","message","validateContent","isHashOfType","Types","ipfs","swarm","isValidContenthash","isHexString","includes","console","log","getProtocolType","matched","encodeContenthash","content","contentType","length","encode","fromSwarm","warn","err","errorMessage"],"mappings":"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","sourcesContent":["import contentHash from '@ensdomains/content-hash'\nimport { utils } from 'ethers'\nconst supportedCodecs = ['ipns-ns', 'ipfs-ns', 'swarm-ns', 'onion', 'onion3', 'skynet-ns', 'arweave-ns']\n\nfunction matchProtocol(text){\n  return text.match(/^(ipfs|sia|ipns|bzz|onion|onion3|arweave):\\/\\/(.*)/)\n    || text.match(/\\/(ipfs)\\/(.*)/)\n    || text.match(/\\/(ipns)\\/(.*)/)\n}\n\nexport function decodeContenthash(encoded) {\n  let decoded, protocolType, error\n  if(!encoded || encoded === '0x'){\n    return {}\n  }\n  if (encoded.error) {\n    return { protocolType: null, decoded: encoded.error }\n  }else if(encoded === false){\n    return { protocolType: null, decoded: 'invalid value' }\n  }\n  if (encoded) {\n    try {\n      decoded = contentHash.decode(encoded)\n      const codec = contentHash.getCodec(encoded)\n      if (codec === 'ipfs-ns') {         \n        protocolType = 'ipfs'\n      } else if (codec === 'ipns-ns') {\n        protocolType = 'ipns'\n      } else if (codec === 'swarm-ns') {\n        protocolType = 'bzz'\n      } else if (codec === 'onion') {\n        protocolType = 'onion'\n      } else if (codec === 'onion3') {\n        protocolType = 'onion3'\n      } else if (codec === 'skynet-ns') {\n        protocolType = 'sia'\n      } else if (codec === 'arweave-ns') {\n        protocolType = 'arweave'\n      } else {\n        decoded = encoded\n      }\n    } catch (e) {\n      error = e.message\n    }\n  }\n  return { protocolType, decoded, error }\n}\n\nexport function validateContent(encoded){\n  return contentHash.isHashOfType(encoded, contentHash.Types.ipfs) || contentHash.isHashOfType(encoded, contentHash.Types.swarm)\n}\n\nexport function isValidContenthash(encoded) {\n  try {\n    const codec = contentHash.getCodec(encoded)\n    return utils.isHexString(encoded) && supportedCodecs.includes(codec)\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nexport function getProtocolType(encoded) {\n  let protocolType, decoded\n  try {\n    let matched = matchProtocol(encoded)\n    if (matched) {\n      protocolType = matched[1]\n      decoded = matched[2]\n    }\n    return {\n      protocolType,\n      decoded\n    }\n  } catch (e) {\n    console.log(e)\n  }\n}\n\nexport function encodeContenthash(text) {\n  let content, contentType\n  let encoded = false\n  let error  \n  if (!!text) {\n    let matched = matchProtocol(text)\n    if (matched) {\n      contentType = matched[1]\n      content = matched[2]\n    }\n    try {\n      if (contentType === 'ipfs') {\n        if(content.length >= 4) {\n          encoded = '0x' + contentHash.encode('ipfs-ns', content);\n        }\n      } else if (contentType === 'ipns') {\n        encoded = '0x' + contentHash.encode('ipns-ns', content);\n      } else if (contentType === 'bzz') {\n        if(content.length >= 4) {\n          encoded = '0x' + contentHash.fromSwarm(content)\n        }\n      } else if (contentType === 'onion') {\n        if(content.length == 16) {\n          encoded = '0x' + contentHash.encode('onion', content);  \n        } \n      } else if (contentType === 'onion3') {\n        if(content.length == 56) {\n          encoded = '0x' + contentHash.encode('onion3', content);  \n        }\n      } else if (contentType === 'sia'){\n        if(content.length == 46) {\n          encoded = '0x' + contentHash.encode('skynet-ns', content);\n        }\n      } else if (contentType === 'arweave'){\n        if(content.length == 43) {\n          encoded = '0x' + contentHash.encode('arweave-ns', content);\n        }\n      } else {\n        console.warn('Unsupported protocol or invalid value', {\n          contentType,\n          text\n        })\n      }\n    } catch (err) {\n      const errorMessage = 'Error encoding content hash'\n      console.warn(errorMessage, { text, encoded })\n      error = errorMessage\n      //throw 'Error encoding content hash'\n    }\n  }\n  return { encoded, error }\n}\n"]},"metadata":{},"sourceType":"module"}