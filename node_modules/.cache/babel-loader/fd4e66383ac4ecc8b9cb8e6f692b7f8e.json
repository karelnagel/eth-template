{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\n\nvar CategoryService_1 = require(\"./CategoryService\");\n/**\n * Category for use with categorized logging.\n * At minimum you need one category, which will serve as the root category.\n * You can create child categories (like a tree). You can have multiple root\n * categories.\n */\n\n\nvar Category = function () {\n  function Category(name, parent) {\n    if (parent === void 0) {\n      parent = null;\n    }\n\n    this._children = [];\n    this._logLevel = LoggerOptions_1.LogLevel.Error;\n\n    if (name.indexOf(\"#\") !== -1) {\n      throw new Error(\"Cannot use # in a name of a Category\");\n    }\n\n    this._id = Category.nextId();\n    this._name = name;\n    this._parent = parent;\n\n    if (this._parent !== null) {\n      this._parent._children.push(this);\n    }\n\n    CategoryService_1.CategoryServiceImpl.getInstance().registerCategory(this);\n  }\n\n  Object.defineProperty(Category.prototype, \"name\", {\n    get: function () {\n      return this._name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Category.prototype, \"parent\", {\n    get: function () {\n      return this._parent;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Category.prototype, \"children\", {\n    get: function () {\n      return this._children;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Category.prototype, \"logLevel\", {\n    get: function () {\n      return this._logLevel;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Category.prototype.trace = function (msg) {\n    var categories = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      categories[_i - 1] = arguments[_i];\n    }\n\n    this.loadCategoryLogger();\n\n    (_a = this._logger).trace.apply(_a, [msg].concat(categories));\n\n    var _a;\n  };\n\n  Category.prototype.debug = function (msg) {\n    var categories = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      categories[_i - 1] = arguments[_i];\n    }\n\n    this.loadCategoryLogger();\n\n    (_a = this._logger).debug.apply(_a, [msg].concat(categories));\n\n    var _a;\n  };\n\n  Category.prototype.info = function (msg) {\n    var categories = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      categories[_i - 1] = arguments[_i];\n    }\n\n    this.loadCategoryLogger();\n\n    (_a = this._logger).info.apply(_a, [msg].concat(categories));\n\n    var _a;\n  };\n\n  Category.prototype.warn = function (msg) {\n    var categories = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      categories[_i - 1] = arguments[_i];\n    }\n\n    this.loadCategoryLogger();\n\n    (_a = this._logger).warn.apply(_a, [msg].concat(categories));\n\n    var _a;\n  };\n\n  Category.prototype.error = function (msg, error) {\n    var categories = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      categories[_i - 2] = arguments[_i];\n    }\n\n    this.loadCategoryLogger();\n\n    (_a = this._logger).error.apply(_a, [msg, error].concat(categories));\n\n    var _a;\n  };\n\n  Category.prototype.fatal = function (msg, error) {\n    var categories = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      categories[_i - 2] = arguments[_i];\n    }\n\n    this.loadCategoryLogger();\n\n    (_a = this._logger).fatal.apply(_a, [msg, error].concat(categories));\n\n    var _a;\n  };\n\n  Category.prototype.resolved = function (msg, error) {\n    var categories = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      categories[_i - 2] = arguments[_i];\n    }\n\n    this.loadCategoryLogger();\n\n    (_a = this._logger).resolved.apply(_a, [msg, error].concat(categories));\n\n    var _a;\n  };\n\n  Category.prototype.log = function (level, msg, error) {\n    var categories = [];\n\n    for (var _i = 3; _i < arguments.length; _i++) {\n      categories[_i - 3] = arguments[_i];\n    }\n\n    this.loadCategoryLogger();\n\n    (_a = this._logger).log.apply(_a, [level, msg, error].concat(categories));\n\n    var _a;\n  };\n\n  Category.prototype.getCategoryPath = function () {\n    var result = this.name;\n    var cat = this.parent;\n\n    while (cat != null) {\n      result = cat.name + \"#\" + result;\n      cat = cat.parent;\n    }\n\n    return result;\n  };\n\n  Object.defineProperty(Category.prototype, \"id\", {\n    /**\n     * Returns the id for this category (this\n     * is for internal purposes only).\n     * @returns {number} Id\n     */\n    get: function () {\n      return this._id;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Category.prototype.loadCategoryLogger = function () {\n    if (!this._logger) {\n      this._logger = CategoryService_1.CategoryServiceImpl.getInstance().getLogger(this);\n    }\n\n    if (typeof this._logger === \"undefined\" || this._logger === null) {\n      throw new Error(\"Failed to load a logger for category (should not happen): \" + this.name);\n    }\n  };\n\n  Category.nextId = function () {\n    return Category.currentId++;\n  };\n\n  Category.currentId = 1;\n  return Category;\n}();\n\nexports.Category = Category;","map":{"version":3,"sources":["../../../../src/logging/log/category/Category.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\nvar CategoryService_1 = require(\"./CategoryService\");\n/**\n * Category for use with categorized logging.\n * At minimum you need one category, which will serve as the root category.\n * You can create child categories (like a tree). You can have multiple root\n * categories.\n */\nvar Category = (function () {\n    function Category(name, parent) {\n        if (parent === void 0) { parent = null; }\n        this._children = [];\n        this._logLevel = LoggerOptions_1.LogLevel.Error;\n        if (name.indexOf(\"#\") !== -1) {\n            throw new Error(\"Cannot use # in a name of a Category\");\n        }\n        this._id = Category.nextId();\n        this._name = name;\n        this._parent = parent;\n        if (this._parent !== null) {\n            this._parent._children.push(this);\n        }\n        CategoryService_1.CategoryServiceImpl.getInstance().registerCategory(this);\n    }\n    Object.defineProperty(Category.prototype, \"name\", {\n        get: function () {\n            return this._name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Category.prototype, \"parent\", {\n        get: function () {\n            return this._parent;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Category.prototype, \"children\", {\n        get: function () {\n            return this._children;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Category.prototype, \"logLevel\", {\n        get: function () {\n            return this._logLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Category.prototype.trace = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this.loadCategoryLogger();\n        (_a = this._logger).trace.apply(_a, [msg].concat(categories));\n        var _a;\n    };\n    Category.prototype.debug = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this.loadCategoryLogger();\n        (_a = this._logger).debug.apply(_a, [msg].concat(categories));\n        var _a;\n    };\n    Category.prototype.info = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this.loadCategoryLogger();\n        (_a = this._logger).info.apply(_a, [msg].concat(categories));\n        var _a;\n    };\n    Category.prototype.warn = function (msg) {\n        var categories = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            categories[_i - 1] = arguments[_i];\n        }\n        this.loadCategoryLogger();\n        (_a = this._logger).warn.apply(_a, [msg].concat(categories));\n        var _a;\n    };\n    Category.prototype.error = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        this.loadCategoryLogger();\n        (_a = this._logger).error.apply(_a, [msg, error].concat(categories));\n        var _a;\n    };\n    Category.prototype.fatal = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        this.loadCategoryLogger();\n        (_a = this._logger).fatal.apply(_a, [msg, error].concat(categories));\n        var _a;\n    };\n    Category.prototype.resolved = function (msg, error) {\n        var categories = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            categories[_i - 2] = arguments[_i];\n        }\n        this.loadCategoryLogger();\n        (_a = this._logger).resolved.apply(_a, [msg, error].concat(categories));\n        var _a;\n    };\n    Category.prototype.log = function (level, msg, error) {\n        var categories = [];\n        for (var _i = 3; _i < arguments.length; _i++) {\n            categories[_i - 3] = arguments[_i];\n        }\n        this.loadCategoryLogger();\n        (_a = this._logger).log.apply(_a, [level, msg, error].concat(categories));\n        var _a;\n    };\n    Category.prototype.getCategoryPath = function () {\n        var result = this.name;\n        var cat = this.parent;\n        while (cat != null) {\n            result = cat.name + \"#\" + result;\n            cat = cat.parent;\n        }\n        return result;\n    };\n    Object.defineProperty(Category.prototype, \"id\", {\n        /**\n         * Returns the id for this category (this\n         * is for internal purposes only).\n         * @returns {number} Id\n         */\n        get: function () {\n            return this._id;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Category.prototype.loadCategoryLogger = function () {\n        if (!this._logger) {\n            this._logger = CategoryService_1.CategoryServiceImpl.getInstance().getLogger(this);\n        }\n        if (typeof this._logger === \"undefined\" || this._logger === null) {\n            throw new Error(\"Failed to load a logger for category (should not happen): \" + this.name);\n        }\n    };\n    Category.nextId = function () {\n        return Category.currentId++;\n    };\n    Category.currentId = 1;\n    return Category;\n}());\nexports.Category = Category;\n//# sourceMappingURL=Category.js.map"]},"metadata":{},"sourceType":"script"}