{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Oracle = exports.OutdatedDataError = void 0;\n\nconst packet = require(\"dns-packet\");\n\nconst types = require(\"dns-packet/types\");\n\nconst ethers_1 = require(\"ethers\");\n\nconst DNSSEC__factory_1 = require(\"./typechain/factories/DNSSEC__factory\");\n\nconst log_1 = require(\"./log\");\n\nclass OutdatedDataError extends Error {\n  constructor(answer) {\n    super(`Oracle has a newer version of the ${answer.signature.data.typeCovered} RRSET on ${answer.signature.name}`);\n    this.name = 'OudatedDataError';\n    this.answer = answer;\n  }\n\n}\n\nexports.OutdatedDataError = OutdatedDataError;\n\nclass Oracle {\n  constructor(address, provider) {\n    let now = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n    this.contract = DNSSEC__factory_1.DNSSEC__factory.connect(address, provider);\n    this.now = now || Date.now;\n  } // Takes a `ProvableAnswer` returned by dnsprovejs and converts it into a blob of proof\n  // data for the DNSSEC oracle contract.\n\n\n  getProofData(answer) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const allProofs = answer.proofs.concat([answer.answer]);\n\n      for (let i = allProofs.length - 1; i >= 0; i--) {\n        if (yield this.knownProof(allProofs[i])) {\n          if (i == allProofs.length - 1) {\n            console.log(`All proofs for ${answer.answer.signature.data.typeCovered} ${answer.answer.signature.name} are already known`);\n            return {\n              data: Buffer.of(),\n              proof: allProofs[allProofs.length - 1].toWire(false)\n            };\n          }\n\n          log_1.logger.info(`${answer.answer.signature.data.typeCovered} ${answer.answer.signature.name} has ${i + 1} of ${allProofs.length} proofs already known`);\n          return {\n            data: this.encodeProofs(allProofs.slice(i + 1, allProofs.length)),\n            proof: allProofs[i].toWire(false)\n          };\n        }\n      }\n\n      log_1.logger.info(`${answer.answer.signature.data.typeCovered} ${answer.answer.signature.name} has no proofs already known`);\n      return {\n        data: this.encodeProofs(allProofs),\n        proof: Buffer.from(ethers_1.utils.arrayify(yield this.contract.anchors()))\n      };\n    });\n  }\n\n  knownProof(proof) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const name = packet.name.encode(proof.signature.name);\n      const type = types.toType(proof.signature.data.typeCovered);\n      const [inception, inserted, hash] = yield this.contract.rrdata(type, name);\n\n      if (inception > proof.signature.data.inception) {\n        throw new OutdatedDataError(proof);\n      }\n\n      const expired = inserted.toNumber() + proof.signature.data.originalTTL < this.now() / 1000;\n      const proofHash = ethers_1.utils.keccak256(proof.toWire(false)).slice(0, 42);\n      return hash == proofHash && !expired;\n    });\n  }\n\n  encodeProofs(proofs) {\n    const buffers = new Array(proofs.length);\n\n    for (let i = 0; i < proofs.length; i++) {\n      const proof = proofs[i];\n      const data = proof.toWire(true);\n      const sig = proof.signature.data.signature;\n      const buf = Buffer.alloc(data.length + sig.length + 4);\n      buf.writeInt16BE(data.length, 0);\n      data.copy(buf, 2);\n      buf.writeInt16BE(sig.length, data.length + 2);\n      sig.copy(buf, data.length + 4);\n      buffers[i] = buf;\n    }\n\n    return Buffer.concat(buffers);\n  }\n\n}\n\nexports.Oracle = Oracle;","map":{"version":3,"sources":["/Users/karel/Documents/eth/my-eth-app/node_modules/@ensdomains/dnssecoraclejs-017/dist/oracle.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","Oracle","OutdatedDataError","packet","require","types","ethers_1","DNSSEC__factory_1","log_1","Error","constructor","answer","signature","data","typeCovered","name","address","provider","now","undefined","contract","DNSSEC__factory","connect","Date","getProofData","allProofs","proofs","concat","i","length","knownProof","console","log","Buffer","of","proof","toWire","logger","info","encodeProofs","slice","from","utils","arrayify","anchors","encode","type","toType","inception","inserted","hash","rrdata","expired","toNumber","originalTTL","proofHash","keccak256","buffers","Array","sig","buf","alloc","writeInt16BE","copy"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Oracle = exports.OutdatedDataError = void 0;\nconst packet = require(\"dns-packet\");\nconst types = require(\"dns-packet/types\");\nconst ethers_1 = require(\"ethers\");\nconst DNSSEC__factory_1 = require(\"./typechain/factories/DNSSEC__factory\");\nconst log_1 = require(\"./log\");\nclass OutdatedDataError extends Error {\n    constructor(answer) {\n        super(`Oracle has a newer version of the ${answer.signature.data.typeCovered} RRSET on ${answer.signature.name}`);\n        this.name = 'OudatedDataError';\n        this.answer = answer;\n    }\n}\nexports.OutdatedDataError = OutdatedDataError;\nclass Oracle {\n    constructor(address, provider, now = undefined) {\n        this.contract = DNSSEC__factory_1.DNSSEC__factory.connect(address, provider);\n        this.now = now || Date.now;\n    }\n    // Takes a `ProvableAnswer` returned by dnsprovejs and converts it into a blob of proof\n    // data for the DNSSEC oracle contract.\n    getProofData(answer) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const allProofs = answer.proofs.concat([answer.answer]);\n            for (let i = allProofs.length - 1; i >= 0; i--) {\n                if (yield this.knownProof(allProofs[i])) {\n                    if (i == allProofs.length - 1) {\n                        console.log(`All proofs for ${answer.answer.signature.data.typeCovered} ${answer.answer.signature.name} are already known`);\n                        return { data: Buffer.of(), proof: allProofs[allProofs.length - 1].toWire(false) };\n                    }\n                    log_1.logger.info(`${answer.answer.signature.data.typeCovered} ${answer.answer.signature.name} has ${i + 1} of ${allProofs.length} proofs already known`);\n                    return {\n                        data: this.encodeProofs(allProofs.slice(i + 1, allProofs.length)),\n                        proof: allProofs[i].toWire(false),\n                    };\n                }\n            }\n            log_1.logger.info(`${answer.answer.signature.data.typeCovered} ${answer.answer.signature.name} has no proofs already known`);\n            return {\n                data: this.encodeProofs(allProofs),\n                proof: Buffer.from(ethers_1.utils.arrayify(yield this.contract.anchors())),\n            };\n        });\n    }\n    knownProof(proof) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const name = packet.name.encode(proof.signature.name);\n            const type = types.toType(proof.signature.data.typeCovered);\n            const [inception, inserted, hash] = yield this.contract.rrdata(type, name);\n            if (inception > proof.signature.data.inception) {\n                throw new OutdatedDataError(proof);\n            }\n            const expired = inserted.toNumber() + proof.signature.data.originalTTL < this.now() / 1000;\n            const proofHash = ethers_1.utils.keccak256(proof.toWire(false)).slice(0, 42);\n            return (hash == proofHash) && !expired;\n        });\n    }\n    encodeProofs(proofs) {\n        const buffers = new Array(proofs.length);\n        for (let i = 0; i < proofs.length; i++) {\n            const proof = proofs[i];\n            const data = proof.toWire(true);\n            const sig = proof.signature.data.signature;\n            const buf = Buffer.alloc(data.length + sig.length + 4);\n            buf.writeInt16BE(data.length, 0);\n            data.copy(buf, 2);\n            buf.writeInt16BE(sig.length, data.length + 2);\n            sig.copy(buf, data.length + 4);\n            buffers[i] = buf;\n        }\n        return Buffer.concat(buffers);\n    }\n}\nexports.Oracle = Oracle;\n"]},"metadata":{},"sourceType":"script"}