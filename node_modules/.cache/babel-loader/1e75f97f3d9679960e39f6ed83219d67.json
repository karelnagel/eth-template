{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ST = require(\"stacktrace-js\");\n\nvar LoggerOptions_1 = require(\"../log/LoggerOptions\");\n/**\n * Some utilities to format messages.\n */\n\n\nvar MessageFormatUtils = function () {\n  function MessageFormatUtils() {}\n  /**\n   * Render given date in given DateFormat and return as String.\n   * @param date Date\n   * @param dateFormat Format\n   * @returns {string} Formatted date\n   */\n\n\n  MessageFormatUtils.renderDate = function (date, dateFormat) {\n    var lpad = function (value, chars, padWith) {\n      var howMany = chars - value.length;\n\n      if (howMany > 0) {\n        var res = \"\";\n\n        for (var i = 0; i < howMany; i++) {\n          res += padWith;\n        }\n\n        res += value;\n        return res;\n      }\n\n      return value;\n    };\n\n    var fullYear = function (d) {\n      return lpad(d.getFullYear().toString(), 4, \"0\");\n    };\n\n    var month = function (d) {\n      return lpad((d.getMonth() + 1).toString(), 2, \"0\");\n    };\n\n    var day = function (d) {\n      return lpad(d.getDate().toString(), 2, \"0\");\n    };\n\n    var hours = function (d) {\n      return lpad(d.getHours().toString(), 2, \"0\");\n    };\n\n    var minutes = function (d) {\n      return lpad(d.getMinutes().toString(), 2, \"0\");\n    };\n\n    var seconds = function (d) {\n      return lpad(d.getSeconds().toString(), 2, \"0\");\n    };\n\n    var millis = function (d) {\n      return lpad(d.getMilliseconds().toString(), 3, \"0\");\n    };\n\n    var dateSeparator = dateFormat.dateSeparator;\n    var ds = \"\";\n\n    switch (dateFormat.formatEnum) {\n      case LoggerOptions_1.DateFormatEnum.Default:\n        // yyyy-mm-dd hh:mm:ss,m\n        ds = fullYear(date) + dateSeparator + month(date) + dateSeparator + day(date) + \" \" + hours(date) + \":\" + minutes(date) + \":\" + seconds(date) + \",\" + millis(date);\n        break;\n\n      case LoggerOptions_1.DateFormatEnum.YearMonthDayTime:\n        ds = fullYear(date) + dateSeparator + month(date) + dateSeparator + day(date) + \" \" + hours(date) + \":\" + minutes(date) + \":\" + seconds(date);\n        break;\n\n      case LoggerOptions_1.DateFormatEnum.YearDayMonthWithFullTime:\n        ds = fullYear(date) + dateSeparator + day(date) + dateSeparator + month(date) + \" \" + hours(date) + \":\" + minutes(date) + \":\" + seconds(date) + \",\" + millis(date);\n        break;\n\n      case LoggerOptions_1.DateFormatEnum.YearDayMonthTime:\n        ds = fullYear(date) + dateSeparator + day(date) + dateSeparator + month(date) + \" \" + hours(date) + \":\" + minutes(date) + \":\" + seconds(date);\n        break;\n\n      default:\n        throw new Error(\"Unsupported date format enum: \" + dateFormat.formatEnum);\n    }\n\n    return ds;\n  };\n  /**\n   * Renders given category log message in default format.\n   * @param msg Message to format\n   * @param addStack If true adds the stack to the output, otherwise skips it\n   * @returns {string} Formatted message\n   */\n\n\n  MessageFormatUtils.renderDefaultMessage = function (msg, addStack) {\n    var result = \"\";\n    var logFormat = msg.logFormat;\n\n    if (logFormat.showTimeStamp) {\n      result += MessageFormatUtils.renderDate(msg.date, logFormat.dateFormat) + \" \";\n    }\n\n    result += LoggerOptions_1.LogLevel[msg.level].toUpperCase();\n\n    if (msg.isResolvedErrorMessage) {\n      result += \" (resolved)\";\n    }\n\n    result += \" \";\n\n    if (logFormat.showCategoryName) {\n      result += \"[\";\n      msg.categories.forEach(function (value, idx) {\n        if (idx > 0) {\n          result += \", \";\n        }\n\n        result += value.name;\n      });\n      result += \"]\";\n    } // Get the normal string message first\n\n\n    var actualStringMsg = \"\";\n    var dataString = \"\";\n    var messageOrLogData = msg.message;\n\n    if (typeof messageOrLogData === \"string\") {\n      actualStringMsg = messageOrLogData;\n    } else {\n      var logData = messageOrLogData;\n      actualStringMsg = logData.msg; // We do have data?\n\n      if (logData.data) {\n        dataString = \" [data]: \" + (logData.ds ? logData.ds(logData.data) : JSON.stringify(logData.data));\n      }\n    }\n\n    result += \" \" + actualStringMsg + \"\" + dataString;\n\n    if (addStack && msg.errorAsStack !== null) {\n      result += \"\\n\" + msg.errorAsStack;\n    }\n\n    return result;\n  };\n  /**\n   * Renders given log4j log message in default format.\n   * @param msg Message to format\n   * @param addStack If true adds the stack to the output, otherwise skips it\n   * @returns {string} Formatted message\n   */\n\n\n  MessageFormatUtils.renderDefaultLog4jMessage = function (msg, addStack) {\n    var format = msg.logGroupRule.logFormat;\n    var result = \"\";\n\n    if (format.showTimeStamp) {\n      result += MessageFormatUtils.renderDate(msg.date, format.dateFormat) + \" \";\n    }\n\n    result += LoggerOptions_1.LogLevel[msg.level].toUpperCase() + \" \";\n\n    if (format.showLoggerName) {\n      result += \"[\" + msg.loggerName + \"]\";\n    } // Get the normal string message first\n\n\n    var actualStringMsg = \"\";\n    var dataString = \"\";\n\n    if (typeof msg.message === \"string\") {\n      actualStringMsg = msg.message;\n    } else {\n      var logData = msg.message;\n      actualStringMsg = logData.msg; // We do have data?\n\n      if (logData.data) {\n        dataString = \" [data]: \" + (logData.ds ? logData.ds(logData.data) : JSON.stringify(logData.data));\n      }\n    }\n\n    result += \" \" + actualStringMsg + \"\" + dataString;\n\n    if (addStack && msg.errorAsStack !== null) {\n      result += \"\\n\" + msg.errorAsStack;\n    }\n\n    return result;\n  };\n  /**\n   * Render error as stack\n   * @param error Return error as Promise\n   * @returns {Promise<string>|Promise} Promise for stack\n   */\n\n\n  MessageFormatUtils.renderError = function (error) {\n    var result = error.name + \": \" + error.message + \"\\n@\";\n    return new Promise(function (resolve) {\n      // This one has a promise too\n      ST.fromError(error, {\n        offline: true\n      }).then(function (frames) {\n        var stackStr = frames.map(function (frame) {\n          return frame.toString();\n        }).join(\"\\n  \");\n        result += \"\\n\" + stackStr; // This resolves our returned promise\n\n        resolve(result);\n      }).catch(function () {\n        result = \"Unexpected error object was passed in. \";\n\n        try {\n          result += \"Could not resolve it, stringified object: \" + JSON.stringify(error);\n        } catch (e) {\n          // Cannot stringify can only tell something was wrong.\n          result += \"Could not resolve it or stringify it.\";\n        }\n\n        resolve(result);\n      });\n    });\n  };\n\n  return MessageFormatUtils;\n}();\n\nexports.MessageFormatUtils = MessageFormatUtils;","map":{"version":3,"sources":["../../../src/logging/utils/MessageUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ST = require(\"stacktrace-js\");\nvar LoggerOptions_1 = require(\"../log/LoggerOptions\");\n/**\n * Some utilities to format messages.\n */\nvar MessageFormatUtils = (function () {\n    function MessageFormatUtils() {\n    }\n    /**\n     * Render given date in given DateFormat and return as String.\n     * @param date Date\n     * @param dateFormat Format\n     * @returns {string} Formatted date\n     */\n    MessageFormatUtils.renderDate = function (date, dateFormat) {\n        var lpad = function (value, chars, padWith) {\n            var howMany = chars - value.length;\n            if (howMany > 0) {\n                var res = \"\";\n                for (var i = 0; i < howMany; i++) {\n                    res += padWith;\n                }\n                res += value;\n                return res;\n            }\n            return value;\n        };\n        var fullYear = function (d) {\n            return lpad(d.getFullYear().toString(), 4, \"0\");\n        };\n        var month = function (d) {\n            return lpad((d.getMonth() + 1).toString(), 2, \"0\");\n        };\n        var day = function (d) {\n            return lpad(d.getDate().toString(), 2, \"0\");\n        };\n        var hours = function (d) {\n            return lpad(d.getHours().toString(), 2, \"0\");\n        };\n        var minutes = function (d) {\n            return lpad(d.getMinutes().toString(), 2, \"0\");\n        };\n        var seconds = function (d) {\n            return lpad(d.getSeconds().toString(), 2, \"0\");\n        };\n        var millis = function (d) {\n            return lpad(d.getMilliseconds().toString(), 3, \"0\");\n        };\n        var dateSeparator = dateFormat.dateSeparator;\n        var ds = \"\";\n        switch (dateFormat.formatEnum) {\n            case LoggerOptions_1.DateFormatEnum.Default:\n                // yyyy-mm-dd hh:mm:ss,m\n                ds = fullYear(date) + dateSeparator + month(date) + dateSeparator + day(date) + \" \" +\n                    hours(date) + \":\" + minutes(date) + \":\" + seconds(date) + \",\" + millis(date);\n                break;\n            case LoggerOptions_1.DateFormatEnum.YearMonthDayTime:\n                ds = fullYear(date) + dateSeparator + month(date) + dateSeparator + day(date) + \" \" +\n                    hours(date) + \":\" + minutes(date) + \":\" + seconds(date);\n                break;\n            case LoggerOptions_1.DateFormatEnum.YearDayMonthWithFullTime:\n                ds = fullYear(date) + dateSeparator + day(date) + dateSeparator + month(date) + \" \" +\n                    hours(date) + \":\" + minutes(date) + \":\" + seconds(date) + \",\" + millis(date);\n                break;\n            case LoggerOptions_1.DateFormatEnum.YearDayMonthTime:\n                ds = fullYear(date) + dateSeparator + day(date) + dateSeparator + month(date) + \" \" +\n                    hours(date) + \":\" + minutes(date) + \":\" + seconds(date);\n                break;\n            default:\n                throw new Error(\"Unsupported date format enum: \" + dateFormat.formatEnum);\n        }\n        return ds;\n    };\n    /**\n     * Renders given category log message in default format.\n     * @param msg Message to format\n     * @param addStack If true adds the stack to the output, otherwise skips it\n     * @returns {string} Formatted message\n     */\n    MessageFormatUtils.renderDefaultMessage = function (msg, addStack) {\n        var result = \"\";\n        var logFormat = msg.logFormat;\n        if (logFormat.showTimeStamp) {\n            result += MessageFormatUtils.renderDate(msg.date, logFormat.dateFormat) + \" \";\n        }\n        result += LoggerOptions_1.LogLevel[msg.level].toUpperCase();\n        if (msg.isResolvedErrorMessage) {\n            result += \" (resolved)\";\n        }\n        result += \" \";\n        if (logFormat.showCategoryName) {\n            result += \"[\";\n            msg.categories.forEach(function (value, idx) {\n                if (idx > 0) {\n                    result += \", \";\n                }\n                result += value.name;\n            });\n            result += \"]\";\n        }\n        // Get the normal string message first\n        var actualStringMsg = \"\";\n        var dataString = \"\";\n        var messageOrLogData = msg.message;\n        if (typeof messageOrLogData === \"string\") {\n            actualStringMsg = messageOrLogData;\n        }\n        else {\n            var logData = messageOrLogData;\n            actualStringMsg = logData.msg;\n            // We do have data?\n            if (logData.data) {\n                dataString = \" [data]: \" + (logData.ds ? logData.ds(logData.data) : JSON.stringify(logData.data));\n            }\n        }\n        result += \" \" + actualStringMsg + \"\" + dataString;\n        if (addStack && msg.errorAsStack !== null) {\n            result += \"\\n\" + msg.errorAsStack;\n        }\n        return result;\n    };\n    /**\n     * Renders given log4j log message in default format.\n     * @param msg Message to format\n     * @param addStack If true adds the stack to the output, otherwise skips it\n     * @returns {string} Formatted message\n     */\n    MessageFormatUtils.renderDefaultLog4jMessage = function (msg, addStack) {\n        var format = msg.logGroupRule.logFormat;\n        var result = \"\";\n        if (format.showTimeStamp) {\n            result += MessageFormatUtils.renderDate(msg.date, format.dateFormat) + \" \";\n        }\n        result += LoggerOptions_1.LogLevel[msg.level].toUpperCase() + \" \";\n        if (format.showLoggerName) {\n            result += \"[\" + msg.loggerName + \"]\";\n        }\n        // Get the normal string message first\n        var actualStringMsg = \"\";\n        var dataString = \"\";\n        if (typeof msg.message === \"string\") {\n            actualStringMsg = msg.message;\n        }\n        else {\n            var logData = msg.message;\n            actualStringMsg = logData.msg;\n            // We do have data?\n            if (logData.data) {\n                dataString = \" [data]: \" + (logData.ds ? logData.ds(logData.data) : JSON.stringify(logData.data));\n            }\n        }\n        result += \" \" + actualStringMsg + \"\" + dataString;\n        if (addStack && msg.errorAsStack !== null) {\n            result += \"\\n\" + msg.errorAsStack;\n        }\n        return result;\n    };\n    /**\n     * Render error as stack\n     * @param error Return error as Promise\n     * @returns {Promise<string>|Promise} Promise for stack\n     */\n    MessageFormatUtils.renderError = function (error) {\n        var result = error.name + \": \" + error.message + \"\\n@\";\n        return new Promise(function (resolve) {\n            // This one has a promise too\n            ST.fromError(error, { offline: true }).then(function (frames) {\n                var stackStr = (frames.map(function (frame) {\n                    return frame.toString();\n                })).join(\"\\n  \");\n                result += \"\\n\" + stackStr;\n                // This resolves our returned promise\n                resolve(result);\n            }).catch(function () {\n                result = \"Unexpected error object was passed in. \";\n                try {\n                    result += \"Could not resolve it, stringified object: \" + JSON.stringify(error);\n                }\n                catch (e) {\n                    // Cannot stringify can only tell something was wrong.\n                    result += \"Could not resolve it or stringify it.\";\n                }\n                resolve(result);\n            });\n        });\n    };\n    return MessageFormatUtils;\n}());\nexports.MessageFormatUtils = MessageFormatUtils;\n//# sourceMappingURL=MessageUtils.js.map"]},"metadata":{},"sourceType":"script"}