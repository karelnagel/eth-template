{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar CategoryService_1 = require(\"../log/category/CategoryService\");\n\nvar LoggerOptions_1 = require(\"../log/LoggerOptions\");\n\nvar MessageUtils_1 = require(\"../utils/MessageUtils\");\n\nvar ExtensionHelper = function () {\n  function ExtensionHelper() {// Private constructor\n  }\n  /**\n   * Enables the window event listener to listen to messages (from extensions).\n   * Can be registered/enabled only once.\n   */\n\n\n  ExtensionHelper.register = function () {\n    if (!ExtensionHelper.registered) {\n      var listener = function (evt) {\n        var msg = evt.data;\n\n        if (msg !== null) {\n          ExtensionHelper.processMessageFromExtension(msg);\n        }\n      };\n\n      if (typeof window !== \"undefined\" && typeof window.removeEventListener !== \"undefined\" && typeof window.addEventListener !== \"undefined\") {\n        window.removeEventListener(\"message\", listener);\n        window.addEventListener(\"message\", listener);\n        ExtensionHelper.registered = true;\n      }\n    }\n  };\n\n  ExtensionHelper.processMessageFromExtension = function (msg) {\n    if (!ExtensionHelper.registered) {\n      return;\n    }\n    /* tslint:disable:no-console */\n\n\n    if (msg.from === \"tsl-extension\") {\n      var data = msg.data;\n\n      switch (data.type) {\n        case \"register\":\n          ExtensionHelper.enableExtensionIntegration();\n          break;\n\n        case \"request-change-loglevel\":\n          var valueRequest = data.value;\n          var catsApplied = ExtensionHelper.applyLogLevel(valueRequest.categoryId, valueRequest.logLevel, valueRequest.recursive);\n\n          if (catsApplied.length > 0) {\n            // Send changes back\n            ExtensionHelper.sendCategoriesRuntimeUpdateMessage(catsApplied);\n          }\n\n          break;\n\n        default:\n          console.log(\"Unknown command to process message from extension, command was: \" + data.type);\n          break;\n      }\n    }\n    /* tslint:enable:no-console */\n\n  };\n\n  ExtensionHelper.sendCategoryLogMessage = function (msg) {\n    if (!ExtensionHelper.registered) {\n      return;\n    }\n\n    var categoryIds = msg.categories.map(function (cat) {\n      return cat.id;\n    });\n    var content = {\n      type: \"log-message\",\n      value: {\n        categories: categoryIds,\n        errorAsStack: msg.errorAsStack,\n        formattedMessage: MessageUtils_1.MessageFormatUtils.renderDefaultMessage(msg, false),\n        logLevel: LoggerOptions_1.LogLevel[msg.level].toString(),\n        message: msg.messageAsString,\n        resolvedErrorMessage: msg.isResolvedErrorMessage\n      }\n    };\n    var message = {\n      data: content,\n      from: \"tsl-logging\"\n    };\n    ExtensionHelper.sendMessage(message);\n  };\n\n  ExtensionHelper.sendCategoriesRuntimeUpdateMessage = function (categories) {\n    if (!ExtensionHelper.registered) {\n      return;\n    }\n\n    var service = CategoryService_1.CategoryServiceImpl.getInstance();\n    var catLevels = {\n      categories: Array()\n    };\n    categories.forEach(function (cat) {\n      var catSettings = service.getCategorySettings(cat);\n\n      if (catSettings != null) {\n        catLevels.categories.push({\n          id: cat.id,\n          logLevel: LoggerOptions_1.LogLevel[catSettings.logLevel].toString()\n        });\n      }\n    });\n    var content = {\n      type: \"categories-rt-update\",\n      value: catLevels\n    };\n    var message = {\n      data: content,\n      from: \"tsl-logging\"\n    };\n    ExtensionHelper.sendMessage(message);\n  };\n\n  ExtensionHelper.sendRootCategoriesToExtension = function () {\n    if (!ExtensionHelper.registered) {\n      return;\n    }\n\n    var categories = CategoryService_1.CategoryServiceImpl.getInstance().getRootCategories().map(function (cat) {\n      return ExtensionHelper.getCategoryAsJSON(cat);\n    });\n    var content = {\n      type: \"root-categories-tree\",\n      value: categories\n    };\n    var message = {\n      data: content,\n      from: \"tsl-logging\"\n    };\n    ExtensionHelper.sendMessage(message);\n  };\n  /**\n   * If extension integration is enabled, will send the root categories over to the extension.\n   * Otherwise does nothing.\n   */\n\n\n  ExtensionHelper.getCategoryAsJSON = function (cat) {\n    var childCategories = cat.children.map(function (child) {\n      return ExtensionHelper.getCategoryAsJSON(child);\n    });\n    return {\n      children: childCategories,\n      id: cat.id,\n      logLevel: LoggerOptions_1.LogLevel[cat.logLevel].toString(),\n      name: cat.name,\n      parentId: cat.parent != null ? cat.parent.id : null\n    };\n  };\n\n  ExtensionHelper.applyLogLevel = function (categoryId, logLevel, recursive) {\n    var cats = [];\n    var category = CategoryService_1.CategoryServiceImpl.getInstance().getCategoryById(categoryId);\n\n    if (category != null) {\n      ExtensionHelper._applyLogLevelRecursive(category, LoggerOptions_1.LogLevel.fromString(logLevel), recursive, cats);\n    } else {\n      /* tslint:disable:no-console */\n      console.log(\"Could not change log level, failed to find category with id: \" + categoryId);\n      /* tslint:enable:no-console */\n    }\n\n    return cats;\n  };\n\n  ExtensionHelper._applyLogLevelRecursive = function (category, logLevel, recursive, cats) {\n    var categorySettings = CategoryService_1.CategoryServiceImpl.getInstance().getCategorySettings(category);\n\n    if (categorySettings != null) {\n      categorySettings.logLevel = logLevel;\n      cats.push(category);\n\n      if (recursive) {\n        category.children.forEach(function (child) {\n          ExtensionHelper._applyLogLevelRecursive(child, logLevel, recursive, cats);\n        });\n      }\n    }\n  };\n\n  ExtensionHelper.getAllCategories = function () {\n    var cats = [];\n\n    var addCats = function (cat, allCats) {\n      allCats.push(cat);\n      cat.children.forEach(function (catChild) {\n        addCats(catChild, allCats);\n      });\n    };\n\n    CategoryService_1.CategoryServiceImpl.getInstance().getRootCategories().forEach(function (cat) {\n      addCats(cat, cats);\n    });\n    return cats;\n  };\n\n  ExtensionHelper.sendMessage = function (msg) {\n    if (!ExtensionHelper.registered) {\n      return;\n    }\n\n    if (typeof window !== \"undefined\" && typeof window.postMessage !== \"undefined\") {\n      window.postMessage(msg, \"*\");\n    }\n  };\n  /**\n   *  Extension framework will call this to enable the integration between two,\n   *  after this call the framework will respond with postMessage() messages.\n   */\n\n\n  ExtensionHelper.enableExtensionIntegration = function () {\n    if (!ExtensionHelper.registered) {\n      return;\n    }\n\n    var instance = CategoryService_1.CategoryServiceImpl.getInstance();\n    instance.enableExtensionIntegration(); // Send over all categories\n\n    ExtensionHelper.sendRootCategoriesToExtension(); // Send over the current runtime levels\n\n    var cats = ExtensionHelper.getAllCategories();\n    ExtensionHelper.sendCategoriesRuntimeUpdateMessage(cats);\n  };\n\n  ExtensionHelper.registered = false;\n  return ExtensionHelper;\n}();\n\nexports.ExtensionHelper = ExtensionHelper;","map":{"version":3,"sources":["../../../src/logging/extension/ExtensionHelper.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar CategoryService_1 = require(\"../log/category/CategoryService\");\nvar LoggerOptions_1 = require(\"../log/LoggerOptions\");\nvar MessageUtils_1 = require(\"../utils/MessageUtils\");\nvar ExtensionHelper = (function () {\n    function ExtensionHelper() {\n        // Private constructor\n    }\n    /**\n     * Enables the window event listener to listen to messages (from extensions).\n     * Can be registered/enabled only once.\n     */\n    ExtensionHelper.register = function () {\n        if (!ExtensionHelper.registered) {\n            var listener = function (evt) {\n                var msg = evt.data;\n                if (msg !== null) {\n                    ExtensionHelper.processMessageFromExtension(msg);\n                }\n            };\n            if (typeof window !== \"undefined\" && typeof window.removeEventListener !== \"undefined\" && typeof window.addEventListener !== \"undefined\") {\n                window.removeEventListener(\"message\", listener);\n                window.addEventListener(\"message\", listener);\n                ExtensionHelper.registered = true;\n            }\n        }\n    };\n    ExtensionHelper.processMessageFromExtension = function (msg) {\n        if (!ExtensionHelper.registered) {\n            return;\n        }\n        /* tslint:disable:no-console */\n        if (msg.from === \"tsl-extension\") {\n            var data = msg.data;\n            switch (data.type) {\n                case \"register\":\n                    ExtensionHelper.enableExtensionIntegration();\n                    break;\n                case \"request-change-loglevel\":\n                    var valueRequest = data.value;\n                    var catsApplied = ExtensionHelper.applyLogLevel(valueRequest.categoryId, valueRequest.logLevel, valueRequest.recursive);\n                    if (catsApplied.length > 0) {\n                        // Send changes back\n                        ExtensionHelper.sendCategoriesRuntimeUpdateMessage(catsApplied);\n                    }\n                    break;\n                default:\n                    console.log(\"Unknown command to process message from extension, command was: \" + data.type);\n                    break;\n            }\n        }\n        /* tslint:enable:no-console */\n    };\n    ExtensionHelper.sendCategoryLogMessage = function (msg) {\n        if (!ExtensionHelper.registered) {\n            return;\n        }\n        var categoryIds = msg.categories.map(function (cat) {\n            return cat.id;\n        });\n        var content = {\n            type: \"log-message\",\n            value: {\n                categories: categoryIds,\n                errorAsStack: msg.errorAsStack,\n                formattedMessage: MessageUtils_1.MessageFormatUtils.renderDefaultMessage(msg, false),\n                logLevel: LoggerOptions_1.LogLevel[msg.level].toString(),\n                message: msg.messageAsString,\n                resolvedErrorMessage: msg.isResolvedErrorMessage\n            }\n        };\n        var message = {\n            data: content,\n            from: \"tsl-logging\",\n        };\n        ExtensionHelper.sendMessage(message);\n    };\n    ExtensionHelper.sendCategoriesRuntimeUpdateMessage = function (categories) {\n        if (!ExtensionHelper.registered) {\n            return;\n        }\n        var service = CategoryService_1.CategoryServiceImpl.getInstance();\n        var catLevels = { categories: Array() };\n        categories.forEach(function (cat) {\n            var catSettings = service.getCategorySettings(cat);\n            if (catSettings != null) {\n                catLevels.categories.push({ id: cat.id, logLevel: LoggerOptions_1.LogLevel[catSettings.logLevel].toString() });\n            }\n        });\n        var content = {\n            type: \"categories-rt-update\",\n            value: catLevels,\n        };\n        var message = {\n            data: content,\n            from: \"tsl-logging\"\n        };\n        ExtensionHelper.sendMessage(message);\n    };\n    ExtensionHelper.sendRootCategoriesToExtension = function () {\n        if (!ExtensionHelper.registered) {\n            return;\n        }\n        var categories = CategoryService_1.CategoryServiceImpl.getInstance().getRootCategories().map(function (cat) {\n            return ExtensionHelper.getCategoryAsJSON(cat);\n        });\n        var content = {\n            type: \"root-categories-tree\",\n            value: categories\n        };\n        var message = {\n            data: content,\n            from: \"tsl-logging\"\n        };\n        ExtensionHelper.sendMessage(message);\n    };\n    /**\n     * If extension integration is enabled, will send the root categories over to the extension.\n     * Otherwise does nothing.\n     */\n    ExtensionHelper.getCategoryAsJSON = function (cat) {\n        var childCategories = cat.children.map(function (child) {\n            return ExtensionHelper.getCategoryAsJSON(child);\n        });\n        return {\n            children: childCategories,\n            id: cat.id,\n            logLevel: LoggerOptions_1.LogLevel[cat.logLevel].toString(),\n            name: cat.name,\n            parentId: (cat.parent != null ? cat.parent.id : null),\n        };\n    };\n    ExtensionHelper.applyLogLevel = function (categoryId, logLevel, recursive) {\n        var cats = [];\n        var category = CategoryService_1.CategoryServiceImpl.getInstance().getCategoryById(categoryId);\n        if (category != null) {\n            ExtensionHelper._applyLogLevelRecursive(category, LoggerOptions_1.LogLevel.fromString(logLevel), recursive, cats);\n        }\n        else {\n            /* tslint:disable:no-console */\n            console.log(\"Could not change log level, failed to find category with id: \" + categoryId);\n            /* tslint:enable:no-console */\n        }\n        return cats;\n    };\n    ExtensionHelper._applyLogLevelRecursive = function (category, logLevel, recursive, cats) {\n        var categorySettings = CategoryService_1.CategoryServiceImpl.getInstance().getCategorySettings(category);\n        if (categorySettings != null) {\n            categorySettings.logLevel = logLevel;\n            cats.push(category);\n            if (recursive) {\n                category.children.forEach(function (child) {\n                    ExtensionHelper._applyLogLevelRecursive(child, logLevel, recursive, cats);\n                });\n            }\n        }\n    };\n    ExtensionHelper.getAllCategories = function () {\n        var cats = [];\n        var addCats = function (cat, allCats) {\n            allCats.push(cat);\n            cat.children.forEach(function (catChild) {\n                addCats(catChild, allCats);\n            });\n        };\n        CategoryService_1.CategoryServiceImpl.getInstance().getRootCategories().forEach(function (cat) {\n            addCats(cat, cats);\n        });\n        return cats;\n    };\n    ExtensionHelper.sendMessage = function (msg) {\n        if (!ExtensionHelper.registered) {\n            return;\n        }\n        if (typeof window !== \"undefined\" && typeof window.postMessage !== \"undefined\") {\n            window.postMessage(msg, \"*\");\n        }\n    };\n    /**\n     *  Extension framework will call this to enable the integration between two,\n     *  after this call the framework will respond with postMessage() messages.\n     */\n    ExtensionHelper.enableExtensionIntegration = function () {\n        if (!ExtensionHelper.registered) {\n            return;\n        }\n        var instance = CategoryService_1.CategoryServiceImpl.getInstance();\n        instance.enableExtensionIntegration();\n        // Send over all categories\n        ExtensionHelper.sendRootCategoriesToExtension();\n        // Send over the current runtime levels\n        var cats = ExtensionHelper.getAllCategories();\n        ExtensionHelper.sendCategoriesRuntimeUpdateMessage(cats);\n    };\n    ExtensionHelper.registered = false;\n    return ExtensionHelper;\n}());\nexports.ExtensionHelper = ExtensionHelper;\n//# sourceMappingURL=ExtensionHelper.js.map"]},"metadata":{},"sourceType":"script"}