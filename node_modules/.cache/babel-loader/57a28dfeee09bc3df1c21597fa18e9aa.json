{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Options object you can use to configure the LoggerFactory you create at LFService.\n */\n\nvar LoggerFactoryOptions = function () {\n  function LoggerFactoryOptions() {\n    this._logGroupRules = [];\n    this._enabled = true;\n  }\n  /**\n   * Add LogGroupRule, see {LogGroupRule) for details\n   * @param rule Rule to add\n   * @returns {LoggerFactoryOptions} returns itself\n   */\n\n\n  LoggerFactoryOptions.prototype.addLogGroupRule = function (rule) {\n    this._logGroupRules.push(rule);\n\n    return this;\n  };\n  /**\n   * Enable or disable logging completely for the LoggerFactory.\n   * @param enabled True for enabled (default)\n   * @returns {LoggerFactoryOptions} returns itself\n   */\n\n\n  LoggerFactoryOptions.prototype.setEnabled = function (enabled) {\n    this._enabled = enabled;\n    return this;\n  };\n\n  Object.defineProperty(LoggerFactoryOptions.prototype, \"logGroupRules\", {\n    get: function () {\n      return this._logGroupRules;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LoggerFactoryOptions.prototype, \"enabled\", {\n    get: function () {\n      return this._enabled;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return LoggerFactoryOptions;\n}();\n\nexports.LoggerFactoryOptions = LoggerFactoryOptions;","map":{"version":3,"sources":["../../../../src/logging/log/standard/LoggerFactoryOptions.ts"],"names":[],"mappings":";;;;;AAEA;;AAEG;;AACH,IAAA,oBAAA,GAAA,YAAA;AAAA,WAAA,oBAAA,GAAA;AAEU,SAAA,cAAA,GAAiC,EAAjC;AACA,SAAA,QAAA,GAAoB,IAApB;AA6BT;AA3BC;;;;AAIG;;;AACI,EAAA,oBAAA,CAAA,SAAA,CAAA,eAAA,GAAP,UAAuB,IAAvB,EAAyC;AACvC,SAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB;;AACA,WAAO,IAAP;AACD,GAHM;AAKP;;;;AAIG;;;AACI,EAAA,oBAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,OAAlB,EAAkC;AAChC,SAAK,QAAL,GAAgB,OAAhB;AACA,WAAO,IAAP;AACD,GAHM;;AAKP,EAAA,MAAA,CAAA,cAAA,CAAI,oBAAA,CAAA,SAAJ,EAAI,eAAJ,EAAiB;SAAjB,YAAA;AACE,aAAO,KAAK,cAAZ;AACD,KAFgB;oBAAA;;AAAA,GAAjB;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,oBAAA,CAAA,SAAJ,EAAI,SAAJ,EAAW;SAAX,YAAA;AACE,aAAO,KAAK,QAAZ;AACD,KAFU;oBAAA;;AAAA,GAAX;AAGF,SAAA,oBAAA;AAAC,CAhCD,EAAA;;AAAa,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Options object you can use to configure the LoggerFactory you create at LFService.\n */\nvar LoggerFactoryOptions = (function () {\n    function LoggerFactoryOptions() {\n        this._logGroupRules = [];\n        this._enabled = true;\n    }\n    /**\n     * Add LogGroupRule, see {LogGroupRule) for details\n     * @param rule Rule to add\n     * @returns {LoggerFactoryOptions} returns itself\n     */\n    LoggerFactoryOptions.prototype.addLogGroupRule = function (rule) {\n        this._logGroupRules.push(rule);\n        return this;\n    };\n    /**\n     * Enable or disable logging completely for the LoggerFactory.\n     * @param enabled True for enabled (default)\n     * @returns {LoggerFactoryOptions} returns itself\n     */\n    LoggerFactoryOptions.prototype.setEnabled = function (enabled) {\n        this._enabled = enabled;\n        return this;\n    };\n    Object.defineProperty(LoggerFactoryOptions.prototype, \"logGroupRules\", {\n        get: function () {\n            return this._logGroupRules;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LoggerFactoryOptions.prototype, \"enabled\", {\n        get: function () {\n            return this._enabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LoggerFactoryOptions;\n}());\nexports.LoggerFactoryOptions = LoggerFactoryOptions;\n//# sourceMappingURL=LoggerFactoryOptions.js.map"]},"metadata":{},"sourceType":"script"}