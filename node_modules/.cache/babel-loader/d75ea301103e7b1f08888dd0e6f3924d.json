{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Oracle = exports.OutdatedDataError = void 0;\n\nconst packet = require(\"dns-packet\");\n\nconst types = require(\"dns-packet/types\");\n\nconst ethers_1 = require(\"ethers\");\n\nconst DNSSEC__factory_1 = require(\"./typechain/factories/DNSSEC__factory\"); // import { logger } from './log'\n\n\nclass OutdatedDataError extends Error {\n  constructor(answer) {\n    super(`Oracle has a newer version of the ${answer.signature.data.typeCovered} RRSET on ${answer.signature.name}`);\n    this.name = 'OudatedDataError';\n    this.answer = answer;\n  }\n\n}\n\nexports.OutdatedDataError = OutdatedDataError; // Compares two serial numbers using RFC1982 serial number math.\n\nfunction serialNumberGt(i1, i2) {\n  return i1 < i2 && i2 - i1 > 0x7fffffff || i1 > i2 && i1 - i2 < 0x7fffffff;\n}\n\nclass Oracle {\n  constructor(address, provider) {\n    let now = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n    this.contract = DNSSEC__factory_1.DNSSEC__factory.connect(address, provider);\n    this.now = now || Date.now;\n  } // Takes a `ProvableAnswer` returned by dnsprovejs and converts it into a blob of proof\n  // data for the DNSSEC oracle contract.\n\n\n  getProofData(answer) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const allProofs = answer.proofs.concat([answer.answer]);\n\n      for (let i = allProofs.length - 1; i >= 0; i--) {\n        if (yield this.knownProof(allProofs[i])) {\n          if (i == allProofs.length - 1) {\n            console.log(`All proofs for ${answer.answer.signature.data.typeCovered} ${answer.answer.signature.name} are already known`);\n            return {\n              rrsets: [],\n              proof: allProofs[allProofs.length - 1].toWire(false)\n            };\n          }\n\n          console.log(`${answer.answer.signature.data.typeCovered} ${answer.answer.signature.name} has ${i + 1} of ${allProofs.length} proofs already known`);\n          return {\n            rrsets: this.encodeProofs(allProofs.slice(i + 1, allProofs.length)),\n            proof: allProofs[i].toWire(false)\n          };\n        }\n      }\n\n      console.log(`${answer.answer.signature.data.typeCovered} ${answer.answer.signature.name} has no proofs already known`);\n      return {\n        rrsets: this.encodeProofs(allProofs),\n        proof: Buffer.from(ethers_1.utils.arrayify(yield this.contract.anchors()))\n      };\n    });\n  }\n\n  knownProof(proof) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const name = packet.name.encode(proof.signature.name);\n      const type = types.toType(proof.signature.data.typeCovered);\n      const [inception, expiration, hash] = yield this.contract.rrdata(type, name); // If the existing record is newer than our one, throw an error.\n\n      if (serialNumberGt(inception, proof.signature.data.inception)) {\n        throw new OutdatedDataError(proof);\n      }\n\n      const expired = serialNumberGt(this.now() / 1000, expiration);\n      const proofHash = ethers_1.utils.keccak256(proof.toWire(false)).slice(0, 42);\n      return hash == proofHash && !expired;\n    });\n  }\n\n  encodeProofs(proofs) {\n    return proofs.map(proof => ({\n      rrset: proof.toWire(true),\n      sig: proof.signature.data.signature\n    }));\n  }\n\n}\n\nexports.Oracle = Oracle;","map":{"version":3,"sources":["/Users/karel/Documents/eth/my-eth-app/node_modules/@ensdomains/dnssecoraclejs/dist/oracle.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","Oracle","OutdatedDataError","packet","require","types","ethers_1","DNSSEC__factory_1","Error","constructor","answer","signature","data","typeCovered","name","serialNumberGt","i1","i2","address","provider","now","undefined","contract","DNSSEC__factory","connect","Date","getProofData","allProofs","proofs","concat","i","length","knownProof","console","log","rrsets","proof","toWire","encodeProofs","slice","Buffer","from","utils","arrayify","anchors","encode","type","toType","inception","expiration","hash","rrdata","expired","proofHash","keccak256","map","rrset","sig"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Oracle = exports.OutdatedDataError = void 0;\nconst packet = require(\"dns-packet\");\nconst types = require(\"dns-packet/types\");\nconst ethers_1 = require(\"ethers\");\nconst DNSSEC__factory_1 = require(\"./typechain/factories/DNSSEC__factory\");\n// import { logger } from './log'\nclass OutdatedDataError extends Error {\n    constructor(answer) {\n        super(`Oracle has a newer version of the ${answer.signature.data.typeCovered} RRSET on ${answer.signature.name}`);\n        this.name = 'OudatedDataError';\n        this.answer = answer;\n    }\n}\nexports.OutdatedDataError = OutdatedDataError;\n// Compares two serial numbers using RFC1982 serial number math.\nfunction serialNumberGt(i1, i2) {\n    return (i1 < i2 && i2 - i1 > 0x7fffffff) || (i1 > i2 && i1 - i2 < 0x7fffffff);\n}\nclass Oracle {\n    constructor(address, provider, now = undefined) {\n        this.contract = DNSSEC__factory_1.DNSSEC__factory.connect(address, provider);\n        this.now = now || Date.now;\n    }\n    // Takes a `ProvableAnswer` returned by dnsprovejs and converts it into a blob of proof\n    // data for the DNSSEC oracle contract.\n    getProofData(answer) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const allProofs = answer.proofs.concat([answer.answer]);\n            for (let i = allProofs.length - 1; i >= 0; i--) {\n                if (yield this.knownProof(allProofs[i])) {\n                    if (i == allProofs.length - 1) {\n                        console.log(`All proofs for ${answer.answer.signature.data.typeCovered} ${answer.answer.signature.name} are already known`);\n                        return { rrsets: [], proof: allProofs[allProofs.length - 1].toWire(false) };\n                    }\n                    console.log(`${answer.answer.signature.data.typeCovered} ${answer.answer.signature.name} has ${i + 1} of ${allProofs.length} proofs already known`);\n                    return {\n                        rrsets: this.encodeProofs(allProofs.slice(i + 1, allProofs.length)),\n                        proof: allProofs[i].toWire(false),\n                    };\n                }\n            }\n            console.log(`${answer.answer.signature.data.typeCovered} ${answer.answer.signature.name} has no proofs already known`);\n            return {\n                rrsets: this.encodeProofs(allProofs),\n                proof: Buffer.from(ethers_1.utils.arrayify(yield this.contract.anchors())),\n            };\n        });\n    }\n    knownProof(proof) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const name = packet.name.encode(proof.signature.name);\n            const type = types.toType(proof.signature.data.typeCovered);\n            const [inception, expiration, hash] = yield this.contract.rrdata(type, name);\n            // If the existing record is newer than our one, throw an error.\n            if (serialNumberGt(inception, proof.signature.data.inception)) {\n                throw new OutdatedDataError(proof);\n            }\n            const expired = serialNumberGt(this.now() / 1000, expiration);\n            const proofHash = ethers_1.utils.keccak256(proof.toWire(false)).slice(0, 42);\n            return (hash == proofHash) && !expired;\n        });\n    }\n    encodeProofs(proofs) {\n        return proofs.map((proof) => ({ rrset: proof.toWire(true), sig: proof.signature.data.signature }));\n    }\n}\nexports.Oracle = Oracle;\n"]},"metadata":{},"sourceType":"script"}