{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\n\nvar DataStructures_1 = require(\"../../utils/DataStructures\");\n\nvar MessageUtils_1 = require(\"../../utils/MessageUtils\");\n\nvar LogMessageInternalImpl = function () {\n  function LogMessageInternalImpl(loggerName, message, errorAsStack, error, logGroupRule, date, level, ready) {\n    this._errorAsStack = null;\n    this._error = null;\n    this._loggerName = loggerName;\n    this._message = message;\n    this._errorAsStack = errorAsStack;\n    this._error = error;\n    this._logGroupRule = logGroupRule;\n    this._date = date;\n    this._level = level;\n    this._ready = ready;\n  }\n\n  Object.defineProperty(LogMessageInternalImpl.prototype, \"loggerName\", {\n    get: function () {\n      return this._loggerName;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LogMessageInternalImpl.prototype, \"message\", {\n    get: function () {\n      return this._message;\n    },\n    set: function (value) {\n      this._message = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LogMessageInternalImpl.prototype, \"errorAsStack\", {\n    get: function () {\n      return this._errorAsStack;\n    },\n    set: function (value) {\n      this._errorAsStack = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LogMessageInternalImpl.prototype, \"error\", {\n    get: function () {\n      return this._error;\n    },\n    set: function (value) {\n      this._error = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LogMessageInternalImpl.prototype, \"logGroupRule\", {\n    get: function () {\n      return this._logGroupRule;\n    },\n    set: function (value) {\n      this._logGroupRule = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LogMessageInternalImpl.prototype, \"date\", {\n    get: function () {\n      return this._date;\n    },\n    set: function (value) {\n      this._date = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LogMessageInternalImpl.prototype, \"level\", {\n    get: function () {\n      return this._level;\n    },\n    set: function (value) {\n      this._level = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LogMessageInternalImpl.prototype, \"isMessageLogData\", {\n    get: function () {\n      return typeof this._message !== \"string\";\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LogMessageInternalImpl.prototype, \"ready\", {\n    get: function () {\n      return this._ready;\n    },\n    set: function (value) {\n      this._ready = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LogMessageInternalImpl.prototype, \"messageAsString\", {\n    get: function () {\n      if (typeof this._message === \"string\") {\n        return this._message;\n      }\n\n      return this._message.msg;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LogMessageInternalImpl.prototype, \"logData\", {\n    get: function () {\n      var result = null;\n\n      if (typeof this._message !== \"string\") {\n        result = this.message;\n      }\n\n      return result;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return LogMessageInternalImpl;\n}();\n/**\n * Abstract base logger, extend to easily implement a custom logger that\n * logs wherever you want. You only need to implement doLog(msg: LogMessage) and\n * log that somewhere (it will contain format and everything else).\n */\n\n\nvar AbstractLogger = function () {\n  function AbstractLogger(name, logGroupRuntimeSettings) {\n    this._allMessages = new DataStructures_1.LinkedList();\n    this._open = true;\n    this._name = name;\n    this._logGroupRuntimeSettings = logGroupRuntimeSettings;\n  }\n\n  Object.defineProperty(AbstractLogger.prototype, \"name\", {\n    get: function () {\n      return this._name;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AbstractLogger.prototype.trace = function (msg, error) {\n    if (error === void 0) {\n      error = null;\n    }\n\n    this._log(LoggerOptions_1.LogLevel.Trace, msg, error);\n  };\n\n  AbstractLogger.prototype.debug = function (msg, error) {\n    if (error === void 0) {\n      error = null;\n    }\n\n    this._log(LoggerOptions_1.LogLevel.Debug, msg, error);\n  };\n\n  AbstractLogger.prototype.info = function (msg, error) {\n    if (error === void 0) {\n      error = null;\n    }\n\n    this._log(LoggerOptions_1.LogLevel.Info, msg, error);\n  };\n\n  AbstractLogger.prototype.warn = function (msg, error) {\n    if (error === void 0) {\n      error = null;\n    }\n\n    this._log(LoggerOptions_1.LogLevel.Warn, msg, error);\n  };\n\n  AbstractLogger.prototype.error = function (msg, error) {\n    if (error === void 0) {\n      error = null;\n    }\n\n    this._log(LoggerOptions_1.LogLevel.Error, msg, error);\n  };\n\n  AbstractLogger.prototype.fatal = function (msg, error) {\n    if (error === void 0) {\n      error = null;\n    }\n\n    this._log(LoggerOptions_1.LogLevel.Fatal, msg, error);\n  };\n\n  AbstractLogger.prototype.isTraceEnabled = function () {\n    return this._logGroupRuntimeSettings.level === LoggerOptions_1.LogLevel.Trace;\n  };\n\n  AbstractLogger.prototype.isDebugEnabled = function () {\n    return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Debug;\n  };\n\n  AbstractLogger.prototype.isInfoEnabled = function () {\n    return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Info;\n  };\n\n  AbstractLogger.prototype.isWarnEnabled = function () {\n    return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Warn;\n  };\n\n  AbstractLogger.prototype.isErrorEnabled = function () {\n    return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Error;\n  };\n\n  AbstractLogger.prototype.isFatalEnabled = function () {\n    return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Fatal;\n  };\n\n  AbstractLogger.prototype.getLogLevel = function () {\n    return this._logGroupRuntimeSettings.level;\n  };\n\n  AbstractLogger.prototype.isOpen = function () {\n    return this._open;\n  };\n\n  AbstractLogger.prototype.close = function () {\n    this._open = false;\n\n    this._allMessages.clear();\n  };\n\n  AbstractLogger.prototype.createDefaultLogMessage = function (msg) {\n    return MessageUtils_1.MessageFormatUtils.renderDefaultLog4jMessage(msg, true);\n  };\n  /**\n   * Return optional message formatter. All LoggerTypes (except custom) will see if\n   * they have this, and if so use it to log.\n   * @returns {((message:LogMessage)=>string)|null}\n   */\n\n\n  AbstractLogger.prototype._getMessageFormatter = function () {\n    return this._logGroupRuntimeSettings.formatterLogMessage;\n  };\n\n  AbstractLogger.prototype._log = function (level, msg, error) {\n    if (error === void 0) {\n      error = null;\n    }\n\n    if (this._open && this._logGroupRuntimeSettings.level <= level) {\n      var functionMessage = function () {\n        if (typeof msg === \"function\") {\n          return msg();\n        }\n\n        return msg;\n      };\n\n      var functionError = function () {\n        if (typeof error === \"function\") {\n          return error();\n        }\n\n        return error;\n      };\n\n      this._allMessages.addTail(this.createMessage(level, functionMessage, functionError, new Date()));\n\n      this.processMessages();\n    }\n  };\n\n  AbstractLogger.prototype.createMessage = function (level, msg, error, date) {\n    var _this = this;\n\n    var errorResult = error();\n\n    if (errorResult !== null) {\n      var message_1 = new LogMessageInternalImpl(this._name, msg(), null, errorResult, this._logGroupRuntimeSettings.logGroupRule, date, level, false);\n      MessageUtils_1.MessageFormatUtils.renderError(errorResult).then(function (stack) {\n        message_1.errorAsStack = stack;\n        message_1.ready = true;\n\n        _this.processMessages();\n      }).catch(function () {\n        message_1.errorAsStack = \"<UNKNOWN> unable to get stack.\";\n        message_1.ready = true;\n\n        _this.processMessages();\n      });\n      return message_1;\n    }\n\n    return new LogMessageInternalImpl(this._name, msg(), null, errorResult, this._logGroupRuntimeSettings.logGroupRule, date, level, true);\n  };\n\n  AbstractLogger.prototype.processMessages = function () {\n    // Basically we wait until errors are resolved (those messages\n    // may not be ready).\n    var msgs = this._allMessages;\n\n    if (msgs.getSize() > 0) {\n      do {\n        var msg = msgs.getHead();\n\n        if (msg != null) {\n          if (!msg.ready) {\n            break;\n          }\n\n          msgs.removeHead(); // This can never be null normally, but strict null checking ...\n\n          if (msg.message !== null) {\n            this.doLog(msg);\n          }\n        }\n      } while (msgs.getSize() > 0);\n    }\n  };\n\n  return AbstractLogger;\n}();\n\nexports.AbstractLogger = AbstractLogger;","map":{"version":3,"sources":["../../../../src/logging/log/standard/AbstractLogger.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar LoggerOptions_1 = require(\"../LoggerOptions\");\nvar DataStructures_1 = require(\"../../utils/DataStructures\");\nvar MessageUtils_1 = require(\"../../utils/MessageUtils\");\nvar LogMessageInternalImpl = (function () {\n    function LogMessageInternalImpl(loggerName, message, errorAsStack, error, logGroupRule, date, level, ready) {\n        this._errorAsStack = null;\n        this._error = null;\n        this._loggerName = loggerName;\n        this._message = message;\n        this._errorAsStack = errorAsStack;\n        this._error = error;\n        this._logGroupRule = logGroupRule;\n        this._date = date;\n        this._level = level;\n        this._ready = ready;\n    }\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"loggerName\", {\n        get: function () {\n            return this._loggerName;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"message\", {\n        get: function () {\n            return this._message;\n        },\n        set: function (value) {\n            this._message = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"errorAsStack\", {\n        get: function () {\n            return this._errorAsStack;\n        },\n        set: function (value) {\n            this._errorAsStack = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"error\", {\n        get: function () {\n            return this._error;\n        },\n        set: function (value) {\n            this._error = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"logGroupRule\", {\n        get: function () {\n            return this._logGroupRule;\n        },\n        set: function (value) {\n            this._logGroupRule = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"date\", {\n        get: function () {\n            return this._date;\n        },\n        set: function (value) {\n            this._date = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"level\", {\n        get: function () {\n            return this._level;\n        },\n        set: function (value) {\n            this._level = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"isMessageLogData\", {\n        get: function () {\n            return typeof (this._message) !== \"string\";\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"ready\", {\n        get: function () {\n            return this._ready;\n        },\n        set: function (value) {\n            this._ready = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"messageAsString\", {\n        get: function () {\n            if (typeof (this._message) === \"string\") {\n                return this._message;\n            }\n            return this._message.msg;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogMessageInternalImpl.prototype, \"logData\", {\n        get: function () {\n            var result = null;\n            if (typeof (this._message) !== \"string\") {\n                result = this.message;\n            }\n            return result;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LogMessageInternalImpl;\n}());\n/**\n * Abstract base logger, extend to easily implement a custom logger that\n * logs wherever you want. You only need to implement doLog(msg: LogMessage) and\n * log that somewhere (it will contain format and everything else).\n */\nvar AbstractLogger = (function () {\n    function AbstractLogger(name, logGroupRuntimeSettings) {\n        this._allMessages = new DataStructures_1.LinkedList();\n        this._open = true;\n        this._name = name;\n        this._logGroupRuntimeSettings = logGroupRuntimeSettings;\n    }\n    Object.defineProperty(AbstractLogger.prototype, \"name\", {\n        get: function () {\n            return this._name;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    AbstractLogger.prototype.trace = function (msg, error) {\n        if (error === void 0) { error = null; }\n        this._log(LoggerOptions_1.LogLevel.Trace, msg, error);\n    };\n    AbstractLogger.prototype.debug = function (msg, error) {\n        if (error === void 0) { error = null; }\n        this._log(LoggerOptions_1.LogLevel.Debug, msg, error);\n    };\n    AbstractLogger.prototype.info = function (msg, error) {\n        if (error === void 0) { error = null; }\n        this._log(LoggerOptions_1.LogLevel.Info, msg, error);\n    };\n    AbstractLogger.prototype.warn = function (msg, error) {\n        if (error === void 0) { error = null; }\n        this._log(LoggerOptions_1.LogLevel.Warn, msg, error);\n    };\n    AbstractLogger.prototype.error = function (msg, error) {\n        if (error === void 0) { error = null; }\n        this._log(LoggerOptions_1.LogLevel.Error, msg, error);\n    };\n    AbstractLogger.prototype.fatal = function (msg, error) {\n        if (error === void 0) { error = null; }\n        this._log(LoggerOptions_1.LogLevel.Fatal, msg, error);\n    };\n    AbstractLogger.prototype.isTraceEnabled = function () {\n        return this._logGroupRuntimeSettings.level === LoggerOptions_1.LogLevel.Trace;\n    };\n    AbstractLogger.prototype.isDebugEnabled = function () {\n        return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Debug;\n    };\n    AbstractLogger.prototype.isInfoEnabled = function () {\n        return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Info;\n    };\n    AbstractLogger.prototype.isWarnEnabled = function () {\n        return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Warn;\n    };\n    AbstractLogger.prototype.isErrorEnabled = function () {\n        return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Error;\n    };\n    AbstractLogger.prototype.isFatalEnabled = function () {\n        return this._logGroupRuntimeSettings.level <= LoggerOptions_1.LogLevel.Fatal;\n    };\n    AbstractLogger.prototype.getLogLevel = function () {\n        return this._logGroupRuntimeSettings.level;\n    };\n    AbstractLogger.prototype.isOpen = function () {\n        return this._open;\n    };\n    AbstractLogger.prototype.close = function () {\n        this._open = false;\n        this._allMessages.clear();\n    };\n    AbstractLogger.prototype.createDefaultLogMessage = function (msg) {\n        return MessageUtils_1.MessageFormatUtils.renderDefaultLog4jMessage(msg, true);\n    };\n    /**\n     * Return optional message formatter. All LoggerTypes (except custom) will see if\n     * they have this, and if so use it to log.\n     * @returns {((message:LogMessage)=>string)|null}\n     */\n    AbstractLogger.prototype._getMessageFormatter = function () {\n        return this._logGroupRuntimeSettings.formatterLogMessage;\n    };\n    AbstractLogger.prototype._log = function (level, msg, error) {\n        if (error === void 0) { error = null; }\n        if (this._open && this._logGroupRuntimeSettings.level <= level) {\n            var functionMessage = function () {\n                if (typeof msg === \"function\") {\n                    return msg();\n                }\n                return msg;\n            };\n            var functionError = function () {\n                if (typeof error === \"function\") {\n                    return error();\n                }\n                return error;\n            };\n            this._allMessages.addTail(this.createMessage(level, functionMessage, functionError, new Date()));\n            this.processMessages();\n        }\n    };\n    AbstractLogger.prototype.createMessage = function (level, msg, error, date) {\n        var _this = this;\n        var errorResult = error();\n        if (errorResult !== null) {\n            var message_1 = new LogMessageInternalImpl(this._name, msg(), null, errorResult, this._logGroupRuntimeSettings.logGroupRule, date, level, false);\n            MessageUtils_1.MessageFormatUtils.renderError(errorResult).then(function (stack) {\n                message_1.errorAsStack = stack;\n                message_1.ready = true;\n                _this.processMessages();\n            }).catch(function () {\n                message_1.errorAsStack = \"<UNKNOWN> unable to get stack.\";\n                message_1.ready = true;\n                _this.processMessages();\n            });\n            return message_1;\n        }\n        return new LogMessageInternalImpl(this._name, msg(), null, errorResult, this._logGroupRuntimeSettings.logGroupRule, date, level, true);\n    };\n    AbstractLogger.prototype.processMessages = function () {\n        // Basically we wait until errors are resolved (those messages\n        // may not be ready).\n        var msgs = this._allMessages;\n        if (msgs.getSize() > 0) {\n            do {\n                var msg = msgs.getHead();\n                if (msg != null) {\n                    if (!msg.ready) {\n                        break;\n                    }\n                    msgs.removeHead();\n                    // This can never be null normally, but strict null checking ...\n                    if (msg.message !== null) {\n                        this.doLog(msg);\n                    }\n                }\n            } while (msgs.getSize() > 0);\n        }\n    };\n    return AbstractLogger;\n}());\nexports.AbstractLogger = AbstractLogger;\n//# sourceMappingURL=AbstractLogger.js.map"]},"metadata":{},"sourceType":"script"}