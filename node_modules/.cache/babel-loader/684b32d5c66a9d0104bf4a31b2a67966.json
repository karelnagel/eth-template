{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Log level for a logger.\n */\n\nvar LogLevel;\n\n(function (LogLevel) {\n  LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\n  LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n  LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n  LogLevel[LogLevel[\"Warn\"] = 3] = \"Warn\";\n  LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\n  LogLevel[LogLevel[\"Fatal\"] = 5] = \"Fatal\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n/* tslint:disable:no-namespace */\n\n\n(function (LogLevel) {\n  /**\n   * Returns LogLevel based on string representation\n   * @param val Value\n   * @returns {LogLevel}, Error is thrown if invalid.\n   */\n  function fromString(val) {\n    if (val == null) {\n      throw new Error(\"Argument must be set\");\n    }\n\n    switch (val.toLowerCase()) {\n      case \"trace\":\n        return LogLevel.Trace;\n\n      case \"debug\":\n        return LogLevel.Debug;\n\n      case \"info\":\n        return LogLevel.Info;\n\n      case \"warn\":\n        return LogLevel.Warn;\n\n      case \"error\":\n        return LogLevel.Error;\n\n      case \"fatal\":\n        return LogLevel.Fatal;\n\n      default:\n        throw new Error(\"Unsupported value for conversion: \" + val);\n    }\n  }\n\n  LogLevel.fromString = fromString;\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n/* tslint:disable:enable-namespace */\n\n/**\n * Where to log to? Pick one of the constants. Custom requires a callback to be present, see LFService.createLoggerFactory(...)\n * where this comes into play.\n */\n\n\nvar LoggerType;\n\n(function (LoggerType) {\n  LoggerType[LoggerType[\"Console\"] = 0] = \"Console\";\n  LoggerType[LoggerType[\"MessageBuffer\"] = 1] = \"MessageBuffer\";\n  LoggerType[LoggerType[\"Custom\"] = 2] = \"Custom\";\n})(LoggerType = exports.LoggerType || (exports.LoggerType = {}));\n/**\n * Defines several date enums used for formatting a date.\n */\n\n\nvar DateFormatEnum;\n\n(function (DateFormatEnum) {\n  /**\n   * Displays as: year-month-day hour:minute:second,millis -> 1999-02-12 23:59:59,123\n   * Note the date separator can be set separately.\n   */\n  DateFormatEnum[DateFormatEnum[\"Default\"] = 0] = \"Default\";\n  /**\n   * Displays as: year-month-day hour:minute:second -> 1999-02-12 23:59:59\n   * Note the date separator can be set separately.\n   */\n\n  DateFormatEnum[DateFormatEnum[\"YearMonthDayTime\"] = 1] = \"YearMonthDayTime\";\n  /**\n   * Displays as: year-day-month hour:minute:second,millis -> 1999-12-02 23:59:59,123\n   * Note the date separator can be set separately.\n   */\n\n  DateFormatEnum[DateFormatEnum[\"YearDayMonthWithFullTime\"] = 2] = \"YearDayMonthWithFullTime\";\n  /**\n   * Displays as: year-day-month hour:minute:second -> 1999-12-02 23:59:59\n   * Note the date separator can be set separately.\n   */\n\n  DateFormatEnum[DateFormatEnum[\"YearDayMonthTime\"] = 3] = \"YearDayMonthTime\";\n})(DateFormatEnum = exports.DateFormatEnum || (exports.DateFormatEnum = {}));\n/* tslint:disable:no-namespace */\n\n\n(function (DateFormatEnum) {\n  /**\n   * Returns LogLevel based on string representation\n   * @param val Value\n   * @returns {LogLevel}, Error is thrown if invalid.\n   */\n  function fromString(val) {\n    if (val == null) {\n      throw new Error(\"Argument must be set\");\n    }\n\n    switch (val.toLowerCase()) {\n      case \"default\":\n        return DateFormatEnum.Default;\n\n      case \"yearmonthdayTime\":\n        return DateFormatEnum.YearMonthDayTime;\n\n      case \"yeardaymonthwithfulltime\":\n        return DateFormatEnum.YearDayMonthWithFullTime;\n\n      case \"yeardaymonthtime\":\n        return DateFormatEnum.YearDayMonthTime;\n\n      default:\n        throw new Error(\"Unsupported value for conversion: \" + val);\n    }\n  }\n\n  DateFormatEnum.fromString = fromString;\n})(DateFormatEnum = exports.DateFormatEnum || (exports.DateFormatEnum = {}));\n/* tslint:disable:enable-namespace */\n\n/**\n * DateFormat class, stores data on how to format a date.\n */\n\n\nvar DateFormat = function () {\n  /**\n   * Constructor to define the dateformat used for logging, can be called empty as it uses defaults.\n   * @param formatEnum DateFormatEnum, use one of the constants from the enum. Defaults to DateFormatEnum.Default\n   * @param dateSeparator Separator used between dates, defaults to -\n   */\n  function DateFormat(formatEnum, dateSeparator) {\n    if (formatEnum === void 0) {\n      formatEnum = DateFormatEnum.Default;\n    }\n\n    if (dateSeparator === void 0) {\n      dateSeparator = \"-\";\n    }\n\n    this._formatEnum = formatEnum;\n    this._dateSeparator = dateSeparator;\n  }\n\n  Object.defineProperty(DateFormat.prototype, \"formatEnum\", {\n    get: function () {\n      return this._formatEnum;\n    },\n    set: function (value) {\n      this._formatEnum = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DateFormat.prototype, \"dateSeparator\", {\n    get: function () {\n      return this._dateSeparator;\n    },\n    set: function (value) {\n      this._dateSeparator = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  DateFormat.prototype.copy = function () {\n    return new DateFormat(this._formatEnum, this._dateSeparator);\n  };\n\n  return DateFormat;\n}();\n\nexports.DateFormat = DateFormat;\n/**\n * Information about the log format, what will a log line look like?\n */\n\nvar LogFormat = function () {\n  /**\n   * Constructor to create a LogFormat. Can be created without parameters where it will use sane defaults.\n   * @param dateFormat DateFormat (what needs the date look like in the log line)\n   * @param showTimeStamp Show date timestamp at all?\n   * @param showLoggerName Show the logger name?\n   */\n  function LogFormat(dateFormat, showTimeStamp, showLoggerName) {\n    if (dateFormat === void 0) {\n      dateFormat = new DateFormat();\n    }\n\n    if (showTimeStamp === void 0) {\n      showTimeStamp = true;\n    }\n\n    if (showLoggerName === void 0) {\n      showLoggerName = true;\n    }\n\n    this._showTimeStamp = true;\n    this._showLoggerName = true;\n    this._dateFormat = dateFormat;\n    this._showTimeStamp = showTimeStamp;\n    this._showLoggerName = showLoggerName;\n  }\n\n  Object.defineProperty(LogFormat.prototype, \"dateFormat\", {\n    get: function () {\n      return this._dateFormat;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LogFormat.prototype, \"showTimeStamp\", {\n    get: function () {\n      return this._showTimeStamp;\n    },\n    set: function (value) {\n      this._showTimeStamp = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LogFormat.prototype, \"showLoggerName\", {\n    get: function () {\n      return this._showLoggerName;\n    },\n    set: function (value) {\n      this._showLoggerName = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return LogFormat;\n}();\n\nexports.LogFormat = LogFormat;\n/**\n * Information about the log format, what will a log line look like?\n */\n\nvar CategoryLogFormat = function () {\n  /**\n   * Create an instance defining the category log format used.\n   * @param dateFormat Date format (uses default), for details see DateFormat class.\n   * @param showTimeStamp True to show timestamp in the logging, defaults to true.\n   * @param showCategoryName True to show category name in the logging, defaults to true.\n   */\n  function CategoryLogFormat(dateFormat, showTimeStamp, showCategoryName) {\n    if (dateFormat === void 0) {\n      dateFormat = new DateFormat();\n    }\n\n    if (showTimeStamp === void 0) {\n      showTimeStamp = true;\n    }\n\n    if (showCategoryName === void 0) {\n      showCategoryName = true;\n    }\n\n    this._dateFormat = dateFormat;\n    this._showTimeStamp = showTimeStamp;\n    this._showCategoryName = showCategoryName;\n  }\n\n  Object.defineProperty(CategoryLogFormat.prototype, \"dateFormat\", {\n    get: function () {\n      return this._dateFormat;\n    },\n    set: function (value) {\n      this._dateFormat = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CategoryLogFormat.prototype, \"showTimeStamp\", {\n    get: function () {\n      return this._showTimeStamp;\n    },\n    set: function (value) {\n      this._showTimeStamp = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(CategoryLogFormat.prototype, \"showCategoryName\", {\n    get: function () {\n      return this._showCategoryName;\n    },\n    set: function (value) {\n      this._showCategoryName = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CategoryLogFormat.prototype.copy = function () {\n    return new CategoryLogFormat(this._dateFormat.copy(), this._showTimeStamp, this._showCategoryName);\n  };\n\n  return CategoryLogFormat;\n}();\n\nexports.CategoryLogFormat = CategoryLogFormat;","map":{"version":3,"sources":["../../../src/logging/log/LoggerOptions.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Log level for a logger.\n */\nvar LogLevel;\n(function (LogLevel) {\n    LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\n    LogLevel[LogLevel[\"Info\"] = 2] = \"Info\";\n    LogLevel[LogLevel[\"Warn\"] = 3] = \"Warn\";\n    LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\n    LogLevel[LogLevel[\"Fatal\"] = 5] = \"Fatal\";\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n/* tslint:disable:no-namespace */\n(function (LogLevel) {\n    /**\n     * Returns LogLevel based on string representation\n     * @param val Value\n     * @returns {LogLevel}, Error is thrown if invalid.\n     */\n    function fromString(val) {\n        if (val == null) {\n            throw new Error(\"Argument must be set\");\n        }\n        switch (val.toLowerCase()) {\n            case \"trace\":\n                return LogLevel.Trace;\n            case \"debug\":\n                return LogLevel.Debug;\n            case \"info\":\n                return LogLevel.Info;\n            case \"warn\":\n                return LogLevel.Warn;\n            case \"error\":\n                return LogLevel.Error;\n            case \"fatal\":\n                return LogLevel.Fatal;\n            default:\n                throw new Error(\"Unsupported value for conversion: \" + val);\n        }\n    }\n    LogLevel.fromString = fromString;\n})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));\n/* tslint:disable:enable-namespace */\n/**\n * Where to log to? Pick one of the constants. Custom requires a callback to be present, see LFService.createLoggerFactory(...)\n * where this comes into play.\n */\nvar LoggerType;\n(function (LoggerType) {\n    LoggerType[LoggerType[\"Console\"] = 0] = \"Console\";\n    LoggerType[LoggerType[\"MessageBuffer\"] = 1] = \"MessageBuffer\";\n    LoggerType[LoggerType[\"Custom\"] = 2] = \"Custom\";\n})(LoggerType = exports.LoggerType || (exports.LoggerType = {}));\n/**\n * Defines several date enums used for formatting a date.\n */\nvar DateFormatEnum;\n(function (DateFormatEnum) {\n    /**\n     * Displays as: year-month-day hour:minute:second,millis -> 1999-02-12 23:59:59,123\n     * Note the date separator can be set separately.\n     */\n    DateFormatEnum[DateFormatEnum[\"Default\"] = 0] = \"Default\";\n    /**\n     * Displays as: year-month-day hour:minute:second -> 1999-02-12 23:59:59\n     * Note the date separator can be set separately.\n     */\n    DateFormatEnum[DateFormatEnum[\"YearMonthDayTime\"] = 1] = \"YearMonthDayTime\";\n    /**\n     * Displays as: year-day-month hour:minute:second,millis -> 1999-12-02 23:59:59,123\n     * Note the date separator can be set separately.\n     */\n    DateFormatEnum[DateFormatEnum[\"YearDayMonthWithFullTime\"] = 2] = \"YearDayMonthWithFullTime\";\n    /**\n     * Displays as: year-day-month hour:minute:second -> 1999-12-02 23:59:59\n     * Note the date separator can be set separately.\n     */\n    DateFormatEnum[DateFormatEnum[\"YearDayMonthTime\"] = 3] = \"YearDayMonthTime\";\n})(DateFormatEnum = exports.DateFormatEnum || (exports.DateFormatEnum = {}));\n/* tslint:disable:no-namespace */\n(function (DateFormatEnum) {\n    /**\n     * Returns LogLevel based on string representation\n     * @param val Value\n     * @returns {LogLevel}, Error is thrown if invalid.\n     */\n    function fromString(val) {\n        if (val == null) {\n            throw new Error(\"Argument must be set\");\n        }\n        switch (val.toLowerCase()) {\n            case \"default\":\n                return DateFormatEnum.Default;\n            case \"yearmonthdayTime\":\n                return DateFormatEnum.YearMonthDayTime;\n            case \"yeardaymonthwithfulltime\":\n                return DateFormatEnum.YearDayMonthWithFullTime;\n            case \"yeardaymonthtime\":\n                return DateFormatEnum.YearDayMonthTime;\n            default:\n                throw new Error(\"Unsupported value for conversion: \" + val);\n        }\n    }\n    DateFormatEnum.fromString = fromString;\n})(DateFormatEnum = exports.DateFormatEnum || (exports.DateFormatEnum = {}));\n/* tslint:disable:enable-namespace */\n/**\n * DateFormat class, stores data on how to format a date.\n */\nvar DateFormat = (function () {\n    /**\n     * Constructor to define the dateformat used for logging, can be called empty as it uses defaults.\n     * @param formatEnum DateFormatEnum, use one of the constants from the enum. Defaults to DateFormatEnum.Default\n     * @param dateSeparator Separator used between dates, defaults to -\n     */\n    function DateFormat(formatEnum, dateSeparator) {\n        if (formatEnum === void 0) { formatEnum = DateFormatEnum.Default; }\n        if (dateSeparator === void 0) { dateSeparator = \"-\"; }\n        this._formatEnum = formatEnum;\n        this._dateSeparator = dateSeparator;\n    }\n    Object.defineProperty(DateFormat.prototype, \"formatEnum\", {\n        get: function () {\n            return this._formatEnum;\n        },\n        set: function (value) {\n            this._formatEnum = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DateFormat.prototype, \"dateSeparator\", {\n        get: function () {\n            return this._dateSeparator;\n        },\n        set: function (value) {\n            this._dateSeparator = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    DateFormat.prototype.copy = function () {\n        return new DateFormat(this._formatEnum, this._dateSeparator);\n    };\n    return DateFormat;\n}());\nexports.DateFormat = DateFormat;\n/**\n * Information about the log format, what will a log line look like?\n */\nvar LogFormat = (function () {\n    /**\n     * Constructor to create a LogFormat. Can be created without parameters where it will use sane defaults.\n     * @param dateFormat DateFormat (what needs the date look like in the log line)\n     * @param showTimeStamp Show date timestamp at all?\n     * @param showLoggerName Show the logger name?\n     */\n    function LogFormat(dateFormat, showTimeStamp, showLoggerName) {\n        if (dateFormat === void 0) { dateFormat = new DateFormat(); }\n        if (showTimeStamp === void 0) { showTimeStamp = true; }\n        if (showLoggerName === void 0) { showLoggerName = true; }\n        this._showTimeStamp = true;\n        this._showLoggerName = true;\n        this._dateFormat = dateFormat;\n        this._showTimeStamp = showTimeStamp;\n        this._showLoggerName = showLoggerName;\n    }\n    Object.defineProperty(LogFormat.prototype, \"dateFormat\", {\n        get: function () {\n            return this._dateFormat;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogFormat.prototype, \"showTimeStamp\", {\n        get: function () {\n            return this._showTimeStamp;\n        },\n        set: function (value) {\n            this._showTimeStamp = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LogFormat.prototype, \"showLoggerName\", {\n        get: function () {\n            return this._showLoggerName;\n        },\n        set: function (value) {\n            this._showLoggerName = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LogFormat;\n}());\nexports.LogFormat = LogFormat;\n/**\n * Information about the log format, what will a log line look like?\n */\nvar CategoryLogFormat = (function () {\n    /**\n     * Create an instance defining the category log format used.\n     * @param dateFormat Date format (uses default), for details see DateFormat class.\n     * @param showTimeStamp True to show timestamp in the logging, defaults to true.\n     * @param showCategoryName True to show category name in the logging, defaults to true.\n     */\n    function CategoryLogFormat(dateFormat, showTimeStamp, showCategoryName) {\n        if (dateFormat === void 0) { dateFormat = new DateFormat(); }\n        if (showTimeStamp === void 0) { showTimeStamp = true; }\n        if (showCategoryName === void 0) { showCategoryName = true; }\n        this._dateFormat = dateFormat;\n        this._showTimeStamp = showTimeStamp;\n        this._showCategoryName = showCategoryName;\n    }\n    Object.defineProperty(CategoryLogFormat.prototype, \"dateFormat\", {\n        get: function () {\n            return this._dateFormat;\n        },\n        set: function (value) {\n            this._dateFormat = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryLogFormat.prototype, \"showTimeStamp\", {\n        get: function () {\n            return this._showTimeStamp;\n        },\n        set: function (value) {\n            this._showTimeStamp = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CategoryLogFormat.prototype, \"showCategoryName\", {\n        get: function () {\n            return this._showCategoryName;\n        },\n        set: function (value) {\n            this._showCategoryName = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CategoryLogFormat.prototype.copy = function () {\n        return new CategoryLogFormat(this._dateFormat.copy(), this._showTimeStamp, this._showCategoryName);\n    };\n    return CategoryLogFormat;\n}());\nexports.CategoryLogFormat = CategoryLogFormat;\n//# sourceMappingURL=LoggerOptions.js.map"]},"metadata":{},"sourceType":"script"}