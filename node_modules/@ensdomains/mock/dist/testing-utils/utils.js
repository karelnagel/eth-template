"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.auctionLegacyNameWithoutFinalise = auctionLegacyNameWithoutFinalise;
exports.loadOldContract = loadOldContract;
exports.loadContract = loadContract;
exports.deploy = deploy;
exports.auctionLegacyName = exports.registerName = exports.mine = exports.advanceTime = exports.DAYS = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _util = _interopRequireDefault(require("util"));

var _moment = _interopRequireDefault(require("moment"));

var DAYS = 24 * 60 * 60;
exports.DAYS = DAYS;

var advanceTime = _util["default"].promisify(function (web3, delay, done) {
  return web3.currentProvider.send({
    jsonrpc: '2.0',
    method: 'evm_increaseTime',
    params: [delay]
  }, done);
});

exports.advanceTime = advanceTime;

var mine = _util["default"].promisify(function (web3, done) {
  return web3.currentProvider.send({
    jsonrpc: '2.0',
    method: 'evm_mine'
  }, done);
});

exports.mine = mine;

var registerName =
/*#__PURE__*/
function () {
  var _ref = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(web3, account, controllerContract, name) {
    var duration,
        secret,
        VALUE,
        newnameAvailable,
        commitment,
        minCommitmentAge,
        time,
        value,
        trx,
        registeredAt,
        expiresTimestamp,
        expires,
        releasedDate,
        endOfPremiumDate,
        _args = arguments;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            duration = _args.length > 4 && _args[4] !== undefined ? _args[4] : 365 * DAYS;
            console.log("Registering ".concat(name));
            secret = '0x0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF';
            VALUE = duration + 1;
            _context.next = 6;
            return controllerContract.available(name).call();

          case 6:
            newnameAvailable = _context.sent;
            _context.next = 9;
            return controllerContract.makeCommitment(name, account, secret).call();

          case 9:
            commitment = _context.sent;
            _context.next = 12;
            return controllerContract.commit(commitment).send({
              from: account
            });

          case 12:
            _context.next = 14;
            return controllerContract.minCommitmentAge().call();

          case 14:
            minCommitmentAge = _context.sent;
            _context.next = 17;
            return advanceTime(web3, parseInt(minCommitmentAge));

          case 17:
            time = _context.sent;
            _context.next = 20;
            return mine(web3);

          case 20:
            _context.next = 22;
            return controllerContract.rentPrice(name, duration).call();

          case 22:
            value = _context.sent;
            _context.next = 25;
            return controllerContract.register(name, account, duration, secret).send({
              from: account,
              value: value,
              gas: 6000000
            });

          case 25:
            trx = _context.sent;
            _context.t0 = _moment["default"];
            _context.next = 29;
            return web3.eth.getBlock('latest');

          case 29:
            _context.t1 = _context.sent.timestamp;
            _context.t2 = _context.t1 * 1000;
            registeredAt = (0, _context.t0)(_context.t2);
            expiresTimestamp = trx.events.NameRegistered.returnValues.expires;
            expires = (0, _moment["default"])(expiresTimestamp * 1000);
            releasedDate = (0, _moment["default"])(expiresTimestamp * 1000).add(90, 'days');
            endOfPremiumDate = (0, _moment["default"])(expiresTimestamp * 1000).add(90 + 28, 'days');
            console.log({
              name: name,
              registeredAt: registeredAt,
              expiresTimestamp: expiresTimestamp,
              expires: expires,
              releasedDate: releasedDate,
              endOfPremiumDate: endOfPremiumDate
            }); // The name should be no longer available

            _context.next = 39;
            return controllerContract.available(name).call();

          case 39:
            newnameAvailable = _context.sent;

            if (!newnameAvailable) {
              _context.next = 42;
              break;
            }

            throw "Failed to register \"".concat(name, "\"");

          case 42:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function registerName(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  };
}();

exports.registerName = registerName;

function auctionLegacyNameWithoutFinalise(_x5, _x6, _x7, _x8) {
  return _auctionLegacyNameWithoutFinalise.apply(this, arguments);
}

function _auctionLegacyNameWithoutFinalise() {
  _auctionLegacyNameWithoutFinalise = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee3(web3, account, registrarContract, name) {
    var labelhash, value, salt, auctionlength, reveallength, bidhash, labelState;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            labelhash = web3.utils.sha3(name);
            value = web3.utils.toWei('10', 'ether');
            salt = web3.utils.sha3('0x01');
            auctionlength = 60 * 60 * 24 * 5;
            reveallength = 60 * 60 * 24 * 2;
            _context3.next = 7;
            return registrarContract.shaBid(labelhash, account, value, salt).call();

          case 7:
            bidhash = _context3.sent;
            _context3.next = 10;
            return registrarContract.state(labelhash).call();

          case 10:
            labelState = _context3.sent;
            _context3.next = 13;
            return registrarContract.startAuction(labelhash).send({
              from: account,
              gas: 6000000
            });

          case 13:
            _context3.next = 15;
            return registrarContract.newBid(bidhash).send({
              from: account,
              value: value,
              gas: 6000000
            });

          case 15:
            _context3.next = 17;
            return registrarContract.state(labelhash).call();

          case 17:
            _context3.next = 19;
            return advanceTime(web3, parseInt(auctionlength - reveallength + 100));

          case 19:
            _context3.next = 21;
            return mine(web3);

          case 21:
            _context3.next = 23;
            return registrarContract.state(labelhash).call();

          case 23:
            _context3.next = 25;
            return registrarContract.unsealBid(labelhash, value, salt).send({
              from: account,
              gas: 6000000
            });

          case 25:
            _context3.next = 27;
            return advanceTime(web3, parseInt(reveallength * 2));

          case 27:
            _context3.next = 29;
            return mine(web3);

          case 29:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _auctionLegacyNameWithoutFinalise.apply(this, arguments);
}

var auctionLegacyName =
/*#__PURE__*/
function () {
  var _ref2 = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(web3, account, registrarContract, name) {
    var labelhash;
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return auctionLegacyNameWithoutFinalise(web3, account, registrarContract, name);

          case 2:
            labelhash = web3.utils.sha3(name);
            console.log('labelhash', labelhash);
            _context2.next = 6;
            return registrarContract.state(labelhash).call();

          case 6:
            _context2.next = 8;
            return registrarContract.finalizeAuction(labelhash).send({
              from: account,
              gas: 6000000
            });

          case 8:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function auctionLegacyName(_x9, _x10, _x11, _x12) {
    return _ref2.apply(this, arguments);
  };
}();

exports.auctionLegacyName = auctionLegacyName;

function loadOldContract(modName, contractName) {
  var loadpath = "".concat(process.env.PWD, "/node_modules/@ensdomains/ens-archived-contracts/abis/").concat(modName, "/").concat(contractName, ".json");
  return require(loadpath);
}

function loadContract(modName, contractPath) {
  var loadpath;
  var contractName = contractPath.split('/').reverse()[0];

  if (['ens-022', 'ethregistrar-202', 'subdomain-registrar'].includes(modName)) {
    loadpath = "".concat(process.env.PWD, "/node_modules/@ensdomains/ens-archived-contracts/abis/").concat(modName, "/").concat(contractName, ".json");
  } else {
    loadpath = "".concat(process.env.PWD, "/node_modules/@ensdomains/ens-contracts/artifacts/contracts/").concat(modName, "/").concat(contractPath, ".sol/").concat(contractName, ".json");
  }

  return require(loadpath);
}

function deploy(web3, account, contractJSON) {
  var contract = new web3.eth.Contract(contractJSON.abi);

  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }

  return contract.deploy({
    data: contractJSON.bytecode,
    arguments: args
  }).send({
    from: account,
    gas: 6700000
  });
}