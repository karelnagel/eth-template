"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _utils = require("./utils");

var _dnsPacket = _interopRequireDefault(require("dns-packet"));

var ROOT_NODE = '0x00000000000000000000000000000000';

function deployDNSSEC(_x, _x2, _x3, _x4) {
  return _deployDNSSEC.apply(this, arguments);
}

function _deployDNSSEC() {
  _deployDNSSEC = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2(web3, accounts, ens, resolver) {
    var sha3, deploy, namehash, RSASHA256Algorithm, RSASHA1Algorithm, SHA256Digest, SHA1Digest, SHA1NSEC3Digest, dnsAnchors, anchors, DnsRegistrarOld, DnsRegistrarNew, SimplePublicSuffixList, DNSSECOLD, DNSSECNEW, dnssecOld, dnssecNew, suffixes, registrarOld, registrarNew, rsasha256, rsasha1, sha256digest, sha1digest, sha1nsec3digest, setupDomain, _setupDomain;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _setupDomain = function _ref4() {
              _setupDomain = (0, _asyncToGenerator2["default"])(
              /*#__PURE__*/
              _regenerator["default"].mark(function _callee(dnssec, registrar, tld) {
                var owner;
                return _regenerator["default"].wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return ens.methods.setSubnodeOwner(ROOT_NODE, sha3(tld), registrar._address).send({
                          from: accounts[0]
                        });

                      case 2:
                        _context.next = 4;
                        return ens.methods.owner(namehash(tld)).call();

                      case 4:
                        owner = _context.sent;
                        _context.next = 7;
                        return dnssec.methods.setAlgorithm(5, rsasha1._address).send({
                          from: accounts[0]
                        });

                      case 7:
                        _context.next = 9;
                        return dnssec.methods.setAlgorithm(7, rsasha1._address).send({
                          from: accounts[0]
                        });

                      case 9:
                        _context.next = 11;
                        return dnssec.methods.setAlgorithm(8, rsasha256._address).send({
                          from: accounts[0]
                        });

                      case 11:
                        _context.next = 13;
                        return dnssec.methods.setDigest(1, sha1digest._address).send({
                          from: accounts[0]
                        });

                      case 13:
                        _context.next = 15;
                        return dnssec.methods.setDigest(2, sha256digest._address).send({
                          from: accounts[0]
                        });

                      case 15:
                        _context.next = 17;
                        return dnssec.methods.setNSEC3Digest(1, sha1nsec3digest._address).send({
                          from: accounts[0]
                        });

                      case 17:
                        console.log("".concat(tld, " DNSSSC ORACLE contract is deployed at "), dnssec._address);
                        console.log("".concat(tld, " DNSregistrar contract is deployed at "), registrar._address);
                        console.log("The owner of ".concat(tld, " doamin is "), owner);

                      case 20:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee);
              }));
              return _setupDomain.apply(this, arguments);
            };

            setupDomain = function _ref3(_x5, _x6, _x7) {
              return _setupDomain.apply(this, arguments);
            };

            namehash = function _ref2(name) {
              var node = '0x0000000000000000000000000000000000000000000000000000000000000000';

              if (name !== '') {
                var labels = name.split('.');

                for (var i = labels.length - 1; i >= 0; i--) {
                  node = sha3(node + sha3(labels[i]).slice(2), {
                    encoding: 'hex'
                  });
                }
              }

              return node.toString();
            };

            deploy = function _ref(contractJSON) {
              var contract = new web3.eth.Contract(contractJSON.abi);

              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }

              return contract.deploy({
                data: contractJSON.bytecode,
                arguments: args
              }).send({
                from: accounts[0],
                gas: 6700000
              });
            };

            sha3 = web3.utils.sha3;
            RSASHA256Algorithm = (0, _utils.loadContract)('dnssec-oracle', 'algorithms/RSASHA256Algorithm');
            RSASHA1Algorithm = (0, _utils.loadContract)('dnssec-oracle', 'algorithms/RSASHA1Algorithm');
            SHA256Digest = (0, _utils.loadContract)('dnssec-oracle', 'digests/SHA256Digest');
            SHA1Digest = (0, _utils.loadContract)('dnssec-oracle', 'digests/SHA1Digest');
            SHA1NSEC3Digest = (0, _utils.loadContract)('dnssec-oracle', 'nsec3digests/SHA1NSEC3Digest');
            dnsAnchors = require('@ensdomains/dnssec-oracle-anchors');
            anchors = dnsAnchors.realEntries;
            DnsRegistrarOld = (0, _utils.loadOldContract)('dnsregistrar', 'DNSRegistrar');
            DnsRegistrarNew = (0, _utils.loadContract)('dnsregistrar', 'DNSRegistrar');
            SimplePublicSuffixList = (0, _utils.loadContract)('dnsregistrar', 'SimplePublicSuffixList');
            DNSSECOLD = (0, _utils.loadOldContract)('dnssec-oracle', 'DNSSECImpl');
            DNSSECNEW = (0, _utils.loadContract)('dnssec-oracle', 'DNSSECImpl');
            /* Deploy the main contracts  */

            _context2.next = 19;
            return deploy(DNSSECOLD, dnsAnchors.encode(anchors));

          case 19:
            dnssecOld = _context2.sent;
            _context2.next = 22;
            return deploy(DNSSECNEW, dnsAnchors.encode(anchors));

          case 22:
            dnssecNew = _context2.sent;
            _context2.next = 25;
            return deploy(SimplePublicSuffixList);

          case 25:
            suffixes = _context2.sent;
            _context2.next = 28;
            return suffixes.methods.addPublicSuffixes(['0x' + _dnsPacket["default"].name.encode('xyz').toString('hex')]).send({
              from: accounts[0]
            });

          case 28:
            _context2.next = 30;
            return deploy(DnsRegistrarOld, dnssecOld._address, ens._address);

          case 30:
            registrarOld = _context2.sent;
            _context2.next = 33;
            return deploy(DnsRegistrarNew, dnssecNew._address, suffixes._address, ens._address);

          case 33:
            registrarNew = _context2.sent;
            _context2.next = 36;
            return deploy(RSASHA256Algorithm);

          case 36:
            rsasha256 = _context2.sent;
            _context2.next = 39;
            return deploy(RSASHA1Algorithm);

          case 39:
            rsasha1 = _context2.sent;
            _context2.next = 42;
            return deploy(SHA256Digest);

          case 42:
            sha256digest = _context2.sent;
            _context2.next = 45;
            return deploy(SHA1Digest);

          case 45:
            sha1digest = _context2.sent;
            _context2.next = 48;
            return deploy(SHA1NSEC3Digest);

          case 48:
            sha1nsec3digest = _context2.sent;
            _context2.next = 51;
            return resolver.methods.setApprovalForAll(registrarNew._address, true).send({
              from: accounts[0]
            });

          case 51:
            _context2.next = 53;
            return setupDomain(dnssecOld, registrarOld, 'art');

          case 53:
            _context2.next = 55;
            return setupDomain(dnssecNew, registrarNew, 'xyz');

          case 55:
            return _context2.abrupt("return", {
              dnssecOld: dnssecOld,
              dnssecNew: dnssecNew
            });

          case 56:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _deployDNSSEC.apply(this, arguments);
}

var _default = deployDNSSEC;
exports["default"] = _default;