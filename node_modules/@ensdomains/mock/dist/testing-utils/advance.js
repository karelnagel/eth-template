"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var Web3 = require('web3');

var util = require('util');

var DAYS = 24 * 60 * 60;
var web3;

function setupWeb3(_x) {
  return _setupWeb.apply(this, arguments);
}

function _setupWeb() {
  _setupWeb = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee(customProvider) {
    var networkId;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            web3 = new Web3(customProvider);
            _context.next = 3;
            return web3.eth.net.getId();

          case 3:
            networkId = _context.sent;
            return _context.abrupt("return", {
              web3: web3,
              networkId: networkId
            });

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _setupWeb.apply(this, arguments);
}

var advanceTime = util.promisify(function (web3, delay, done) {
  return web3.currentProvider.send({
    jsonrpc: '2.0',
    method: 'evm_increaseTime',
    params: [delay]
  }, done);
});
var mine = util.promisify(function (web3, done) {
  return web3.currentProvider.send({
    jsonrpc: '2.0',
    method: 'evm_mine'
  }, done);
});

function init() {
  return _init.apply(this, arguments);
}

function _init() {
  _init = (0, _asyncToGenerator2["default"])(
  /*#__PURE__*/
  _regenerator["default"].mark(function _callee2() {
    var provider, _ref, web3, current;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            provider = new Web3.providers.HttpProvider('http://localhost:8545');
            _context2.next = 3;
            return setupWeb3(provider);

          case 3:
            _ref = _context2.sent;
            web3 = _ref.web3;
            _context2.next = 7;
            return web3.eth.getBlock('latest');

          case 7:
            current = _context2.sent;
            console.log("The current time is ".concat(new Date(current.timestamp * 1000)));
            _context2.next = 11;
            return advanceTime(web3, DAYS * 365);

          case 11:
            _context2.next = 13;
            return mine(web3);

          case 13:
            _context2.next = 15;
            return web3.eth.getBlock('latest');

          case 15:
            current = _context2.sent;
            console.log("The current time is ".concat(new Date(current.timestamp * 1000)));

          case 17:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _init.apply(this, arguments);
}

init();